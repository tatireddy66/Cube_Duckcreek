//# sourceURL=dyn/js/alphanum
/*
 * 2016-10-21 - CStrolia - Modifying to improve efficiency, reduce code
 * bloat, remove adding a prototype to the native Array type that is not
 * a polyfill for a current or planned spec and putting code into an IIFE
 * to reduce pollution of the global namespace
 * 2016-10-25 - CStrolia - Adding some fixes to reduce fragility
 * */
(function(global){
    var PERIOD = 46;
    var ZERO = 48, NINE = 57;

    global.alphanumSorting = {
        caseInsensitive: alphanumCase,
        caseSensitive: alphanum
    };

    /* alphanum.js (C) Brian Huisman
     * Based on the Alphanum Algorithm by David Koelle
     * The Alphanum Algorithm is discussed at http://www.DaveKoelle.com
     *
     * Distributed under same license as original
     *
     * This library is free software; you can redistribute it and/or
     * modify it under the terms of the GNU Lesser General Public
     * License as published by the Free Software Foundation; either
     * version 2.1 of the License, or any later version.
     *
     * This library is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     * Lesser General Public License for more details.
     *
     * You should have received a copy of the GNU Lesser General Public
     * License along with this library; if not, write to the Free Software
     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
     */

    /* ********************************************************************
     * Alphanum sort() function version - case sensitive
     *  - Slower, but easier to modify for arrays of objects which contain
     *    string properties
     *
     */
    function alphanum(a, b) {
        var aa, bb, c, d, x;
        a = a + '' || '';
        b = b + '' || '';
        aa = chunkify(a);
        bb = chunkify(b);

        for (x = 0; aa[x] && bb[x]; x++) {
            if (aa[x] !== bb[x]) {
                c = Number(aa[x]);
                d = Number(bb[x]);
                if (c == aa[x] && d == bb[x]) {
                    return c - d;
                } else {
                    return (aa[x] > bb[x]) ? 1 : -1;
                }
            }
        }
        return ((aa || {}).length || 0) - ((bb || {}).length || 0);
    }

    /* ********************************************************************
     * Alphanum sort() function version - case insensitive
     *  - Slower, but easier to modify for arrays of objects which contain
     *    string properties
     *
     */
    function alphanumCase(a, b) {
        a = a + '' || '';
        b = b + '' || '';
        return alphanum(a.toLowerCase(), b.toLowerCase());
    }

    function chunkify(t) {
        var tz = [];
        var x = 0, y = -1, m, n = 0, i, j;

        while (i = (j = t.charAt(x++)).charCodeAt(0)) {
            m = (i == PERIOD || (i >=ZERO && i <= NINE));
            if (m !== n) {
                tz[++y] = "";
                n = m;
            }
            tz[y] += j;
        }
        return tz;
    }

}(window));
