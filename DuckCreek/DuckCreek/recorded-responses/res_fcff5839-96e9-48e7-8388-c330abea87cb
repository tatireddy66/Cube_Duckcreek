'use strict';

//# sourceURL=dyn/js/submission
var quoteCount;

function SubmissionManagementController($scope, $rootScope, Submission, Presentation, Search, Account, Activity, Notes, Navigation, ProductSelection, $compile, $timeout, Quote, Issuance) {
    $timeout(function () {
        $(document).keypress(function (e) {
            var searchString, searchDisabled, itemWhichHasFocus, itemWhichHasFocusType;
            var possibleButtons = [];
            if (e != null) {
                itemWhichHasFocus = e.target.id;
                itemWhichHasFocusType = e.target.type;

                if (e.which == 13) {     // enter key (13)
                    if (itemWhichHasFocusType &&
                        (itemWhichHasFocusType == 'textarea' || itemWhichHasFocusType == 'submit')) {
                        // these are text area boxes  or submit buttons and we want the default behavior

                    } else if (itemWhichHasFocusType == 'button') {
                        // this is the fancy radio buttons and we want the default behavior

                    } else {
                        e.preventDefault();
                        if (itemWhichHasFocus === 'globalSearch') {
                            searchString = $('#globalSearch').val();
                            searchDisabled = $('#searchButton').prop('disabled');
                            if (searchString && !searchDisabled) {
                                // will do the search in this condition
                                $('#searchButton').click();
                            }
                        } else {
                            // this is needed for IE10 ... it doesn't behave the same as chrome
                            // for all modals, we have to trigger the click event
                            if (itemWhichHasFocus === "producerLookupModal") {
                                $('#producerLookupModal').click();
                                return;
                            }

                            else if (itemWhichHasFocus === "agencyLookupModal") {
                                $('#agencyLookupModal').click();
                                return;
                            }

                            else if (itemWhichHasFocus === "carrierLookupModal") {
                                $('#carrierLookupModal').click();
                                return;
                            }

                            // if it's a check box, just execute the click event
                            if (itemWhichHasFocusType === "checkbox") {
                                $('#' + itemWhichHasFocus).click();
                                return;
                            }

                            // load the possible buttons into an array
                            possibleButtons.push($('#subSaveButton'));
                            possibleButtons.push($('#subUpdateButton'));
                            possibleButtons.push($('#subUpdateDispButton'));
                            possibleButtons.push($('#subReopenButton'));

                            $.each(possibleButtons, function (i, currentButton) {
                                    if (currentButton[0] && !currentButton[0].disabled && currentButton.is(':visible')) {
                                        currentButton.click();

                                    }
                                }
                            );
                        }
                    }
                } else if (e.which == 32) { // space bar
                    if (itemWhichHasFocus == "producerLookupModal") {
                        $('#producerLookupModal').click();

                    }

                    else if (itemWhichHasFocus == "agencyLookupModal") {
                        $('#agencyLookupModal').click();

                    }

                    else if (itemWhichHasFocus == "carrierLookupModal") {
                        $('#carrierLookupModal').click();

                    }
                }
            }
        });
    }, 2500);

    $scope.SOURCE_SYSTEM_CUBE = SOURCE_SYSTEM_CUBE;
    $scope.mniTwisty = [];

    //Temporary: Console time and Console endTime added to UI Profile View Submission (Performance)
    RA.UI.consoleTime('Load Submission Info Page');
    var NO_TAXONOMY_MATCH = '--No Match Found--';

    $scope.policyPremiums = {'@type': 'java.util.LinkedHashMap'};
    $rootScope.rpmSessionMap = {};
    $scope.buSpecificFields = false;

    $scope.scrollToTop = function () {
        scroll(0, 0);
    };

    $(document).ready(function () {
        $('#select-anchor').change(function () {
            var targetPosition = $($(this).val()).offset().top - 75;
            $('html,body').animate({scrollTop: targetPosition}, 'slow');
        });
        $('#floatInfo').click(function () {
            var targetPosition = $($(this).val()).offset().top;
            $('html,body').animate({scrollTop: targetPosition}, 'slow');
        });
    });

    var SNAP_SUBMISSION = 'submission';
    var SEARCH_FOR_CARRIER_SNAPSHOT_KEY = 'searchForCarrier';
    var SYMBOL_TO_CLASS = 0;
    var CLASS_TO_SYMBOL = 1;
    var snapshots = {};
    var initStatus;

    $rootScope.raDirtyCheck = function raDirtyCheck() {
        if ($scope.viewOnlyMode || $scope.submission.transactionStatusRefCode === 'ISSU') {
            return true;
        }
        return $scope.cancelFunction(SNAP_SUBMISSION, $scope.submission, $scope.preCallback, $scope.postCallback);
    };

    $scope.cancelFunction = function cancelFunction(key, value, preCallback, postCallback) {
        var current = RA.UI.takeSnapshot(value, preCallback);
        if (snapshots[key] == current || confirm(UNSAVED_CHANGES_NAV_CONFIRM)) {
            postCallback();
            return true;
        }
        return false;
    };

    $scope.sortAlphabetically = function sortAlphabetically(list)
    {
        list.sort(function (a, b)
        {
            var result = (b.label > a.label) ? -1 : 0;
            return (a.label > b.label) ? 1 : result
        });
    };

    $rootScope.developerAutofill = function developerAutofill(doAll) {
        var submission = $scope.submission;
        var insured = $rootScope.getRpmObjects('submission', 'primaryInsured');
        var insuredLoc = insured.getValue('places')[0];
        var underwriter = $rootScope.getRpmObjects('submission', 'underwriter');
        var businessDeveloper = $rootScope.getRpmObjects('submission', 'businessDeveloper');
        var subRpm = $rootScope.getRpmObjects('submission', 'Submission');
        submission.submissionEffectiveDate = new Date();
        var dateInfo = (submission.submissionEffectiveDate.getMonth() + 1) + "." + (submission.submissionEffectiveDate.getDate()) + "." + (submission.submissionEffectiveDate.getFullYear());

        insured.getField('fein').setValue('123456789');
        if (doAll) {
            var insuredAlt = $rootScope.getRpmObjects('submission', 'alternateMailing');
            var insuredLocAlt = insuredAlt.getValue('places')[0];
            var bizDeveloper = $rootScope.getRpmObjects('submission', 'businessDeveloper');
            var delegate = $rootScope.getRpmObjects('submission', 'delegate');
            var contact = $rootScope.getRpmObjects('submission', 'primaryContact');
            var prodContact = $rootScope.getRpmObjects('submission', 'producerContact');
            var accountManager = $rootScope.getRpmObjects('submission', 'accountManager');

            // Waits for a More Named Insured to be added, then populates the fields
            // The function that adds a new MNI is at the bottom of developerAutofillAll()
            // For logic behind stopping the listener, see: http://stackoverflow.com/questions/14898296
            var listenerOff = $scope.$on('moreNamedLoaded', function () {
                var moreNamedInsured = $rootScope.getRpmCollection('submission', 'moreNamedInsured');
                var mni = moreNamedInsured[0];
                if (mni) {
                    mni.getField('legalEntity').setValue('CCORP');
                    mni.getField('fullName').setValue('Smith and Sons Inc');
                    mni.getField('fullName2').setValue('S&S Corp');
                }

                $timeout(angular.noop);
                listenerOff();
            });
            submission.needByDate = new Date();
            submission.needByDate.setDate(submission.submissionEffectiveDate.getDate() + 7);
            insured.getField('yearBusinessBegan').setValue('2000');
            contact.getField('fullName').setValue('John Smith');
            insured.getField('phoneNumber').setValue('1234567890');
            insured.getField('website').setValue('www.google.com');
            insured.getField('email').setValue('john@example.com');
            submission.descriptionOfOperations = 'This is a description of operations.';
            insured.getField('longerNameText').setValue('This is a longer named insured.');
            prodContact.getField('fullName').setValue('Jane Jones');
            submission.comments = 'This is a comment.';
        }

        //do BU-specific autofill
        if ($scope.buConfigurableSectionName === "Trucking Information") {
            insured.getField('fullName').setValue('OnTheRoad Trucking ' + dateInfo);
            insuredLoc.getField('AddressLine1').setValue('700 E 7th St');
            insuredLoc.getField('PostalCode').setValue('78701');
            submission.producerCode = '247381';
            underwriter.getField('gaiUserCode').setValue('0000017713');
            businessDeveloper.getField('gaiUserCode').setValue('0000019486');

            if (doAll) {
                insured.getField('fullName2').setValue('ABC Movers ' + dateInfo);
                insuredLoc.getField('AddressLine2').setValue('Ste 700');
                insuredAlt.getField('fullName').setValue('OffTheRoad Trucking ' + dateInfo);
                insuredAlt.getField('fullName2').setValue('XYZ Movers ' + dateInfo);
                insuredLocAlt.getField('AddressLine1').setValue('100 N 3rd St');
                insuredLocAlt.getField('AddressLine2').setValue('Ste 1');
                insuredLocAlt.getField('PostalCode').setValue('85004');
                bizDeveloper.getField('gaiUserCode').setValue('2000004395');
                delegate.getField('gaiUserCode').setValue('2000003564');
                subRpm.getField('motorCarrierNumberCode').setValue('123456');
                subRpm.getField('DOTNumberCode').setValue('789123');

            }
        }
        else if ($scope.buConfigurableSectionName === "Aviation Information") {
            insured.getField('fullName').setValue('InTheAir Aviation ' + dateInfo);
            insuredLoc.getField('AddressLine1').setValue('49 E. 4th St');
            insuredLoc.getField('PostalCode').setValue('45202');
            submission.producerCode = '126001';
            underwriter.getField('gaiUserCode').setValue('2000004046');

            if (doAll) {
                insured.getField('fullName2').setValue('ABC Charter ' + dateInfo);
                insuredLoc.getField('AddressLine2').setValue('Ste 5');
                insured.getField('taxStatus').setValue('For-Profit');
                insuredAlt.getField('fullName').setValue('OnTheGround Aviation ' + dateInfo);
                insuredAlt.getField('fullName2').setValue('XYZ Charter ' + dateInfo);
                insuredLocAlt.getField('AddressLine1').setValue('262 Wilmer Ave');
                insuredLocAlt.getField('AddressLine2').setValue('Ste 2');
                insuredLocAlt.getField('PostalCode').setValue('45226');
                bizDeveloper.getField('gaiUserCode').setValue('2000004017');
                delegate.getField('gaiUserCode').setValue('2000004390');
            }
        }
        else if ($scope.buDisplayName === "Reference Business Unit") {
            insured.getField('fullName').setValue('RABU First Last ' + dateInfo);
            insuredLoc.getField('AddressLine1').setValue('254 E. 4th St');
            insuredLoc.getField('PostalCode').setValue('45202');
            submission.producerCode = '014236';
            underwriter.getField('gaiUserCode').setValue('2000000563');

            if (doAll) {
                insured.getField('fullName2').setValue('RABU DBA ' + dateInfo);
                insuredLoc.getField('AddressLine2').setValue('Ste 5');
                insured.getField('taxStatus').setValue('For-Profit');
                insuredAlt.getField('fullName').setValue('RABU Alt ' + dateInfo);
                insuredAlt.getField('fullName2').setValue('RABU Alt DBA ' + dateInfo);
                insuredLocAlt.getField('AddressLine1').setValue('3106 16th St');
                insuredLocAlt.getField('AddressLine2').setValue('Ste 16');
                insuredLocAlt.getField('PostalCode').setValue('94103');
                delegate.getField('gaiUserCode').setValue('0000029020');
                subRpm.getField('subAgent').setValue('253579');
            }
        }
        else if ($scope.buDisplayName === "Strategic Comp") {
            insured.getField('fullName').setValue('Strategic Comp ' + dateInfo);
            insuredLoc.getField('AddressLine1').setValue('1 Coca-Cola Plaza');
            insuredLoc.getField('PostalCode').setValue('30313');
            submission.producerCode = '107184';
            underwriter.getField('gaiUserCode').setValue('1000004900');
            subRpm.getField('policyType').setValue('GRNTEECST');
            subRpm.getField('governingClassCode').setValue('ABC1');
            businessDeveloper.getField('gaiUserCode').setValue('0000010055');

            if (doAll) {
                insured.getField('fullName2').setValue('Strategic Comp DBA ' + dateInfo);
                insuredLoc.getField('AddressLine2').setValue('Ste 5');
                insured.getField('taxStatus').setValue('For-Profit');
                insuredAlt.getField('fullName').setValue('Strategic Comp Alt ' + dateInfo);
                insuredAlt.getField('fullName2').setValue('Strategic Comp Alt DBA ' + dateInfo);
                insuredLocAlt.getField('AddressLine1').setValue('1355 Market St');
                insuredLocAlt.getField('AddressLine2').setValue('Ste 488');
                insuredLocAlt.getField('PostalCode').setValue('94103');
                bizDeveloper.getField('gaiUserCode').setValue('2000004436');
                delegate.getField('gaiUserCode').setValue('0000000392');
                subRpm.getField('policyType').setValue('INCLOSSRET');

            }
        }
        else if ($scope.buDisplayName === 'Specialty Human Services') {
            insured.getField('fullName').setValue('SHS Insured Name ' + dateInfo);
            insuredLoc.getField('AddressLine1').setValue('525 Elm St');
            insuredLoc.getField('PostalCode').setValue('45202');
            submission.producerCode = '262456';
            underwriter.getField('gaiUserCode').setValue('0001001902');
            submission.assignedToHid = '2000000343'; // the underwiter list doesn't seem to match up for SHS
            insured.getField('taxonomyCode').setValue('K01');
            $scope.taxonomySearch = {code: 'K01', description: $scope.taxonomyCodes['K01']};
            $scope.policyPremiums.TOTBOUNDPremium = "2000";
            $scope.policyPremiums.TOTQUOPremium = "1000";
            subRpm.getField('policyOrigination').setValue('STNDRD');

            if (doAll) {
                insured.getField('fullName2').setValue('SHS DBA ' + dateInfo);
                insuredLoc.getField('AddressLine2').setValue('Ste 5');
                insuredAlt.getField('fullName').setValue('SHS Alt ' + dateInfo);
                insuredAlt.getField('fullName2').setValue('SHS Alt DBA ' + dateInfo);
                insuredLocAlt.getField('AddressLine1').setValue('1355 Market St');
                insuredLocAlt.getField('AddressLine2').setValue('Ste 488');
                insuredLocAlt.getField('PostalCode').setValue('94103');
                subRpm.getField('subAgent').setValue('253579');
            }
        }
        else if ($scope.buConfigurableSectionName === "Alternative Markets Information") {
            insured.getField('fullName').setValue('Alt Markets ' + dateInfo);
            insuredLoc.getField('AddressLine1').setValue('6042 Cedar');
            insuredLoc.getField('PostalCode').setValue('54101');
            submission.producerCode = '122698';
            underwriter.getField('gaiUserCode').setValue('1000004900');
        }
        else {
            insured.getField('fullName').setValue('First Last ' + dateInfo);
            insuredLoc.getField('AddressLine1').setValue('303 Martin Luther King Jr Blvd');
            insuredLoc.getField('PostalCode').setValue('31401');
            submission.producerCode = '247381';
            underwriter.getField('gaiUserCode').setValue('2000003907');
            subRpm.getField('policyType').setValue('GRNTEECST');

            if (doAll) {
                insured.getField('fullName2').setValue('First Last ' + dateInfo);
                insuredLoc.getField('AddressLine2').setValue('Ste 5');
                insured.getField('taxStatus').setValue('For-Profit');
                insuredAlt.getField('fullName').setValue('First Last Alt ' + dateInfo);
                insuredAlt.getField('fullName2').setValue('First Last Alt DBA ' + dateInfo);
                insuredLocAlt.getField('AddressLine1').setValue('261 Columbus Ave');
                insuredLocAlt.getField('AddressLine2').setValue('Ste 1');
                insuredLocAlt.getField('PostalCode').setValue('94133');
                bizDeveloper.getField('gaiUserCode').setValue('2000004395');
                delegate.getField('gaiUserCode').setValue('0000029020');
            }
        }

        if ($rootScope.currentUser && $rootScope.currentUser.createHid)
            submission.assignedToHid = $rootScope.currentUser.createHid;
        $scope.findCityStateByPostalCode('insuredParty');
        $scope.findProducerInformation(true);
        $scope.updateAssignedTo();

        if (doAll) {
            $scope.hasAlternateMailing.value = true;
            $scope.doAlternateMailingCheck();
            $scope.findCityStateByPostalCode('altMailParty');
            $scope.findProducerInformationSubAgent(true);
            $scope.doAddMoreNamedInsured(null);
        }

        // longer timeout for Autofill All because there's more info we're waiting on
        var timeout = 1500;
        if (doAll)
            timeout = 2000;
        $timeout(function () {
            $scope.toggleProductSelection();
        }, timeout);

    };

    $scope.updatePremiums = function () {
        $scope.doDetermineWholeNumber($scope.submission.agentBoundPremium);
        $scope.policyPremiums.TOTQUOPremium = $scope.submission.agentBoundPremium;
        $scope.policyPremiums.TOTBOUNDPremium = $scope.submission.agentBoundPremium;
    };

    $scope.postCallback = function postCallback() {
        var prevPage = RA.Session.getPreviousPage();
        console.log(prevPage);
        if (prevPage == SEARCH_LOCATION) {
            var prevSearchType = RA.Session.getPreviousSearchType();
            if (prevSearchType == SEARCH_TYPE_DTO) {
                RA.Session.addAdvancedSearch(JSON.stringify($scope.previousSearchDto));
            } else {
                RA.Session.addSearchString($scope.previousSearchString);
            }
        } else if (prevPage == CUSTOMER_EXPERIENCE_LOCATION) {
            var prevCustomerExperience = RA.Session.getPreviousCustomerExperience();
            if (prevCustomerExperience != 'undefined') { // yes, the string undefined
                prevCustomerExperience = JSON.parse(RA.Session.getPreviousCustomerExperience());
                RA.Session.addPreviousCustomerExperience(JSON.stringify($scope.customerSessionObject));
                RA.Session.addCustomerNumber(prevCustomerExperience.customerNumber);
                RA.Session.addSubmissionId(prevCustomerExperience.submissionId);
                RA.Session.addPolicyEffectiveDate(prevCustomerExperience.policyEffectiveDate);
                RA.Session.addPolicyNumber(prevCustomerExperience.policyNumber);
                RA.Session.addPolicyMod(prevCustomerExperience.policyMod);
            }
        } else if (prevPage == ACCOUNT_SUMMARY_LOCATION) {
            var prevAccountSummary = JSON.parse(RA.Session.getPreviousAccountSummary());
            if (prevAccountSummary) {
                RA.Session.addCustomerNumber(prevAccountSummary.customerNumber);
                RA.Session.addSubmissionId(prevAccountSummary.submissionId);
            }
        } else if (prevPage == RENEWALS_LOCATION) {
            RA.Session.addPreviousRenewalDto(RA.Session.getPreviousRenewalDto());
        }

        $scope.applyLayout(RA.Session.getPreviousPage());
    };
    $scope.moreNamedListOfCityList = [];
    $scope.hasAlternateMailing = {value: false};
    $scope.previousSearchString = EMPTY_STRING;
    $scope.previousSearchDto = {};
    $scope.submission = EMPTY_STRING;
    $scope.savedSubmission = EMPTY_STRING;
    $scope.disposition = EMPTY_STRING;
    $scope.viewOnlyMode = false;
    $scope.showCustNoButton = !RA.UI.isCustNo($scope.submission);
    $scope.declinedReviewDate = EMPTY_STRING;
    $scope.lostReviewDate = EMPTY_STRING;
    $scope.withdrawnReviewDate = EMPTY_STRING;
    $scope.moreInfo = false;
    $scope.insuredPartyAddressOverrideInd = false;
    $scope.alternatePartyAddressOverrideInd = false;
    $scope.validationMessageHolder = [];
    $scope.validationMessages = [];
    $scope.infoMessages = [];
    $scope.producerLookUpBuSubInfo = EMPTY_STRING_AS_VALUE;
    $scope.producerLookUpBuSubInfoModal = EMPTY_STRING_AS_VALUE;
    $scope.producerLookUpBusubAgent = EMPTY_STRING_AS_VALUE;

    $scope.moreNamedInsuredPostalLabel = [];
    $scope.moreNamedInsuredStateLabel = [];

    $scope.carrierLookupTypeList = [
        {
            value: "ALL",
            label: "Individual Carriers and Group Names"
        }, {
            value: "GROUP",
            label: "Group"
        }];
    $scope.producerTypeList = [
        {
            value: "NO",
            label: "Appointed",
            id: "appointedProducer"
        }, {
            value: "YES",
            label: "Prospect",
            id: "prospectProducer"
        }];
    $scope.incumbentAgentList = [
        {
            value: "Yes",
            label: "Yes",
            id: "incumbentAgentYes"
        }, {
            value: 'No',
            label: "No",
            id: "incumbentAgentNo"
        }, {
            value: 'NA',
            label: "N/A",
            id: "incumbentAgentNA"
        }];
    $scope.indicatedList = [
        {
            value: "Yes",
            label: "Yes",
            id: "indicatedYes"
        }, {
            value: 'No',
            label: "No",
            id: "indicatedNo"
        }];
    $scope.searchForProdType = [
        {
            value: "producer",
            label: "Producer",
            id: "searchForProducer"
        }, {
            value: "subAgency",
            label: "Sub Agent",
            id: "searchForSubAgency"
        }];
    $scope.foundSearchForProdType = {value: null};
    $scope.warnings = {};
    $scope.systemDate = {};
    $scope.enableMenu = false;
    $scope.disableMyFile = true;
    $scope.disableSubmissionLHN = true;
    $scope.disableWorksheetLHN = true;
    $scope.disableQuoteListLHN = true;
    $scope.disableBillingLHN = true;
    $rootScope.charms = {"charmsList": null};
    $scope.charmsList = [];
    $scope.producerLookup = {
        'fullName': EMPTY_STRING,
        'producerCode': EMPTY_STRING,
        'countryCode': EMPTY_STRING,
        'stateProvinceCode': EMPTY_STRING
    };
    $scope.disablePolicyInfo = false;
    $scope.softDelete = {'moreNamedInsured': 'false'};
    $scope.doAgentBoundPremiumFocus = false;
    $scope.continuousUntilCancelledPolicyDefaultValue = false;
    $scope.continuousUntilCancelledOption = EMPTY_STRING;
    $scope.isContinuousReviewDateEnabled = false;
    $scope.submissionExpirationDateRequirement = 'required';
    $scope.foundProspectProducer = {value: "NO"};
    $scope.foundCRMProspectProducer = {value: "NO"};
    $scope.foundCRMProducerCode = {value: EMPTY_STRING};
    $scope.available = [];
    $scope.availableProducts = {symbols: []};
    $scope.disableRecapture = true;
    $scope.producerRawData = [];
    $scope.teamAssignmentHtml = "";
    $scope.disabledFields = [];
    $scope.isFloatingToolbarHidden = false;
    $scope.taxonomySearch = {};
    $scope.defaultAssignTo = {};
    $scope.taxonomyDescriptionPlaceholder = EMPTY_STRING;
    $scope.updatingTeamAssignments = false;
    var NONE_OPTION_OBJECT = {label: "(none)", value: "(none)"};

    $scope.TAXONOMY_CODE = TAXONOMY_CODE;
    $scope.TAXONOMY_GROUP = TAXONOMY_GROUP;
    $scope.TAXONOMY_KEYWORD = TAXONOMY_KEYWORD;
    $scope.taxonomyModal = {
        code: undefined, group: undefined, keyword: undefined, results: [], filter: TAXONOMY_CODE
    };
    $scope.taxonomyModalView = {
        isOpen: false,
        filterOptions: [
            {
                'value': TAXONOMY_CODE,
                'label': 'Taxonomy Code'
            },
            {
                'value': TAXONOMY_GROUP,
                'label': 'Major Group'
            },
            {
                'value': TAXONOMY_KEYWORD,
                'label': 'Keyword'
            }
        ]
    };

    // Label Initialization
    $scope.altMailInsuredPostalLabel = ZIP_CODE_LABEL;
    $scope.altMailInsuredStateLabel = STATE_LABEL;

    // Carrier lookup
    var carrierLookupJsonObject = {
        'carrierLookupType': "ALL",
        'carrierLookupString': "",
        'otherCarrierName': "",
        'otherCarrierIndicator': false
    };
    $scope.carrierLookup = carrierLookupJsonObject;
    $scope.isSearchForCarrierOpen = false;
    $scope.carrierLookupRows = [];
    $scope.stateLookupDisabled = true;
    $scope.removedList = [];

    // *************************
    // new rpm product selection
    // *************************
    $scope.isProductSelectionOpen = false;

    $scope.options = {};
    $scope.options.productSelectionList = [
        {"value": "SYMBOL", "label": "Symbol", "id": "selectBySymbol"},
        {"value": "PRODUCT", "label": "Product", "id": "selectByProduct"}
    ];
    $scope.options.productSymbolList = [];

    $scope.productsExist = false;

    $scope.currentDate = new Date();
    $scope.rpmScope = {"date": $scope.currentDate.getTime(), "state": "OH"};

    //****************************************************
    // COLUMN INFORMATION FOR THE SEARCH FOR CARRIER TABLE
    // ****************************************************
    $scope.carrierLookupColumnHeadings =
        [{"sTitle": "Individual Carrier", "sWidth": "38%"},
            {"sTitle": "Group", "sWidth": "38%"},
            {"sTitle": "A.M. Best Rating", "sWidth": "24%", "sType": "rating"}
        ];
    $scope.carrierLookupColumnHeadingsDef = [{'aTargets': [3], 'bVisible': false},
        {'aTargets': [4], 'bVisible': false},
        {'aTargets': [5], 'bVisible': false},
        {'aTargets': [6], 'bVisible': false}];

    // producer lookup table column headings
    $scope.producerLookupColumnHeadings =
        [{"sTitle": "", "sWidth": "7%"},
            {"sTitle": "Agency Name"},
            {"sTitle": "DBA"},
            {"sTitle": "Producer Code", "sClass": "alignRight", "sWidth": "10%"},
            {"sTitle": "City / State", "sClass": "wordWrap"},
            {"sTitle": "State, Country", "sClass": "wordWrap"},
            {"sTitle": "ZIP Code"},
            {"sTitle": "Phone #"},
            {"sTitle": "Profit Center", "sClass": "wordWrap"},
            {"sTitle": "Territory", "sClass": "wordWrap"},
            {"sTitle": "Field", "sClass": "wordWrap"},
            {"sTitle": "Producer Status", "sWidth": "10%"},
            {"sTitle": "Agency Name"},
            {"sTitle": "Producer Description"}
        ];

    $scope.producerLookupColumnHeadingsDef = [
        {'bVisible': false, 'aTargets': [2]},
        {'bVisible': false, 'aTargets': [5]},
        {'bVisible': false, 'aTargets': [6]},
        {'bVisible': false, 'aTargets': [7]},
        {'bVisible': false, 'aTargets': [12]},
        {'bVisible': false, 'aTargets': [13]}
    ];

    $scope.$on('modalOpened', function () {
        $scope.isFloatingToolbarHidden = true;
    });

    $scope.$on('modalClosed', function () {
        $scope.isFloatingToolbarHidden = false;
    });

    $scope.hideFloatingToolbar = function () {
        return ($scope.isAgencyLookupOpen ||
            $scope.isAgencyDetailsOpen ||
            $scope.isProductSelectionOpen ||
            $scope.isSearchForCarrierOpen ||
            $scope.taxonomyModalView.isOpen ||
            $scope.isFloatingToolbarHidden
        );
    };

    // ****************
    // modal functions
    // ****************
    $scope.isAgencyLookupOpen = false;
    $scope.isAgencyDetailsOpen = false;

    //initialization
    $scope.producerStatus = null;
    $scope.isProducerSecurityEnabledForUser = true;
    $scope.legalEntityList = [];
    $scope.defaultProductSymbolList = [];
    $scope.selectProductSymbolList = [];
    $scope.profitCenterList = [];
    $scope.territoryList = [];
    $scope.fieldList = [];
    $scope.producerHierarchyList = [];
    $scope.stateProvinceList = [];
    $scope.policyStateProvinceList = [];
    $scope.yearEstablishedList = [];
    $scope.taxStatusCodeList = [];
    $scope.policyOriginationList = [];

    //quote list for product selection
    $scope.quoteList = [];

    $scope.setSessionVars = function (event, page) {
        if (angular.isDefined(event)) {
            event.preventDefault();
        }

        var policyInfo = $scope.submission.policyInfo;
        var sessionVars = RA.Session.buildSelectedPolicyObject(
            RA.UI.doMakeDateMMDDYYYY($scope.submission.policyTermEffectiveDate),
            RA.UI.doMakeDateMMDDYYYY($scope.submission.policyTermExpirationDate),
            $scope.submission.submissionId,
            $scope.submission.customerNumber,
            policyInfo.policyNumber,
            policyInfo.policyMod,
            policyInfo.policySymbol,
            policyInfo.policyVersion);
        RA.Session.addSelectedPolicy(sessionVars);
        RA.Session.addSubmissionIdSearch($scope.submission.submissionId + '');
        sessionStorage['mainDisplayPage'] = page;
    };

    $scope.setSubmissionSessionVars = function () {
        $scope.setSessionVars();
        RA.Session.addCurrentUserHid($scope.currentUser.createHid);
        RA.Session.addSubmissionIdSearch($scope.submission.submissionId + '');
    };

    $scope.convertCarrierData = function (carrierLookupRows) {
        var carrierRowDataArray = [];
        if (carrierLookupRows != null) {
            angular.forEach(carrierLookupRows, function (carrier) {
                var carrierName = '<a>' + carrier.carrierName + '</a>';
                var groupName = EMPTY_STRING;

                if ($scope.carrierLookup.carrierLookupType == CARRIER_LOOKUP_TYPE_ALL) {
                    groupName = carrier.groupName;
                }
                else {
                    groupName = '<a>' + carrier.groupName + '</a>';
                }

                var carrierRow = [carrierName, groupName, carrier.rating, carrier.externalId, carrier.groupId, carrier.carrierName, carrier.groupName];
                carrierRowDataArray.push(carrierRow);
            });
        }
        return carrierRowDataArray;
    };

    $scope.clearLostCarrier = function () {
        $scope.disposition.lostToCarrierName = EMPTY_STRING;
        $scope.disposition.lostToCarrierExternalPartyIdCd = EMPTY_STRING;
        $scope.disposition.businessCategoryRefCode = EMPTY_STRING;
    };

    $scope.polTypeFieldOriginalValues = {  };

    $scope.triggerPolicyTypeChangeWarning = function(key) {
        var original =  $scope.polTypeFieldOriginalValues[key]
        var sub = $scope.getRpmObjects('submission', 'Submission');
        var value  = sub.getField(key).getValue();
        if (original === undefined || !original ) {
            $scope.polTypeFieldOriginalValues[key] = {value:value, last:value};
            return;
        }
        if (original.last === value) return;
        original.last = value;
        if (original.value !== value) {
            if(quoteCount > 1 && $scope.submission.sourceSystemRefCode == SOURCE_SYSTEM_CUBE){
                original.last = original.value;
                sub.getField(key).setValue(original.last);
                RA.UI.doDisplayUIMessages([{context:"",type:MESSAGE_ERROR,text:'Policy Type cannot be changed when multiple quotes exist on a submission.'}],$scope);
            } else{
                if (confirm('Changing Policy Type may result in Policy Type specific fields being removed. Do you wish to continue?')) {
                    $rootScope.policyTypeChanged();
                }
                else {
                    original.last = original.value;
                    sub.getField(key).setValue(original.last);
                }
            }
        }
    };

    function isPolicySet(policyInfo) {
        return (policyInfo !== null
        && ((policyInfo.policyNumber !== null && policyInfo.policyNumber !== EMPTY_STRING) || (policyInfo.policySymbol !== null && policyInfo.policySymbol !== EMPTY_STRING)));
    }

    function isLocked(submission) {
        return (submission.lockedByName !== null && submission.lockedByName !== EMPTY_STRING);
    }

    $scope.removeDisplayForLoadingAssignmentRoles = function() {
        $scope.updatingTeamAssignments = false;
        $scope.underwriterLoading = EMPTY_STRING;
        $scope.renewalUnderwriterLoading = EMPTY_STRING;
        $scope.businessDeveloperLoading = EMPTY_STRING;
        $scope.csrLoading = EMPTY_STRING;
        $scope.accountManagerLoading = EMPTY_STRING;
        if ($scope.producerConfiguration.assignees) {
            $scope.assignToLoading = EMPTY_STRING;
        }
    };

    $scope.setDisplayForLoadingAssignmentRoles = function() {
        $scope.updatingTeamAssignments = true;
        $scope.underwriterLoading = "fieldLoading";
        $scope.renewalUnderwriterLoading = "fieldLoading";
        $scope.businessDeveloperLoading = "fieldLoading";
        $scope.csrLoading = "fieldLoading";
        $scope.accountManagerLoading = "fieldLoading";
        if ($scope.producerConfiguration.assignees) {
            $scope.assignToLoading = "fieldLoading";
        }
    };

    $scope.clearTeamAssignmentsAndLists = function() {
        if ($scope.producerConfiguration.teamAssignment === 'true') {
            $scope.underWriterList = [];
            $scope.renewalUnderWriterList = [];
            $scope.businessDeveloperList = [];
            $scope.csrList = [];
            $scope.accountManagerList = [];

            var underwriterParty = $rootScope.getRpmObjects('submission', 'underwriter');
            var renewalUnderwriterParty = $rootScope.getRpmObjects('submission', 'renewalUnderwriter');
            var busDevParty = $rootScope.getRpmObjects('submission', 'businessDeveloper');
            var csrParty = $rootScope.getRpmObjects('submission', 'csr');
            var accManagerParty = $rootScope.getRpmObjects('submission', 'accountManager');
            if (underwriterParty) underwriterParty.getField('gaiUserCode').setValue(undefined);
            if (renewalUnderwriterParty) renewalUnderwriterParty.getField('gaiUserCode').setValue(undefined);
            if (busDevParty) busDevParty.getField('gaiUserCode').setValue(undefined);
            if (csrParty) csrParty.getField('gaiUserCode').setValue(undefined);
            if (accManagerParty) accManagerParty.getField('gaiUserCode').setValue(undefined);

            if ($scope.producerConfiguration.assignees) {
                $scope.assignToList = [];
                delete $scope.submission.assignedToHid;
            }
        }
    };

    $scope.createCharms = function () {
        // Create the charms for the page.
        var charmsList, policyInfo, policyNumber, charmLabel;

        charmsList = [];
        policyInfo = $scope.submission.policyInfo;

        if (isPolicySet(policyInfo)) {
            policyNumber = (policyInfo.policyNumber === null) ? '' : policyInfo.policyNumber;
            charmLabel = 'Policy #: ' + policyInfo.policySymbol + ' ' + policyNumber + ' ' + policyInfo.policyMod + ' ' + policyInfo.policyVersion;
            charmsList.push({
                'label': charmLabel,
                'static': true
            });
            //set the float info while we're here
            $(document).ready(function () {
                $("#floatInfo").text(charmLabel);
            });
        }

        if (isLocked($scope.submission)) {
            charmLabel = 'Locked By: ' + $scope.submission.lockedByName;
            charmsList.push({
                'label': charmLabel,
                'static': true
            });
        }
        // TODO: Change this method name
        RA.UI.charmsSuck();


        $rootScope.charms.charmsList = charmsList;
    };

    $scope.doCarrierLookup = function () {
        if (window.event) {
            window.event.stopPropagation();
        }

        RA.UI.doClearMessages($scope);

        var dataTable = $('#carrierLookupTable').dataTable();
        dataTable.fnSettings().oLanguage.sEmptyTable = "There are no carriers that match the search criteria entered.  Please alter your search criteria and try your search again.";
        dataTable.fnSort([]);
        dataTable.fnClearTable();

        $rootScope.showPageLoading();
        async.series(
            {
                carrierLookupRows: function (callback) {
                    Search.doCarrierLookup($scope.carrierLookup.carrierLookupString, $scope.carrierLookup.carrierLookupType,
                        function (result) {
                            var data = RA.Service.handleServiceResult(result, $scope);
                            callback(null, data);
                        }
                    );
                }
            },
            function (err, result) {
                var data = result.carrierLookupRows;

                if (data != null) {
                    $scope.carrierLookupRows = $scope.convertCarrierData(data);
                    $timeout(angular.noop);
                }
                $rootScope.hidePageLoading();
            }
        );
    };

    $scope.doChangeCarrierLookupType = function () {
        var dataTable = $('#carrierLookupTable').dataTable();

        dataTable.fnClearTable();

        if ($scope.carrierLookup.carrierLookupType == "GROUP") {
            dataTable.fnSetColumnVis(0, false);
            dataTable.fnSetColumnVis(2, false);
        }
        else {
            dataTable.fnSetColumnVis(0, true);
            dataTable.fnSetColumnVis(2, true);
        }
        dataTable.fnDraw();
    };

    // Temporary - Move Required Field Determination to NCube
    // If ValidationMessage for SubmissionBU Fields is in List, Mark as Required Field
    $scope.doDetermineBUConfigValidation = function () {
        var validationMessageList = $scope.validationMessages;
        var matchFound = false;

        if (validationMessageList != null) {
            for (var index in validationMessageList) {
                if ("submissionBU" === validationMessageList[index].context) {
                    matchFound = true;
                    break;
                }
            }
        }
        return matchFound;
    };

    //Temporary - Move Required Field Determination to NCube
    // If ValidationMessage for Premium Field is in List, Mark as Required Field
    $scope.doDeterminePremiumFieldsRequired = function (premiumFieldName) {

        var validationMessageList = $scope.validationMessages;
        var matchFound = false;

        if (validationMessageList != null) {
            for (var index in validationMessageList) {
                if (premiumFieldName === validationMessageList[index].context) {
                    matchFound = true;
                    break;
                }
            }
        }
        return matchFound;

    };

    //Temporary - Move Required Field Determination to NCube
    // If ValidationMessage for business Developer is in List, Mark as Required Field
    // please don't add another method for required field but use the below generic one

    $scope.doDetermineFieldRequired = function doDetermineFieldRequired(fieldId) {
        var validationMessageList = $scope.validationMessages || [];
        return validationMessageList.some(function hasMatchingMessageContext(message) {
            return fieldId === message.context;
        });
    };


    $scope.doDetermineNotesExist = function (opts) {
        opts = opts || {};

        var determineNotePolicyArray = [];

        var accountRelationArray = $scope.accountRelation || [];

        //grab the account id of the last account relation in the array
        var accountId = accountRelationArray.length > 0 ? accountRelationArray[accountRelationArray.length - 1].accountId : undefined;
        $scope.accountSourceId = accountId;

        //get all of the account relation source id's
        for (var i = 0; i < accountRelationArray.length; i++) {
            var acctRelation = accountRelationArray[i];
            var relationshipCode = acctRelation.relationshipSourceCode;

            if (relationshipCode === 'policy' && acctRelation.sourceId) {
                determineNotePolicyArray.push(acctRelation.sourceId);
            }
            else if (relationshipCode === 'submission') {
                determineNotePolicyArray.push(acctRelation.sourceId);
            }
        }

        $scope.determineNotePolicyArray = determineNotePolicyArray;

        //if there is an account source id, create the function to execute the service call
        //to determine if there are notes available. If no source id, set the function to undefined.
        var myNotesFunction = accountId ?
            function doDetermineNotesExist(callback) {
                Notes.doDetermineNotesExist(accountId, determineNotePolicyArray, function (result) {
                    var data = RA.Service.handleServiceResult(result, $scope);
                    $scope.noteExist = data ? true : false;
                    callback(NO_ERRORS, data);
                }, opts);
            } : undefined;


        //is this service call being queued by a dispatcher, just return the function
        if (opts.queue) {
            return myNotesFunction;
        }

        //else execute the service call here if myNotesFunction is defined
        if (myNotesFunction) {
            async.series(
                [
                    myNotesFunction
                ],
                function (err, results) {
                    $scope.noteExist = results[0] ? results[0] : false;

                    if (opts.callback)
                        opts.callback(NO_ERRORS);
                }
            );
        }
        else {
            //if no account id or account relations just set the notes exist flag to false
            $scope.noteExist = false;

            if (opts.callback)
                opts.callback(NO_ERRORS);
        }
    };

    $scope.doDetermineWholeNumber = function (fieldNameValue) {
        fieldNameValue = accounting.unformat(fieldNameValue == null ? null : fieldNameValue);
    };

    /**
     * Need this method prior to loading default data
     */
    $scope.doRemoveAllSessionVariables = function () {
        RA.Session.removeCustomerNumber();
        RA.Session.removeSubmissionId();
    };

    /**
     * Need this method prior to loading default data
     */
    $scope.doSetSessionParameters = function () {
        RA.Session.addCustomerNumber($scope.submission.customerNumber);
        RA.Session.addSubmissionId($scope.submission.submissionId);
        RA.Session.addPolicyEffectiveDate($scope.submission.submissionEffectiveDate);
        RA.Session.addPolicyNumber($scope.submission.policyInfo.policyNumber);
        RA.Session.addPolicyMod($scope.submission.policyInfo.policyMod);
        RA.Session.addQuoteId($scope.submission.quoteId);
        // Set Selected Quote Id in Session - use QuoteId if Selected Quote Id is not in Session.
        var selectedQuoteId = RA.Session.getSelectedQuoteId() ? RA.Session.getSelectedQuoteId() : RA.Session.getQuoteId();
        RA.Session.addSelectedQuoteId(selectedQuoteId);

        // Set Last Screen Accessed into Session
        RA.Session.addLastScreenAccessed(SESSION_SUBMISSION_SCREEN);
    };

    /**
     * Need this method prior to loading default data
     */
    $scope.doResetDispositionReviewDates = function () {
        if (!$scope.disposition)
            $scope.disposition = {};
        $scope.declinedReviewDate = EMPTY_STRING;
        $scope.lostReviewDate = EMPTY_STRING;
        $scope.withdrawnReviewDate = EMPTY_STRING;
        $scope.disposition.declinedRecaptureIndicator = FALSE;
        $scope.disposition.lostRecaptureIndicator = FALSE;
        $scope.disposition.withdrawnRecaptureIndicator = FALSE;
        $scope.disableRecapture = true;
    };

    $scope.doValidateDatesOnSave = function () {
        // this was added because the date picker doesn't capture illegal dates entered, and if we attempt
        // to make an ajax call with dates in an illegal format, you get a "Client error".
        var sub = $scope.submission;
        var disposition = $scope.disposition;
        var messages = EMPTY_STRING;

        if (sub != null) {
            // validate all the dates entered
            messages = RA.UI.isDateValid(sub.submissionEffectiveDate, "Effective Date");
            messages += RA.UI.isDateValid(sub.submissionExpirationDate, "Expiration Date");
            messages += RA.UI.isDateValid(sub.receivedDate, "Received Date");
            messages += RA.UI.isDateValid(sub.needByDate, "Need by Date");
            if (sub.continuousUntilCancelledIndicator) {
                messages += RA.UI.isDateValid(sub.continuousUntilCancelledReviewDate, "Review Date");
            }
        }
        if (disposition != null) {
            messages += RA.UI.isDateValid(disposition.recaptureReviewDate, "Recapture Review Date");
        }

        if (messages != EMPTY_STRING) {
            alert(messages);
            return false;
        } else {
            return true;
        }
    };

    $scope.onCarrierLookupOpen = function () {
        $scope.isSearchForCarrierOpen = true;
        RA.UI.doClearMessages($scope);
        // Reset everything on opening the modal.
        $scope.resetCarrierLookupValues();
        $scope.saveSearchForCarrierSnapshot();
    };

    $scope.onSelectCarrierName = function () {
        $scope.disposition.lostToCarrierName = $scope.carrierLookup.otherCarrierName;
        var lostCarrier = $rootScope.getRpmObjects('submission', 'lostToCarrier');
        lostCarrier.getField('fullName').setValue($scope.carrierLookup.otherCarrierName);
        lostCarrier.getField('externalPartyCode').setValue('');
        lostCarrier.getField('roleRefCode').setValue(CARRIER_TYPE_INDIVIDUAL);

        $scope.isSearchForCarrierOpen = false;
        $rootScope.scrollTransactionStatus();
    };

    $scope.onCarrierLookupCancel = function () {
        $scope.isSearchForCarrierOpen = false;
    };

    $scope.onCarrierLookupCancelButton = function onCarrierLookupCancelButton() {
        $scope.cancelFunction(SEARCH_FOR_CARRIER_SNAPSHOT_KEY, $scope.carrierLookup, null, $scope.onCarrierLookupCancel)
    };

    $scope.saveSearchForCarrierSnapshot = function saveSearchForCarrierSnapShot() {
        snapshots[SEARCH_FOR_CARRIER_SNAPSHOT_KEY] = $scope.findSearchForCarrierSnapshot();
    };

    $scope.findSearchForCarrierSnapshot = function findSearchForCarrierSnapshot() {
        return RA.UI.takeSnapshot($scope.carrierLookup);
    };

    $scope.resetCarrierLookupValues = function () {
        $scope.carrierLookup.carrierLookupString = EMPTY_STRING;
        $scope.carrierLookup.carrierLookupType = CARRIER_LOOKUP_TYPE_ALL;
        $scope.carrierLookup.otherCarrierName = EMPTY_STRING;
        $scope.carrierLookup.otherCarrierIndicator = false;

        var dataTable = $('#carrierLookupTable').dataTable();
        dataTable.fnSettings().oLanguage.sEmptyTable = "No data available in the table";
        dataTable.fnClearTable();
        dataTable.fnSetColumnVis(0, true);
        dataTable.fnSetColumnVis(2, true);
    };

    $scope.setSelectedCarrierDetails = function (carrierName, externalId) {
        $scope.disposition.lostToCarrierName = carrierName;

        var lostCarrier = $rootScope.getRpmObjects('submission', 'lostToCarrier');
        lostCarrier.getField('fullName').setValue(carrierName);
        lostCarrier.getField('externalPartyCode').setValue(externalId);
        lostCarrier.getField('roleRefCode').setValue(CARRIER_TYPE_INDIVIDUAL);

        $scope.isSearchForCarrierOpen = false;
        $timeout(angular.noop);
    };

    $scope.setSelectedGroupDetails = function (groupName, externalId) {
        $scope.disposition.lostToCarrierName = groupName;

        var lostCarrier = $rootScope.getRpmObjects('submission', 'lostToCarrier');
        lostCarrier.getField('fullName').setValue(groupName);
        lostCarrier.getField('externalPartyCode').setValue(externalId);
        lostCarrier.getField('roleRefCode').setValue(CARRIER_TYPE_GROUP);

        $scope.isSearchForCarrierOpen = false;
        $timeout(angular.noop);
    };

    $scope.toggleOtherCarrierCheckbox = function () {
        if ($scope.carrierLookup.otherCarrierIndicator == true) {
            $scope.carrierLookup.otherCarrierName = "Other";
        }
        else {
            $scope.carrierLookup.otherCarrierName = EMPTY_STRING;
        }
    };

    $scope.toggleTimeoutModal = function () {
        $scope.isTimeoutOpen = !$scope.isTimeoutOpen;
    };

    // TODO - AGAIN....THE THREE METHODS BELOW ARE DOING THE SAME BASIC THING
    /**
     * Called from both view and within controller
     */
    $scope.updateStateProvList = function (opts, flag) {
        opts = opts || {};

        var primary = $rootScope.getRpmObjects('submission', 'primaryInsured');
        var insuredLocation = primary.getValue('places')[0];

        var insuredCountryCode = insuredLocation.getValue('CountryISOCode');
        if (insuredCountryCode) {
            async.series(
                [
                    function (callback) {
                        Presentation.findStateProvinceList(insuredCountryCode, function (result) {
                            var data = RA.Service.handleServiceResult(result, $scope);
                            callback(NO_ERRORS, data);
                        });
                    }
                ],
                function (err, results) {
                    var stateProvList = results[0];
                    var policyInfo = $scope.submission.policyInfo;

                    if (policyInfo)
                        policyInfo.policyCountryCode = insuredCountryCode;

                    var isUS = insuredCountryCode === UNITED_STATES;
                    $scope.insuredPostalLabel = isUS ? ZIP_CODE_LABEL : POSTAL_CODE_LABEL;
                    $scope.insuredStateLabel = isUS ? STATE_LABEL : PROVINCE_LABEL;
                    $rootScope.$broadcast('primaryZipChanged');
                    if (flag) {
                        insuredLocation.getField('City').setValue(undefined);
                        insuredLocation.getField('PostalCode').setValue(undefined);
                        insuredLocation.getField('StateOrProvinceAbbreviation').setValue(undefined);
                        $scope.insuredPartyCityList = null;
                    }

                    if (opts.callback)
                        opts.callback(NO_ERRORS, stateProvList);
                    else
                        $timeout(function () {
                            $rootScope.$broadcast('primaryZipChanged');
                            $scope.stateProvinceList = RA.UI.doConvertToLabelValue(stateProvList, 'itemDescriptionShort', 'itemCode');
                        });
                }
            );
        }
        else {
            if (opts.callback)
                opts.callback(NO_ERRORS);
        }
    };

    /**
     * Called both from view and from withing controller
     * Needed before loading default data
     */
    $scope.updateAltMailingProvinceList = function (opts, flag) {
        opts = opts || {};

        $scope.altMailingProvinceList = [];

        var altMail = $rootScope.getRpmObjects('submission', 'alternateMailing');
        var location = altMail.getValue('places')[0];
        var countryCode = location.getValue('CountryISOCode');
        if (countryCode) {
            async.series(
                [
                    function (callback) {
                        Presentation.findStateProvinceList(countryCode, function (result) {
                            var data = RA.Service.handleServiceResult(result, $scope);
                            callback(NO_ERRORS, data);
                        });
                    }
                ],
                function (err, results) {
                    var data = results[0];
                    var states = data || [];

                    var isUS = countryCode === UNITED_STATES;
                    $scope.altMailInsuredPostalLabel = isUS ? ZIP_CODE_LABEL : POSTAL_CODE_LABEL;
                    $scope.altMailInsuredStateLabel = isUS ? STATE_LABEL : PROVINCE_LABEL;

                    if (flag) {
                        location.getField('City').setValue(undefined);
                        location.getField('PostalCode').setValue(undefined);
                        location.getField('StateOrProvinceAbbreviation').setValue(undefined);
                        $scope.altMailPartyCityList = undefined;
                    }

                    $timeout(function () {
                        $rootScope.$broadcast('altMailZipChanged');
                        $scope.altMailingProvinceList = RA.UI.doConvertUdRefItemsToValueLabelPairs(data);
                    });

                    if (opts.callback)
                        opts.callback(NO_ERRORS, states);
                }
            );
        }
        else {
            if (opts.callback)
                opts.callback(NO_ERRORS);
        }
    };

    /**
     * Called from both view and within controller
     * Needed before loading default data
     */
    $scope.updateProspectProducerStateProvinceList = function (opts, flag) {
        opts = opts || {};

        $scope.prospectProducerStateProvinceList = [];
        var prospect = $rootScope.getRpmObjects('submission', 'prospectProducer');
        var location = prospect.getValue('places')[0];
        var countryCode = location.getValue('CountryISOCode') || 'US';
        if (countryCode) {
            async.series(
                [
                    function (callback) {
                        Presentation.findStateProvinceList(countryCode, function (result) {
                            var data = RA.Service.handleServiceResult(result, $scope);
                            callback(NO_ERRORS, data);
                        });
                    }
                ],
                function (err, results) {
                    var data = results[0];

                    var isUS = countryCode === UNITED_STATES;
                    $scope.prospectProducerPostalLabel = isUS ? ZIP_CODE_LABEL : POSTAL_CODE_LABEL;
                    $scope.prospectProducerStateLabel = isUS ? STATE_LABEL : PROVINCE_LABEL;

                    if (flag) {
                        location.getField('City').setValue(undefined);
                        location.getField('PostalCode').setValue(undefined);
                        location.getField('StateOrProvinceAbbreviation').setValue(undefined);
                        $scope.prospectProducerCityList = undefined;
                    }

                    $timeout(function () {
                        $rootScope.$broadcast('prospectProducerZipChanged');
                        $scope.prospectProducerStateProvinceList = RA.UI.doConvertUdRefItemsToValueLabelPairs(data);
                    });

                    if (opts.callback)
                        opts.callback(NO_ERRORS, data);

                }
            );
        }

    };

    /**
     * Called from both view and within controller
     * Needed before loading default data
     */
    $scope.updateMoreNamedStateProvinceList = function (opts, flag, moreNamed, moreNamedListId, mniIndex) {
        opts = opts || {};

        var location = moreNamed.getValue('places')[0];
        var countryCode = location.getValue('CountryISOCode') || 'US';
        if (countryCode) {
            async.series(
                [
                    function (callback) {
                        Presentation.findStateProvinceList(countryCode, function (result) {
                            var data = RA.Service.handleServiceResult(result, $scope);
                            callback(NO_ERRORS, data);
                        });
                    }
                ],
                function (err, results) {
                    var data = results[0];

                    var isUS = countryCode === UNITED_STATES;
                    $scope.moreNamedInsuredStateLabel[moreNamedListId] = isUS ? STATE_LABEL : PROVINCE_LABEL;
                    $scope.moreNamedInsuredPostalLabel[moreNamedListId] = isUS ? ZIP_CODE_LABEL : POSTAL_CODE_LABEL;

                    var listenZip = "moreNamedZipChanged";
                    var listenName = listenZip.concat("-", mniIndex);
                    $rootScope.$broadcast(listenName);

                    if (flag) {
                        location.getField('City').setValue(undefined);
                        location.getField('PostalCode').setValue(undefined);
                        location.getField('StateOrProvinceAbbreviation').setValue(undefined);
                        $scope.removeFromMoreNamedListOfCityList(moreNamedListId);

                    }

                    $timeout(function () {
                        $scope.moreNamedStateProvinceList[moreNamedListId] = RA.UI.doConvertUdRefItemsToValueLabelPairs(data);
                        $rootScope.$broadcast(listenName);
                    });

                    if (opts.callback)
                        opts.callback(NO_ERRORS, data);

                }
            );
        }
        else {
            if (opts.callback)
                opts.callback(NO_ERRORS);
        }
    };

    /**
     * Called from view and within controller
     * Need before loading default data
     */
    $scope.updatePolicyStateProvList = function (opts) {
        opts = opts || {};

        if ($scope.submission != null && $scope.submission.policyInfo != null) {
            async.series(
                {
                    states: function (callback) {
                        Presentation.findStateProvinceList($scope.submission.policyInfo.policyCountryCode, function (result) {
                            var data = RA.Service.handleServiceResult(result, $scope);
                            callback(null, data);
                        });
                    }
                }, function (err, result) {
                    var states = result.states;

                    if ($scope.submission.policyInfo.policyCountryCode == UNITED_STATES)
                        $("#policyStateProvinceLabel").text(POLICY_STATE_LABEL);
                    else
                        $("#policyStateProvinceLabel").text(POLICY_PROVINCE_LABEL);

                    if (opts.callback)
                        opts.callback(NO_ERRORS, states);
                    else
                        $timeout(function () {
                            $scope.policyStateProvinceList = states;
                        });
                }
            );
        }
        else {
            if (opts.callback)
                opts.callback(NO_ERRORS);
        }
    };

    $scope.updatePolicyStateProvListWhenUS = function (opts) {
        opts = opts || {};
        async.series(
            {
                states: function (callback) {
                    Presentation.findStateProvinceList(UNITED_STATES, function (result) {
                        var data = RA.Service.handleServiceResult(result, $scope);
                        callback(null, data);
                    });
                }
            }, function (err, result) {
                var states = result.states;
                if (opts.callback)
                    opts.callback(NO_ERRORS, states);
            }
        );
    };
    $scope.findProducerDetails = function (checkLength, opts) {
        opts = opts || {};
        var producerType = $scope.foundProspectProducer.value === YES ? PRODUCER_PROSPECT : PRODUCER_APPOINTED;
        if ($scope.submission != null && $scope.submission.submissionId > 0) {
            async.series(
                [
                    function (callback) {
                        Search.findProducersDetails($scope.producerPartyFullName, $scope.submission.producerCode, $scope.submission.submissionId, producerType, function (result) {
                            var data = RA.Service.handleServiceResult(result, $scope);
                            callback(NO_ERRORS, data);
                        });
                    }
                ],
                function (err, results) {
                    var data = results[0];

                    if (data) {
                        $scope.producerBusinessUnit = data.businessUnit;
                    }
                    if (opts.callback)
                        opts.callback(NO_ERRORS, data);
                }
            );
        }
        else {
            if (opts.callback)
                opts.callback(NO_ERRORS);
        }
    };


    if (window.dT_) {
        // we need to increment the onload markers
        // for dynaTrace since the ng-include of aggregateSnippet
        // will trigger the isPageLoading change prematurely
        dynaTrace.incrementOnLoadEndMarkers();
    }

    $scope.validateIfRenewal = function validateIfRenewal(submission){
        var policyMod, policyNumber;
        if('REN' === submission.transactionTypeRefCode)
            {
                if('RW' !== submission.transactionSubTypeRefCode)
                {
                    policyMod = submission.policyInfo.policyMod;
                policyNumber = submission.policyInfo.policyNumber;
                Submission.validateIfPolicyIsCancelled(policyNumber, policyMod, function (result) {
                         RA.Service.handleServiceResult(result, $scope);
                    });
            }
        }
    };

    // **************************************************
    // load up the drop down boxes and submission
    // **************************************************
    async.auto(
        {
            systemDate: function (callback) {
                Submission.doGetSystemDate(function (result) {
                    var data = RA.Service.handleServiceResult(result, $scope);
                    callback(NO_ERRORS, data);

                });
            },
            reopenAccess: function (callback)
            {
                Presentation.hasPermission({'resource':'submission', 'action':'reopen'}, function (result)
                {
                    var data = RA.Service.handleServiceResult(result, $scope);
                    callback(null, data);
                })
            },
            isProducerSecurityEnabledForUser: function (callback) {
                Presentation.isProducerSecurityEnabledForUser(function (result) {
                    var data = RA.Service.handleServiceResult(result, $scope);
                    callback(NO_ERRORS, data);
                });
            },
            loadSubmission: function (callback) {
                RA.UI.consoleTime('LoadSubmission Component');
                var SEARCH_MODE = 'search';
                var COPY_MODE = 'copy';
                var loadMode;

                var submissionIdToLoad = RA.Session.getSubmissionIdSearch() || RA.Session.getSubmissionId();
                $scope.previousSearchString = RA.Session.getPreviousSearchField();
                $scope.previousSearchDto = JSON.parse(RA.Session.getPreviousSearchDto());

                if (submissionIdToLoad) {
                    loadMode = SEARCH_MODE;
                    $scope.previousSearchString = submissionIdToLoad;
                    RA.Session.removeSubmissionIdSearch()
                }
                else {
                    submissionIdToLoad = RA.Session.getSubmissionIdCopy();

                    if (submissionIdToLoad) {
                        loadMode = COPY_MODE;
                        RA.Session.removeSubmissionIdCopy();
                    }
                }

                if (submissionIdToLoad)
                    RA.Session.addSubmissionId(submissionIdToLoad);

                var submissionLoadFunction;

                switch (loadMode) {
                    case SEARCH_MODE:
                        submissionLoadFunction = function submissionLoadFunction(callback) {
                            RA.UI.consoleTime('findSubmissionAndQuoteWithReducedSession');
                            Submission.findSubmissionAndQuoteWithReducedSession(submissionIdToLoad, 0, true, true, SUBM_INFO, function (result) {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                quoteCount = result.data['SubmissionController.findSubmissionAndQuote'].data.quoteCount;
                                RA.UI.consoleTimeEnd('findSubmissionAndQuoteWithReducedSession');
                                if ($scope.errorMessages) {
                                    callback("Errors during findSubmissionAndQuoteWithReducedSession")
                                } else {
                                    callback(NO_ERRORS, data);
                                }

                            });
                        };
                        break;

                    case COPY_MODE:
                        submissionLoadFunction = function submissionLoadFunction(callback) {
                            Submission.doCopySubmission(submissionIdToLoad, function (result) {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(NO_ERRORS, data);
                            });
                        };
                        break;

                    default:
                        submissionLoadFunction = function submissionLoadFunction(callback) {
                            Submission.findDefaultSubmission(function (result) {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(NO_ERRORS, data);
                            });
                        };
                }

                async.series(
                    [
                        submissionLoadFunction
                    ],
                    function (err, results) {
                        if (err) {
                            callback(err);
                            return;
                        }

                        var submission = results[0];


                        if (submission) {
                            $scope.defaultAssignTo = submission.defaultAssignTo;
                            if ($scope.defaultAssignTo) $scope.doDefaultAssignTo();

                            $scope.disabledFields = submission.disabledFields;

                            if (submission.quote) {
                                $scope.quote = submission.quote;
                                $rootScope.rpmSessionMap['quote'] = $scope.quote.rpmSession;
                                submission = submission.submission;
                                $scope.quote.rpmSession.namedObjects.quoteNum = 1;
                                $scope.quoteList = [$scope.quote.rpmSession];
                            }
                            $rootScope.rpmSessionMap['submission'] = submission.rpmSession;
                            $rootScope.$broadcast('sessionChanged');

                            initStatus = submission.transactionStatusRefCode;
                            $scope.rpmSession = submission.rpmSession;
                            var continuousOption;
                            if ($scope.quoteList.length > 0)
                                continuousOption = RA.Controller.doExtractContinuousTilCancelledOption($scope.quoteList[0]);
                            continuousOption ? $scope.continuousUntilCancelledOption = continuousOption : $scope.continuousUntilCancelledOption = CONTINUOUS_NOT_ELIGIBLE;

                            var prospectParty = $rootScope.getRpmObjects('submission', 'prospectProducer');
                            if (prospectParty && prospectParty.getValue('fullName')) {
                                $scope.foundProspectProducer.value = YES
                            }

                            var altMail = $rootScope.getRpmObjects('submission', 'alternateMailing');
                            if (altMail && altMail.getValue('fullName')) {
                                $scope.hasAlternateMailing.value = true;
                            }
                        }
                        $scope.validateIfRenewal(submission);

                        var exec = false;
                        switch (loadMode) {
                            case SEARCH_MODE:
                                if (submission == null || submission.submissionId == null || submission.submissionId == "0") {
                                    // you are doing a search and it wasn't found. quit this path and refresh the page as if
                                    // you selected "Create new submission" .. otherwise the submission object isn't set properly
                                    $scope.applyLayout(SUBMISSION_LOCATION);
                                    return;
                                }

                                RA.UI.consoleTime('doHandleSearchedSubmission');
                                doHandleSearchedSubmission(submission);
                                RA.UI.consoleTimeEnd('doHandleSearchedSubmission');
                                finalize();
                                break;

                            case COPY_MODE:
                                $scope.doHandleCopiedSubmission(submission);
                                finalize();
                                break;

                            default:
                                exec = true;
                                doHandleDefaultSubmission(submission);
                        }
                        $scope.disableUnemploymentId();

                        if (exec)
                            finalize();

                        function finalize() {
                            doSetupContinuousUntilCancelled($scope.continuousUntilCancelledOption);
                            $scope.createCharms();
                            $timeout(function () {
                                $rootScope.$broadcast('submissionLoaded');
                                console.timeEnd('LoadSubmission Component');
                            });
                            callback(NO_ERRORS);
                        }
                    }
                )
            },
            dropdowns: [function (callback) {
                RA.UI.consoleTime('Dropdowns async with LoadSubmission');
                var dispatcher = new RA.Service.Dispatcher('submission_dropdowns');
                dispatcher.dispatch(
                    {
                        legalEntities:
                            RA.Service.dispatcherFunctionNoArgs(Presentation.findLegalEntityList, dispatcher, $scope),
                        countries:
                            RA.Service.dispatcherFunctionNoArgs(Presentation.findCountryList, dispatcher, $scope),
                        productTiers:
                            RA.Service.dispatcherFunctionNoArgs(Presentation.findRetailWholesaleList, dispatcher, $scope),
                        producerHierarchy:
                            RA.Service.dispatcherFunctionNoArgs(Search.findProducerHierarchy, dispatcher, $scope),
                        assignees:
                            RA.Service.dispatcherFunctionNoArgs(Presentation.findAssignToList, dispatcher, $scope),
                        delegate:
                            RA.Service.dispatcherFunctionNoArgs(Presentation.findDelegateList, dispatcher, $scope),
                        lossPrevention:
                            RA.Service.dispatcherFunctionNoArgs(Presentation.findLossPreventionList, dispatcher, $scope),
                        myFileName:
                            RA.Service.dispatcherFunctionNoArgs(Presentation.findMyFileName, dispatcher, $scope),
                        findBusinessUnitDisplayName:
                            RA.Service.dispatcherFunctionNoArgs(Presentation.findBusinessUnitDisplayName, dispatcher, $scope),
                        findBusinessUnitConfigHeader:
                            RA.Service.dispatcherFunctionNoArgs(Presentation.findBusinessUnitConfigHeader, dispatcher, $scope),
                        findProductSortOrder:
                            RA.Service.dispatcherFunctionNoArgs(Presentation.findProductSortOrder, dispatcher, $scope),
                        findYearEstablishedList:
                            RA.Service.dispatcherFunctionNoArgs(Presentation.findYearEstablishedList, dispatcher, $scope),
                        findTaxStatusCodeList:
                            RA.Service.dispatcherFunctionNoArgs(Presentation.findTaxStatusCodeList, dispatcher, $scope),
                        policyType:
                            RA.Service.dispatcherFunctionNoArgs(Presentation.findPolicyType, dispatcher, $scope),
                        findPolicyOriginationList:
                            RA.Service.dispatcherFunctionNoArgs(Presentation.findPolicyOriginationList, dispatcher, $scope),
                        regionList:
                            RA.Service.dispatcherFunctionNoArgs(Presentation.findRegionList, dispatcher, $scope),
                        governingClassCodeRequired:
                            RA.Service.dispatcherFunctionNoArgs(Presentation.findGoverningClassCodeRequired, dispatcher, $scope),
                        billingTypes:
                            RA.Service.dispatcherFunctionNoArgs(Presentation.findBillingTypeList, dispatcher, $scope),
                        taxonomy:
                            RA.Service.dispatcherFunctionNoArgs(Presentation.findTaxonomyCodes, dispatcher, $scope),
                        findBusinessUnitListForProducerLookUp:
                            RA.Service.dispatcherFunctionNoArgs(Presentation.findBusinessUnitListForProducerLookUp, dispatcher, $scope)
                    },
                    function (err, results) {
                        callback(NO_ERRORS, results);
                        RA.UI.consoleTimeEnd('Dropdowns async with LoadSubmission');
                    }
                );
            }
            ],
            dependentDropdowns: ['loadSubmission', function (callback) {
                RA.UI.consoleTime('dropdowns dependent on Load Submission');
                async.auto(
                    {
                        statuses: function (callback) {
                            // After loadSubmission completed
                            Presentation.findTransactionStatusList($scope.submission.transactionStatusRefCode, $scope.submission.sourceSystemRefCode, $scope.submission.transactionTypeRefCode, function (result) {
                                    var data = RA.Service.handleServiceResult(result, $scope);
                                    callback(null, data);
                                }
                            );
                        },
                        producerConfiguration: function (callback) {
                            $scope.findProducerConfiguration({'callback': callback});
                            $scope.removeDisplayForLoadingAssignmentRoles();
                        },
                        teamAssignmentList: ['producerConfiguration', function (callback) {
                            $scope.determineTeamAssignmentLists({'callback': callback}, true, false);
                        }],
                        insuredPartyCityList: function (callback) {
                            $scope.findCityStateByPostalCode(PARTY_TYPE_INSURED, {'callback': callback});
                        },
                        altMailPartyCityList: function (callback) {
                            $scope.findCityStateByPostalCode(PARTY_TYPE_ALT_MAIL, {'callback': callback});
                        },
                        prospectProducerPartyCityList: function (callback) {
                            $scope.findCityStateByPostalCode(PARTY_TYPE_PROSPECT_PRODUCER, {'callback': callback});
                        },
                        producerDetails: function (callback) {
                            $scope.findProducerDetails(false, {'callback': callback});
                        },
                        producerInfo: ['producerDetails', 'prospectProducerPartyCityList', function (callback) {
                            $scope.findProducerInformation(false, {'callback': callback});
                            $scope.findProducerInformationSubAgent(false, {'callback': callback});
                        }],
                        producerContacts: ['teamAssignmentList', 'producerInfo', function (callback) {
                            $scope.setProducerContactParties({'callback': callback});
                        }],
                        altMailStateProvList: function (callback) {
                            $scope.updateAltMailingProvinceList({'callback': callback});
                        },
                        insuredStateProvList: function (callback) {
                            $scope.updateStateProvList({'callback': callback});
                        },
                        unemploymentStateList: function(callback){
                            $scope.updatePolicyStateProvListWhenUS({'callback':callback})
                        },
                        prospectProducerStateProvList: function (callback) {
                            $scope.updateProspectProducerStateProvinceList({'callback': callback});
                        },
                        findAccountPolicyInfo: function (callback) {
                            $scope.findAccountPolicyInfo(callback);
                        },
                        underwriterParty: ['teamAssignmentList', function (callback) {
                            $scope.findTeamAssignmentParty({'callback': callback}, 'underwriter', $scope.underWriterList);
                        }],
                        renewalUnderwriterParty: ['underwriterParty', function (callback) {
                            $scope.findTeamAssignmentParty({'callback': callback}, 'renewalUnderwriter', $scope.renewalUnderWriterList);
                        }],
                        businessDeveloperParty: ['renewalUnderwriterParty', function (callback) {
                            $scope.findTeamAssignmentParty({'callback': callback}, 'businessDeveloper', $scope.businessDeveloperList);
                        }],
                        csrParty: ['businessDeveloperParty', function (callback) {
                            $scope.findTeamAssignmentParty({'callback': callback}, 'csr', $scope.csrList);
                        }],
                        accountManagerParty: ['csrParty', function (callback) {
                            $scope.findTeamAssignmentParty({'callback': callback}, 'accountManager', $scope.accountManagerList);
                        }],
                        determineNotesExist: ['findAccountPolicyInfo', function (callback) {
                            $scope.doDetermineNotesExist({'callback': callback});
                        }
                        ],
                        hiddenFields: [function (callback) {
                            var objClasses = ['com.gaic.bue.uwd.ra.common.dto.submission.SubmissionDto'];
                            var symbol = $scope.submission.policyInfo.policySymbol;
                            Submission.getHiddenFields(objClasses, symbol, $scope.submission.submissionId, function (result) {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            });
                        }
                        ]
                    },
                    function (err, results) {
                        callback(NO_ERRORS, results);
                        RA.UI.consoleTimeEnd('dropdowns dependent on Load Submission');
                    }
                );
            }
            ]
        },
        function (err, results) {
            $scope.reopenAccess = results.reopenAccess;
            if (err) {
                $scope.viewOnlyMode = true;
                $scope.pageLoaded = YES;
                $rootScope.hidePageLoading();
                return;
            }
            var assigneesLength;
            //Determine whether BUSpecific Fields Exist
            if (typeof $rootScope.getRpmObjects('submission', 'BUSpecificFields') != 'undefined') {
                if (Object.keys($rootScope.getRpmObjects('submission', 'BUSpecificFields').fields).length > 0) {
                    $scope.buSpecificFields = true;
                }
            }

            var submObject, processingEnum, referalType;
            var dropdowns = results.dropdowns;
            var dependentDropdowns = results.dependentDropdowns;
            $scope.systemDate = results.systemDate;
            $scope.isProducerSecurityEnabledForUser = results.isProducerSecurityEnabledForUser.flag;

            //legal entities
            $scope.legalEntityList = RA.UI.doConvertToLabelValue(dropdowns.legalEntities, 'itemDescriptionShort', 'itemCode');

            //countries
            $scope.countryList = dropdowns.countries;
            var pairs = RA.UI.doConvertUdRefItemsToValueLabelPairs($scope.countryList);
            $scope.insuredCountryList = pairs;
            $scope.altMailCountryList = pairs;
            $scope.prospectCountryList = pairs;

            $scope.productSelectionButtons = $scope.doDetermineProductSelectionButtons();
            $scope.doDetermineProductsExist();

            $scope.retailWholesaleList = RA.UI.doConvertUdRefItemsToValueLabelPairs(dropdowns.productTiers);
            //Add None to the retailWholesaleList array.
            $scope.retailWholesaleList.splice(0, 0, {label: "None", value: "none", id: "None"});
            // Format Transaction List in proper UI Format
            $scope.transactionStatusList = [];
            // Format Transaction Status List for UI
            $scope.transactionStatusList = $scope.doFormatTransactionStatusList(dependentDropdowns.statuses);
            $scope.billingTypeList = RA.UI.doConvertUdRefItemsToValueLabelPairs(dropdowns.billingTypes);
            $scope.findBillingTypeDefaults();

            var tax = dropdowns.taxonomy;
            var groups = [];
            $scope.taxonomyCodes = tax.codes;
            $scope.taxonomyDescriptions = tax.descriptions;
            $scope.taxonomyGroupsAll = tax.groups;

            for (var key in tax.groups) {
                if (key.indexOf('@') < 0) {
                    groups.push(key);
                }
            }
            groups.sort();
            $scope.taxonomyGroupsList = groups;

            var primary = $rootScope.getRpmObjects('submission', 'primaryInsured');
            var taxCode = primary.getValue('taxonomyCode');
            if (taxCode) {
                $scope.taxonomySearch = {code: taxCode, description: $scope.taxonomyCodes[taxCode]};
            }

            assigneesLength = dropdowns.assignees.length;
            for (var i = 0; i < assigneesLength; i++) {
                var assignee = dropdowns.assignees[i];
                assignee.nameForDisplay = assignee.lastName + ', ' + assignee.firstName;
            }

            $scope.assignToList = dropdowns.assignees;
            var producerHierarchy = dropdowns.producerHierarchy;
            $scope.delegateList = RA.UI.doConvertToLabelValue(dropdowns.delegate, function (obj) {
                return obj.lastName + ', ' + obj.firstName
            }, 'hid');
            $scope.lossPreventionList = RA.UI.doConvertToLabelValue(dropdowns.lossPrevention, function (obj) {
                return obj.lastName + ', ' + obj.firstName
            }, 'hid');
            $scope.myFileName = dropdowns.myFileName;
            //  BU Configuration Header
            $scope.buConfigurableSectionName = dropdowns.findBusinessUnitConfigHeader;
            $scope.buDisplayName = dropdowns.findBusinessUnitDisplayName;
            $scope.productSortOrder = dropdowns.findProductSortOrder;
            $scope.yearEstablishedList = RA.UI.doConvertToLabelValue(dropdowns.findYearEstablishedList);
            $scope.taxStatusCodeList = RA.UI.doConvertToLabelValue(dropdowns.findTaxStatusCodeList, 'itemDescriptionShort', 'itemDescriptionShort');
            $scope.producerBusinessUnit = dependentDropdowns.producerDetails ? dependentDropdowns.producerDetails.businessUnit : getSessionItem('businessUnit');

            if (producerHierarchy != null) {
                $scope.producerHierarchyList = producerHierarchy;

                var tempProfitCenterList = [];
                tempProfitCenterList.push(SELECT_OPTION);

                for (var index in producerHierarchy) {
                    if (index.indexOf('@') === -1) {
                        tempProfitCenterList.push(index);
                    }
                }
                $scope.profitCenterList = RA.UI.doConvertToLabelValue(tempProfitCenterList);

            }

            if ($scope.foundProspectProducer.value == YES) {
                //non service calls
                $scope.updateTerritoryList(false);
                $scope.updateFieldList(false);
            }
            $scope.governingClassCodeRequired = dropdowns.governingClassCodeRequired == true ? 'required' : '';
            $scope.policyTypeList = RA.UI.rpmEnumToList(dropdowns.policyType);
            $scope.regionList = RA.UI.rpmEnumToList(dropdowns.regionList);
            $scope.policyOriginationList = RA.UI.rpmEnumToList(dropdowns.findPolicyOriginationList);

            submObject = RA.Controller.getOnlyRoot($scope.rpmSession, 'submission');
            processingEnum = submObject.getRpmClass().getField('processingType').getTrait('v:enum');
            $scope.processingTypeList = RA.UI.rpmEnumToList(processingEnum);

            referalType = submObject.getRpmClass().getField('agentReferralApprovalReason').getTrait('v:enum');
            $scope.agentReferralApprovalReasonList = RA.UI.rpmEnumToList(referalType);

            $scope.businessUnitListForProducerLookUp = RA.Controller.convertObjectsToLabelAndValue(dropdowns.findBusinessUnitListForProducerLookUp);
            $scope.producerLookUpBuSubInfo.value = $scope.producerLookUpBusubAgent.value = $scope.producerBusinessUnit;

            // Sort regionList by Label - in rpmEnumToList method, Dynamis is switching sorted order of list
            $scope.sortAlphabetically($scope.regionList);
            $scope.sortAlphabetically($scope.policyTypeList);
            $scope.sortAlphabetically($scope.policyOriginationList);
            $scope.insuredPartyCityList = dependentDropdowns.insuredPartyCityList;
            $scope.altMailPartyCityList = dependentDropdowns.altMailPartyCityList;
            $scope.prospectProducerCityList = dependentDropdowns.prospectProducerPartyCityList;
            $scope.altMailingProvinceList = RA.UI.doConvertToLabelValue(dependentDropdowns.altMailStateProvList, 'itemDescriptionShort', 'itemCode');
            $scope.stateProvinceList = RA.UI.doConvertToLabelValue(dependentDropdowns.insuredStateProvList, 'itemDescriptionShort', 'itemCode');
            $scope.unemploymentStateList = RA.UI.doConvertToLabelValue(dependentDropdowns.unemploymentStateList, 'itemDescriptionShort', 'itemCode');
            $scope.prospectProducerStateProvinceList = RA.UI.doConvertUdRefItemsToValueLabelPairs(dependentDropdowns.prospectProducerStateProvList);

            if (dependentDropdowns.underwriterParty) {
                $scope.underWriterList = dependentDropdowns.underwriterParty;
            }
            if (dependentDropdowns.renewalUnderwriterParty) {
                $scope.renewalUnderWriterList = dependentDropdowns.renewalUnderwriterParty;
            }
            if (dependentDropdowns.businessDeveloperParty) {
                $scope.businessDeveloperList = dependentDropdowns.businessDeveloperParty;
            }
            if (dependentDropdowns.csrParty) {
                $scope.csrList = dependentDropdowns.csrParty;
            }
            if (dependentDropdowns.accountManagerParty) {
                $scope.accountManagerList = dependentDropdowns.accountManagerParty;
            }
            if (dependentDropdowns.hiddenFields) {
                //Create HiddenFields Map at time Screen is Rendered
                $scope.hiddenFields = {};
                var hiddenFields = dependentDropdowns.hiddenFields.hiddenFields;
                for (var i in hiddenFields) {
                    var fieldName = hiddenFields[i];
                    $scope.hiddenFields[fieldName] = fieldName;
                }
            }

            $rootScope.$broadcast('pageStateChanged');
            $timeout(function () {
                $scope.pageLoaded = 'YES';
                $rootScope.hidePageLoading();
                RA.UI.consoleTimeEnd('Load Submission Info Page');

                // capture the true page time, if dynaTrace is available
                if (window.dT_) {
                    // another signal needs to be sent for the submission page because the ng-include of
                    // the aggregateSnippet calls hidePageLoading which triggers initial signal to be sent too soon
                    dynaTrace.signalOnLoadEnd();
                }
            });
            // I'm commenting this out since the underlying code isn't working properly anyhow, and it is having unintended side effects.
            //snapshots[SNAP_SUBMISSION] = RA.UI.takeSnapshot($scope.submission, $scope.preCallback());
            $scope.doDeterminePolicyFieldsDisabled();
            $scope.triggerPolicyTypeChangeWarning('policyType');
            ProductSelection.bootstrapScope($scope, $rootScope, $compile, $timeout, Submission, {
                state: 'submission.policyInfo.policyStateCode',
                date: 'submission.submissionEffectiveDate',
                session: $scope.submission.rpmSession,
                quoteList: $scope.quoteList,
                hide: $scope.doDetermineSaveButton,
                source: $scope.findSourceSystemDefaults,
                useReducedQuoteSession: true,
                screenName: SUBM_INFO
            });

            $timeout(function () {
                $('#submissionEffectiveDate').focus();
            }, 0);

            var producerLookupDoneBtn = {
                "id": "prodLookupModalDone",
                "class": "btn btn-margin-right btn-primary",
                "function": function () {
                    $scope.producerLookup.countryCode = EMPTY_STRING;
                    $scope.producerLookup.stateProvinceCode = EMPTY_STRING;
                    $scope.isAgencyLookupOpen = false;

                    // at this point, they could have added/removed a subagent or a appointed/prospect producer
                    var submission = $scope.submission;
                    var submissionRpm = $rootScope.getRpmObjects('submission', 'Submission');

                    if ($scope.producerLookupModal.selectedSubAgent && $scope.producerLookupModal.selectedSubAgent != NONE_DISPLAY) {
                        submissionRpm.getField('subAgent').setValue($scope.producerLookupModal.selectedSubAgentProducerCode);
                        submission.subAgentFullName = $scope.producerLookupModal.selectedSubAgent;
                        submission.subAgentStatus = $scope.producerLookupModal.selectedSubAgentStatus;
                    }
                    else {
                        submissionRpm.getField('subAgent').setValue(undefined);
                        submission.subAgentFullName = EMPTY_STRING;
                        submission.subAgentStatus = EMPTY_STRING;
                    }

                    $scope.doRemoveCRMProducerInformation();

                    if ($scope.producerLookupModal.selectedProducer && $scope.producerLookupModal.selectedProducer != NONE_DISPLAY) {
                        submission.producerCode = $scope.foundCRMProducerCode.value;
                        if ($scope.producerLookupModal.selectedProducerPick == YES) {
                            // if prospect and CRM .. populate prospect party
                            var prospectParty = $rootScope.getRpmObjects('submission', 'prospectProducer');
                            prospectParty.getField('fullName').setValue($scope.producerLookupModal.selectedProducer);
                        } else {
                            submission.agencyName = $scope.producerLookupModal.selectedProducer;
                        }

                        submission.profitCenterFullName = $scope.producerLookupModal.selectedProducerProfitCenter;
                        submission.territoryFullName = $scope.producerLookupModal.selectedProducerTerritory;
                        submission.fieldFullName = $scope.producerLookupModal.selectedProducerField;
                        $scope.producerStatus = $scope.producerLookupModal.selectedProducerStatus;
                        $scope.foundProspectProducer.value = $scope.producerLookupModal.selectedProducerPick;
                    }
                    else {
                        var prospectParty = $rootScope.getRpmObjects('submission', 'prospectProducer');
                        if (prospectParty) {
                            prospectParty.getField('gaiUserCode').setValue(undefined);
                            prospectParty.getField('fullName').setValue(undefined);
                        }
                        submission.agencyName = EMPTY_STRING;
                    }

                    $scope.determineTeamAssignmentLists(null, true, true);
                    $scope.determineProducerContactList(null, true, submission.producerCode);

                    if ($scope.foundSearchForProdType.value == 'subAgency') {
                        $scope.scrollSubAgentInformationSection();
                    }
                    else {
                        $scope.scrollProducerInformationSection();
                    }
                    $timeout(angular.noop);
                },
                "label": "Done"
            };

            var producerLookupCancelBtn = {
                "id": "prodLookupModalCancel",
                "class": "btn",
                "function": function () {
                    $scope.producerLookup.countryCode = EMPTY_STRING;
                    $scope.producerLookup.stateProvinceCode = EMPTY_STRING;
                    $scope.isAgencyLookupOpen = false;

                    if ($scope.foundSearchForProdType.value == 'subAgency') {
                        $scope.scrollSubAgentInformationSection();
                    } else {
                        $scope.scrollProducerInformationSection();
                    }
                    $timeout(angular.noop);
                },
                "label": "Cancel"
            };

            if ($scope.producerConfiguration.producerSource == PRODUCER_SOURCE_CRM && $scope.producerConfiguration.subAgency == "true") {
                $scope.prodLookupModalBtns = [
                    producerLookupDoneBtn,
                    producerLookupCancelBtn
                ];
            } else {
                $scope.prodLookupModalBtns = [
                    producerLookupCancelBtn
                ];
            }

            // Get any messages that were stored on the session, display them, and then clear them from the session.
            var subMessages = JSON.parse(getSessionItem(SESSION_SUBMISSION_MESSAGES));
            removeSessionItem(SESSION_SUBMISSION_MESSAGES);
            RA.UI.doDisplayUIMessages(subMessages, $scope);
        }
    );

    $scope.doRemoveProducer = function (producerToRemove) {
        // this method is only available for a producerSource of CRM, so no need to check producerSource.
        if (producerToRemove == 'producer') {
            $scope.producerLookupModal.selectedProducer = NONE_DISPLAY;
            $scope.producerLookupModal.selectedProducerCode = EMPTY_STRING;
            $scope.producerLookupModal.selectedProducerProfitCenter = EMPTY_STRING;
            $scope.producerLookupModal.selectedProducerTerritory = EMPTY_STRING;
            $scope.producerLookupModal.selectedProducerField = EMPTY_STRING;
            $scope.producerLookupModal.selectedProducerStatus = EMPTY_STRING;
        }
        else {
            $scope.producerLookupModal.selectedSubAgent = NONE_DISPLAY;
            $scope.producerLookupModal.selectedSubAgentProducerCode = EMPTY_STRING;
            $scope.producerLookupModal.selectedSubAgentProfitCenter = EMPTY_STRING;
            $scope.producerLookupModal.selectedSubAgentTerritory = EMPTY_STRING;
            $scope.producerLookupModal.selectedSubAgentField = EMPTY_STRING;
            $scope.producerLookupModal.selectedSubAgentStatus = EMPTY_STRING;
        }
    };

    $scope.doEnableDisableMenuItems = function () {
        $scope.doEnableDisableMenuItemsWithSubmission($scope.submission);
    };

    $scope.doEnableDisableMenuItemsWithSubmission = function (submission) {
        if (!submission.customerNumber) {
            $scope.disableNotes = true;
            $scope.disableManageActivities = true;
            $scope.disableAccountSummary = true;
            $scope.disableCustomerExperience = true;
            $scope.disableSubmissionLHN = true;
            $scope.disableWorksheetLHN = true;
            $scope.disableQuoteListLHN = true;
            $scope.disableBillingLHN = true;
        }
        else {
            $scope.disableNotes = false;
            $scope.disableManageActivities = false;
            $scope.disableAccountSummary = false;
            $scope.disableCustomerExperience = false;
            $scope.disableSubmissionLHN = false;
            $scope.disableWorksheetLHN = !((submission.transactionTypeRefCode === 'NBS' || submission.transactionTypeRefCode === 'REN') &&
            (submission.transactionSubTypeRefCode === 'NB' || submission.transactionSubTypeRefCode === 'RW' ||
            submission.transactionSubTypeRefCode === 'REN' || submission.transactionSubTypeRefCode === 'RLR' ||
            submission.transactionSubTypeRefCode === 'FDWCNV'));
            $scope.disableQuoteListLHN = !(submission.transactionTypeRefCode === 'NBS' || submission.transactionTypeRefCode === 'REN' || submission.transactionTypeRefCode === 'ENDT');
            $scope.disableBillingLHN = !(submission.transactionTypeRefCode === 'NBS' || submission.transactionTypeRefCode === 'REN');
        }
    };

    $scope.toggleAgencyLookupOpen = function (opts) {
        var fullName;
        var producerCode;
        var producerSearchType;
        var isSubAgency = opts;

        $scope.producerLookupModal = $scope.producerLookupModal || {};

        RA.UI.doClearMessages($scope);

        $scope.isSubAgency = isSubAgency;
        $scope.foundSearchForProdType = isSubAgency ? {value: "subAgency"} : {value: "producer"};
        var submissionRpm = $rootScope.getRpmObjects('submission', 'Submission');

        if (!$scope.isAgencyLookupOpen) {
            var prospectParty = $rootScope.getRpmObjects('submission', 'prospectProducer');
            $scope.foundCRMProspectProducer.value = $scope.foundProspectProducer.value;
            $scope.producerLookupModal.selectedProducerPick = $scope.foundProspectProducer.value;
            $scope.foundCRMProducerCode.value = $scope.submission.producerCode;

            if (isSubAgency) {
                fullName = $scope.submission.subAgentFullName;
                producerCode = submissionRpm.getValue('subAgent');
                $scope.producerLookupModal.selectedSubAgent = NONE_DISPLAY;
                if ($scope.submission.producerCode)
                    $scope.producerLookupModal.selectedProducer = $scope.foundProspectProducer.value == YES ? prospectParty.getValue('fullName') : $scope.submission.agencyName;
                else
                    $scope.producerLookupModal.selectedProducer = NONE_DISPLAY;

            } else {
                fullName = $scope.foundProspectProducer.value == YES ? prospectParty.getValue('fullName') : $scope.submission.agencyName;
                producerCode = $scope.submission.producerCode;
                $scope.producerLookupModal.selectedProducer = NONE_DISPLAY;
                $scope.producerLookupModal.selectedSubAgent = $scope.submission.subAgentFullName;
            }

            $scope.producerLookup.fullName = fullName;
            $scope.producerLookup.producerCode = producerCode;

            if ((fullName == null || fullName == EMPTY_STRING) && (producerCode == null || producerCode == EMPTY_STRING)) {
                alert(AGENCY_PRODUCER_REQUIRED_MESSAGE);
                $scope[isSubAgency ? 'scrollSubAgentInformationSection' : 'scrollProducerInformationSection']();
                return false;
            }

            if (producerCode != null && producerCode.length < 3 && (fullName == null || fullName == EMPTY_STRING)) {
                alert(PRODUCER_3_DIGITS_MESSAGE);
                $scope[isSubAgency ? 'scrollSubAgentInformationSection' : 'scrollProducerInformationSection']();
                return false;
            } else {
                $rootScope.showPageLoading();

                // YOU only want to show the modal pane if the producer list returns data, otherwise, don't toggle
                // the modal pane and show the message on the screen.
                producerSearchType = isSubAgency ? PRODUCER_SUBAGENCY : ($scope.foundProspectProducer.value == YES ? PRODUCER_PROSPECT : PRODUCER_APPOINTED);
                var producerLookUpBu = $scope.producerLookUpBuSubInfo.value;
                $scope.producerLookUpBuSubInfoModal.value = $scope.producerLookUpBuSubInfo.value;

                async.series(
                    {
                        producerList: function (callback) {

                            //producer full name is sometimes abbreviated for print(preferred name)(limit 40 chars)
                            //So if producer code is 6 digits, fullname is assigned to null.
                            if (producerCode != null && producerCode.length == 6) {
                                $scope.producerLookup.fullName = null;
                            }

                            Search.findProducersListWithBu($scope.producerLookup.fullName, producerCode, EMPTY_STRING, EMPTY_STRING, producerSearchType, producerLookUpBu,  function (result) {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            });
                        }
                    },

                    function (err, result) {
                        var data = result.producerList;
                        var producer;
                        var subm;
                        var modalBody;

                        $scope.producerRawData = data;

                        $timeout(function () {
                            modalBody = $("[modal-id='producerLookupModal'] .modal-body-refapp");
                            modalBody.scrollTop(0);
                        }, 1000);

                        if (data != null && data.length > 1) {
                            $scope.producerList = $scope.convertProducerData(data);
                            $scope.isAgencyLookupOpen = !$scope.isAgencyLookupOpen;
                        } else if (data != null && data.length == 1) {
                            $scope.producerList = $scope.convertProducerData(data);
                            producer = $scope.producerList[0];
                            subm = $scope.submission;

                            if (isSubAgency) {
                                $scope.submission.subAgentFullName = producer[12];
                                submissionRpm.getField('subAgent').setValue(producer[3]);
                                $scope.submission.subAgentStatus = producer[11];
                            } else {
                                subm.producerCode = producer[3];
                                if ($scope.foundProspectProducer.value == YES) {
                                    prospectParty.getField('fullName').setValue(producer[12]);
                                } else {
                                    subm.agencyName = producer[12];
                                }
                                subm.profitCenterFullName = producer[8];
                                subm.territoryFullName = producer[9];
                                subm.fieldFullName = producer[10];
                                $scope.producerStatus = producer[11];
                                $scope.determineTeamAssignmentLists(null, true, true);
                                $scope.determineProducerContactList(null, true, subm.producerCode);
                            }
                        } else {
                            $scope.scrollTop();
                        }

                        $timeout(function () {
                            $timeout(angular.noop);
                        });

                        $rootScope.hidePageLoading();
                    }
                );
            }
        } else {
            $scope.producerLookup.countryCode = EMPTY_STRING;
            $scope.producerLookup.stateProvinceCode = EMPTY_STRING;
            $scope.isAgencyLookupOpen = !$scope.isAgencyLookupOpen;

            $scope[isSubAgency ? 'scrollSubAgentInformationSection' : 'scrollProducerInformationSection']();
            $timeout(angular.noop);
        }
    };

    $scope.convertProducerData = function (producerList) {
        var producerRowDataArray = [];
        var tableRow = 0;

        if (producerList != null) {
            angular.forEach(producerList, function (producer) {
                var producerName;

                if ($scope.viewOnlyMode == true) {
                    producerName = producer.name;
                }
                else {
                    producerName = "<a href='#'>" + producer.name + "</a>";
                }
                var city = (producer.city) ? producer.city : " -- ";
                var state = (producer.state) ? producer.state : " -- ";
                var country = (producer.country) ? producer.country : " -- ";
                var producerCityState = city + " / " + state;
                var producerStateCountry = state + ", " + country;
                var producerProfitCenter = (producer.profitCenterCodeNameDisplay) ? producer.profitCenterCodeNameDisplay : " -- ";
                var producerTerritory = (producer.territoryCodeNameDisplay) ? producer.territoryCodeNameDisplay : " -- ";
                var producerField = (producer.fieldCodeNameDisplay) ? producer.fieldCodeNameDisplay : " -- ";

                var twisty = '<i id="' + (tableRow++) + '" class="icon icon-chevron-right makeThisWhite"></i>';

                var producerRow = [
                    twisty,
                    producerName, producer.dba, producer.code, producerCityState, producerStateCountry,
                    producer.postalCode, producer.phone, producerProfitCenter, producerTerritory,
                    producerField, producer.producerStatus, producer.name, producer.producerDescription];
                producerRowDataArray.push(producerRow);
            });
        }
        return producerRowDataArray;
    };

    $scope.doDisplayProducerDetailsData = function (rowClickedOn, methodCallback) {
        $scope.producerDetailsHtml = EMPTY_STRING;
        var producerDetails = $scope.producerRawData[rowClickedOn];

        var detailsHtml = "";
        var streetAddress1 = (producerDetails.streetAddress1) ? producerDetails.streetAddress1 : " -- ";
        var streetAddress2 = (producerDetails.streetAddress2) ? producerDetails.streetAddress2 : " -- ";
        var city = (producerDetails.city) ? producerDetails.city : " -- ";
        var state = (producerDetails.state) ? producerDetails.state : " -- ";
        var country = (producerDetails.country) ? producerDetails.country : " -- ";
        var phone = (producerDetails.phone) ? producerDetails.phone : " -- ";
        var postalCode = (producerDetails.postalCode) ? producerDetails.postalCode : " -- ";
        var producerProfitCenter = (producerDetails.profitCenterCodeNameDisplay) ? producerDetails.profitCenterCodeNameDisplay : " -- ";
        var producerTerritory = (producerDetails.territoryCodeNameDisplay) ? producerDetails.territoryCodeNameDisplay : " -- ";
        var producerField = (producerDetails.fieldCodeNameDisplay) ? producerDetails.fieldCodeNameDisplay : " -- ";

        detailsHtml =
            '<div class="container-fixed padLeft10">' +
            '<div class="container-fixed padLeft10">' +
            '<div class="row-form">' +
            '<div class="row-fluid">' +
            '<div class="span2">' +
            '<label>Address Line 1</label>' +
            streetAddress1 +
            '</div>' +
            '<div class="span2">' +
            '<label>City</label>' +
            city +
            '</div>' +
            '<div class="span8">' +
            '<label>Country</label>' +
            country +
            '</div>' +
            '</div>' +        // end of row-fluid
            '<br />' +
            '<div class="row-fluid">' +
            '<div class="span2">' +
            '<label>Address Line 2</label>' +
            streetAddress2 +
            '</div>' +
            '<div class="span2">' +
            '<label>State</label>' +
            state +
            '</div>' +
            '<div class="span2">' +
            '<label>Zip/Postal Code</label>' +
            postalCode +
            '</div>' +
            '<div class="span6">' +
            '<label>Phone #</label>' +
            phone +
            '</div>' +
            '</div>' +        // end of row-fluid
            '<br />' +
            '<div class="row-fluid">' +
            '<div class="span3">' +
            '<label>Profit Center</label>' +
            producerProfitCenter +
            '</div>' +
            '<div class="span3">' +
            '<label>Territory</label>' +
            producerTerritory +
            '</div>' +
            '<div class="span3">' +
            '<label>Field</label>' +
            producerField +
            '</div>';


        async.auto(
            {
                // Fetch Account Information from ACCOUNT_RELATION Table
                teamAssignmentData: function (callback) {
                    $scope.doDisplayProducerDetailsRolesData(producerDetails, callback);
                },
                afterNotesAsyncMethodCalls: ['teamAssignmentData', function (callback) {
                    detailsHtml += $scope.teamAssignmentHtml;

                    detailsHtml += '</div>' +        // end of row-form
                        '</div>' +        // end of container-fluid
                        '</div>';        // end of container-fluid
                    $scope.producerDetailsHtml = detailsHtml;
                    methodCallback(null);
                }]
            });


    };

    $scope.doDisplayProducerDetailsRolesData = function (producerDetails, callback) {
        if ($scope.producerConfiguration.producerSource == PRODUCER_SOURCE_PRM) {
            var producerType = $scope.foundProspectProducer.value == YES ? PRODUCER_PROSPECT : PRODUCER_APPOINTED;
            async.series(
                {
                    producerDetails: function (callback) {
                        Search.findProducersDetails(EMPTY_STRING, producerDetails.code, EMPTY_STRING, producerType, function (result) {
                            var data = RA.Service.handleServiceResult(result, $scope);
                            callback(null, data);
                        });
                    }
                },
                function (err, result) {
                    var data = result.producerDetails;

                    if (data != null && data.producerCode != null && data.agencyName != null) {
                        $scope.producerAdditionalDetails = RA.Controller.scrubProducerDetailsData(data);
                        $scope.teamAssignmentHtml =
                            '<div class="span3">' +
                            '<label>Producer Code Description</label>' +
                            $scope.producerAdditionalDetails.producerDescription +
                            '</div>' +
                            '</div>';
                    } else {
                        alert(PRODUCER_CODE_ERROR);
                    }

                    callback(null);
                }
            );
        }
        else {
            if ($scope.foundSearchForProdType.value == 'subAgency') {
                var producerDescription = (producerDetails.producerDescription) ? producerDetails.producerDescription : "--";
                $scope.teamAssignmentHtml =
                    '<div class="span3">' +
                    '<label>Producer Code Description</label>' +
                    producerDescription +
                    '</div>' +
                    '</div>';        // end of row-fluid
                callback(null);
            }
            else {
                async.series(
                    {
                        teamAssignmentList: function (callback) {
                            Search.findProducerTeamAssignments(producerDetails.code,$scope.producerLookUpBuSubInfo, function (result) {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            });
                        }
                    },
                    function (err, result) {
                        var data = result.teamAssignmentList;
                        var developerList = EMPTY_STRING;
                        var csrList = EMPTY_STRING;
                        var accountManagerList = EMPTY_STRING;
                        var teamUnderwriterList = [];
                        var teamRenewalUnderwriterList = [];

                        if (data != null) {
                            if (data.businessDevelopers && data.businessDevelopers.length > 0) {
                                // for now , we are only showing the first one
                                developerList = data.businessDevelopers[0].firstName + " " + data.businessDevelopers[0].lastName;
                            }
                            if (data.csrs && data.csrs.length > 0) {
                                // for now, we are only showing the first one
                                csrList = data.csrs[0].firstName + " " + data.csrs[0].lastName;
                            }
                            if (data.underwriters && data.underwriters.length > 0) {
                                angular.forEach(data.underwriters, function (underwriter) {
                                    teamUnderwriterList.push(underwriter.firstName + " " + underwriter.lastName);
                                });
                            }
                            if (data.renewalUnderwriters && data.renewalUnderwriters.length > 0) {
                                angular.forEach(data.renewalUnderwriters, function (renewalUnderwriter) {
                                    teamRenewalUnderwriterList.push(renewalUnderwriter.firstName + " " + renewalUnderwriter.lastName);
                                });
                            }
                            if (data.accountManagers && data.accountManagers.length > 0) {
                                // for now , we are only showing the first one
                                accountManagerList = data.accountManagers[0].firstName + " " + data.accountManagers[0].lastName;
                            }
                            developerList = developerList == EMPTY_STRING ? "--" : developerList;
                            csrList = csrList == EMPTY_STRING ? "--" : csrList;
                            accountManagerList = accountManagerList == EMPTY_STRING ? "--" : accountManagerList;
                        }

                        var producerDescription = (producerDetails.producerDescription) ? producerDetails.producerDescription : "--";
                        $scope.teamAssignmentHtml =
                            '<div class="span3">' +
                            '<label>Producer Code Description</label>' +
                            producerDescription +
                            '</div>' +
                            '</div>' +
                            '<br />' +
                            '<div class="row-fluid">' +
                            '<div class="span3">' +
                            '<label>Underwriter</label>' +
                            $scope.findUnderwriterRoleHtml(teamUnderwriterList) +
                            '</div>' +
                            '<div class="span3">' +
                            '<label>Renewal Underwriter</label>' +
                            $scope.findUnderwriterRoleHtml(teamRenewalUnderwriterList) +
                            '</div>' +
                            '<div class="span3">' +
                            '<label>Marketing</label>' +
                            developerList +
                            '</div>' +
                            '<div class="span3">' +
                            '<label>CSR</label>' +
                            csrList +
                            '</div>' +
                            '<div class="span3">' +
                            '<label>Account Manager</label>' +
                            accountManagerList +
                            '</div>' +
                            '</div>';        // end of row-fluid
                        callback(null);
                    }
                );

            }
        }
    };

    $scope.findUnderwriterRoleHtml = function (teamUnderwriterList) {

        if (teamUnderwriterList) {
            if (teamUnderwriterList.length == 0) {
                return " -- ";
            } else {
                var roleHtml = '<div class="fieldset-producerLookup">' +
                    '<div>' +
                    "<ul class='no-bullets3'>";

                for (var i in teamUnderwriterList) {
                    roleHtml += '<li>' + teamUnderwriterList[i] + '</li>';
                }
                roleHtml += "</ul>" +
                    '</div>' +
                    '</div>';
                return roleHtml;
            }
        } else {
            return " -- ";
        }
    };

    /**
     * Called from view
     * @param e
     */
    $scope.updateProducerList = function (e) {
        var producerSearchType;

        RA.UI.doClearMessages($scope);

        if (e != null)
            e.preventDefault(); // to prevent the required fields from highlighting on button click

        $scope.producerList = [];
        var agentParty = $scope.producerLookup.fullName;
        var producerCode = $scope.producerLookup.producerCode;
        if ((agentParty == null || agentParty == EMPTY_STRING) && (producerCode == null || producerCode == EMPTY_STRING)) {
            alert(AGENCY_NAME_PRODUCER_REQUIRED_MESSAGE);
            $scope.scrollProducerInformationSection();
            return false;
        }
        else if (producerCode != null && producerCode.length < 3 && (agentParty == null || agentParty == EMPTY_STRING)) {
            alert(PRODUCER_3_DIGITS_MESSAGE);
            $scope.scrollProducerInformationSection();
            return false;
        }
        else {
            $rootScope.showPageLoading();

            if ($scope.foundSearchForProdType.value == 'subAgency') {
                producerSearchType = PRODUCER_SUBAGENCY;
            } else {

                if ($scope.producerConfiguration.producerSource == PRODUCER_SOURCE_CRM) {
                    producerSearchType = $scope.foundCRMProspectProducer.value == YES ? PRODUCER_PROSPECT : PRODUCER_APPOINTED;
                }
                else {
                    producerSearchType = $scope.foundProspectProducer.value == YES ? PRODUCER_PROSPECT : PRODUCER_APPOINTED;
                }
            }

            //Explanation: the search for appointed producer expects a full name (ex. "United States")
            //but other searches expect a country/state code (ex. "US")
            var countrySelection = producerSearchType == PRODUCER_APPOINTED ? RA.UI.doFindLabelFromValue($scope.producerLookup.countryCode, $scope.countryList) : $scope.producerLookup.countryCode;
            var stateSelection = producerSearchType == PRODUCER_APPOINTED ? RA.UI.doFindLabelFromValue($scope.producerLookup.stateProvinceCode, $scope.agencyLookupStateProvinceList) : $scope.producerLookup.stateProvinceCode;

            if (countrySelection == SELECT_OPTION) {
                countrySelection = "";
            }
            if (stateSelection == SELECT_OPTION) {
                stateSelection = "";
            }
            var producerLookUpBu = $scope.producerLookUpBuSubInfoModal.value;

            async.series(
                {
                    producerList: function (callback) {
                        //producer full name is sometimes abbreviated for print(preferred name)(limit 40 chars)
                        //So if producer code is 6 digits, fullname is assigned to null.
                        if (producerCode != null && producerCode.length == 6) {
                            agentParty = null;
                        }

                        Search.findProducersListWithBu(agentParty, producerCode, countrySelection, stateSelection, producerSearchType, producerLookUpBu, function (result) {
                            var data = RA.Service.handleServiceResult(result, $scope);
                            callback(null, data);
                        });
                    }
                },
                function (err, result) {
                    var data = result.producerList;

                    if (data != null && data.length > 0) {
                        $scope.producerRawData = data;
                        $scope.producerList = $scope.convertProducerData(data);
                    }

                    $rootScope.hidePageLoading();
                }
            );
        }
    };

    $scope.doDetermineAddressOverrides = function doDetermineAddressOverrides(messages) {
        $scope.insuredPartyAddressOverrideInd = false;
        $scope.alternatePartyAddressOverrideInd = false;

        if (!messages) return;

        for (var i = 0; i < messages.length; i++) {
            var message = messages[i];
            var context = message.context;
            if (context === PRIMARY_ADDRESS_VALIDATION || context === PRIMARY_ADDRESS_VALIDATION_TAG) {
                $scope.insuredPartyAddressOverrideInd = true;
            }
            else if (context === ALTERNATE_ADDRESS_VALIDATION || context === ALTERNATE_ADDRESS_VALIDATION_TAG) {
                $scope.alternatePartyAddressOverrideInd = true;
            }
        }
    };


    $scope.doDefaultAssignTo = function () {
        var srcField = $scope.defaultAssignTo;
        if (srcField) {
            var srcFieldVal, srcFieldObj;
            $scope.$watch('getRpmObjects("submission", "' + srcField + '").getValue("gaiUserCode")', function () {
                $timeout(function () {
                    if ($scope.submission && $scope.submission.rpmSession) {
                        srcFieldObj = $rootScope.getRpmObjects('submission', srcField);
                        srcFieldVal = srcFieldObj ? srcFieldObj.getValue('gaiUserCode') : '';
                        if (srcFieldVal) {
                            if (srcFieldVal != '' && !$scope.submission.assignedToHid)
                                $scope.submission.assignedToHid = srcFieldVal;
                        }
                    }
                });
            });
        }
    };


    $scope.doDetermineDisplayHideAddressOverrideIndicator = function () {
        var rpmSession = $scope.submission.rpmSession;
        var primary = $rootScope.getRpmObjects('submission', 'primaryInsured');
        var altMail = $rootScope.getRpmObjects('submission', 'alternateMailing');
        var primaryLocation = primary.getValue('places')[0];
        var altMailLocation = altMail ? altMail.getValue('places')[0] : undefined;
        $scope.insuredPartyAddressOverrideInd = primaryLocation && primaryLocation.getValue('addressOverride');
        $scope.alternatePartyAddressOverrideInd = altMailLocation && altMailLocation.getValue('addressOverride');
    };

    /**
     * Called from view
     */
    $scope.toggleAgencyDetailsOpen = function (isSubAgency) {
        var fullName;
        var producerCode;
        var producerType;

        RA.UI.doClearMessages($scope);

        isSubAgency = isSubAgency || false;

        if (!$scope.isAgencyDetailsOpen) {
            $scope.producerList = [];
            var submissionRpm = $rootScope.getRpmObjects('submission', 'Submission');

            if (isSubAgency) {
                fullName = $scope.submission.subAgentFullName;
                producerCode = submissionRpm.getValue('subAgent');
                producerType = $scope.submission.subAgentStatus;
            } else {
                var prospectParty = $rootScope.getRpmObjects('submission', 'prospectProducer');
                fullName = $scope.foundProspectProducer.value == YES ? prospectParty.getValue('fullName') : $scope.submission.agencyName;
                producerCode = $scope.submission.producerCode;
                producerType = $scope.foundProspectProducer.value == YES ? PRODUCER_PROSPECT : PRODUCER_APPOINTED;
            }

            if (fullName != EMPTY_STRING && fullName != null && producerCode != EMPTY_STRING && producerCode != null) {
                $rootScope.showPageLoading();
                async.series(
                    {
                        producerDetails: function (callback) {
                            Search.findProducersDetails(fullName, producerCode, EMPTY_STRING, producerType, function (result) {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            });
                        }
                    },
                    function (err, result) {
                        var data = result.producerDetails;

                        if (data != null && data.producerCode != null && data.agencyName != null) {
                            $scope.producerDetails = RA.Controller.scrubProducerDetailsData(data);
                            $scope.isAgencyDetailsOpen = !$scope.isAgencyDetailsOpen;
                        } else {
                            alert(PRODUCER_CODE_ERROR);
                        }

                        $rootScope.hidePageLoading();
                    }
                );
            } else {
                alert(PRODUCER_CODE_ERROR);
            }
        }
        else {
            $scope.isAgencyDetailsOpen = !$scope.isAgencyDetailsOpen;
            $scope.scrollProducerInformationSection();
        }

    };
    // ****************
    // end of modal functions
    // ****************

    $scope.togglePrimaryInsuredDBA = function togglePrimaryInsuredDBA() {
        $scope.showPrimaryDBA = !$scope.showPrimaryDBA;
        var primaryInsured = $rootScope.getRpmObjects('submission', 'primaryInsured');
        var dbaParties = primaryInsured.getValue('dba');
        if ($scope.showPrimaryDBA && (!dbaParties || dbaParties.length === 0)) {
            $scope.doAddRpmObject(primaryInsured, 'dba', 'party.DBA');
        }
    };

    $scope.togglePrimaryUnemployment = function togglePrimaryUnemployment() {
        $scope.showPrimaryUnemployment = !$scope.showPrimaryUnemployment;
        var primaryInsured = $rootScope.getRpmObjects('submission', 'primaryInsured');
        var unemployment = primaryInsured.getValue('unemployment');
        if ($scope.showPrimaryUnemployment && (!unemployment || unemployment.length === 0)) {
            $scope.doAddRpmObject(primaryInsured, 'unemployment', 'Unemployment');
        }
    };

    $scope.doAddMoreNamedInsured = function (e) {
        $timeout(function () {
            var lastRow = $('#moreNamedInsuredTable').find('tbody').children().last();
            var cell = lastRow.children().eq(2);
            var select = cell.find('.select2-focusser');
            select.focus();
        }, 100);
        //TODO = investigate e.preventDefault
        if (e) // checks for a non-null click event because autofill calls this function without an event
            e.preventDefault();	// to prevent the required fields from highlighting on button click

        $scope.doLoadEmptyMNIParty(function (result) {
            var rpmSession = new Dynamis.RpmSession(RA.Service.handleServiceResult(result, $scope));
            $rootScope.rpmSessionMap['submission'] = $scope.submission.rpmSession = rpmSession;
            $timeout(function () {
                $rootScope.$broadcast('sessionChanged');
            });

            var id = rpmSession.namedObjects.roots[1];
            var rpmObject = rpmSession.getRpmObjectById(id);
            rpmObject.getField('legalEntity').setValue('CCORP');

            $timeout(function () {
                $rootScope.$broadcast('moreNamedLoaded', {'itemsToRefresh':[id]});
            });
        });
    };

    $scope.doLoadEmptyMNIParty = function (handler) {
        var submission = $rootScope.getRpmObjects('submission', 'Submission');
        var items = [{sourceField: 'partyRoles', sourceId: submission.getId(), itemToAdd: 'partyrole.MoreNamedInsured'},
            {sourceField: 'Parties', index: 0, itemToAdd: 'party.MoreNamedInsured'}
        ];
        var args = {items: {'@type': 'java.util.ArrayList', '@items': items}};
        var request = new RA.PipelineRequest('addMultiple', args, $scope.submission.rpmSession, handler);
        request.execute();
    };


    $scope.toggleMoreNamedInsuredTwisty = function toggleMoreNamedInsuredTwisty(index, twistyName, mniParty, field) {
        var needsCreated = false;
        var row = $scope.mniTwisty[index];
        if (row) {
            for (var name in row) {
                if (name === twistyName) {
                    row[twistyName] = !row[twistyName];
                    break;
                }
            }
        }
        else {
            row = {dba: false, unemployment: false, places: false};
            row[twistyName] = true;
        }

        $scope.mniTwisty[index] = row;

        if (mniParty && field) {
            var targets = mniParty.getValue(twistyName);
            needsCreated = row[twistyName] && (!targets || targets.length === 0);
            if (needsCreated) {
                if (twistyName == 'places') {
                    $scope.doAddRpmObject(mniParty, twistyName, field, function (session) {
                        var id = mniParty.getId();
                        session.getRpmObjectById(id).getField('places').getValue()[0].getField('CountryISOCode').setValue('US');
                    });
                } else if($scope.viewOnlyMode !== true) {
                    $scope.doAddRpmObject(mniParty, twistyName, field);
                }
            }
        }

        if (twistyName == 'places' && !needsCreated)
        {
            $scope.findCityStateByPostalCode('moreNamedInsuredParty', undefined, mniParty, mniParty.getValue('places')[0].id)
        }
        else if (twistyName == 'dba' || twistyName == 'unemployment') {
            $timeout(function(){
                $scope.$apply();
            });
        }
    };

    $scope.doAddRpmObject = function(object, field, type, callback) {
        var items = [{sourceField: field, sourceId: object.getId(), itemToAdd: type}];
        var args = {items: {'@type': 'java.util.ArrayList', '@items': items}};
        var request = new RA.PipelineRequest('addMultiple', args, $scope.submission.rpmSession, function (result) {
            var rpmSession = new Dynamis.RpmSession(RA.Service.handleServiceResult(result, $scope));
            $rootScope.rpmSessionMap['submission'] = $scope.submission.rpmSession = rpmSession;
            if (callback && typeof(callback) === 'function') callback(rpmSession);
            $timeout(function () {
                $rootScope.$broadcast('sessionChanged');
            });
            $timeout(function () {
                $rootScope.$broadcast('subObjectLoaded');
            });
            $timeout(function () {
                $rootScope.$broadcast('moreNamedLoaded', {'itemsToRefresh':rpmSession.namedObjects.roots});
            });
        });
        request.execute();
    };

    $scope.doDeleteRpmObject = function(object, type) {
        var args = {sourceField: field, sourceId: object.getId(), itemToDelete: type};
        var request = new RA.PipelineRequest('delete', args, $scope.submission.rpmSession, function (result) {
            var rpmSession = new Dynamis.RpmSession(RA.Service.handleServiceResult(result, $scope));
            $rootScope.rpmSessionMap['submission'] = $scope.submission.rpmSession = rpmSession;
            $timeout(function () {
                $rootScope.$broadcast('sessionChanged');
            });
            $timeout(function () {
                $rootScope.$broadcast('subObjectLoaded');
            });
            $timeout(function () {
                $rootScope.$broadcast('moreNamedLoaded', {'itemsToRefresh':[object.getId()]});
            });
        });
        request.execute();
    };

    $scope.doAlternateMailingCheck = function () {
        var altMailing = $rootScope.getRpmObjects('submission', 'alternateMailing');
        var location = altMailing.getValue('places')[0];
        if ($scope.hasAlternateMailing.value) {
            // had to put this inside a timeout in order to work.
            $timeout(function () {
                $('#altMailPartyFullName').focus();
            }, 100);

            // if there is no country selected, set it to the US
            var altMailCountryCode = location.getValue('CountryISOCode');
            if (!altMailCountryCode) {
                location.getField('CountryISOCode').setValue(UNITED_STATES);
            }

            $scope.altMailStateProvListLoading = true;
            $scope.updateAltMailingProvinceList();
        }
        else {
            if (confirm(REMOVE_ALT_MAILING_MESSAGE)) {
                altMailing.getField('fullName').setValue(EMPTY_STRING);
                altMailing.getField('fullName2').setValue(EMPTY_STRING);
                location.getField('AddressLine1').setValue(EMPTY_STRING);
                location.getField('AddressLine2').setValue(EMPTY_STRING);
                location.getField('CountryISOCode').setValue(EMPTY_STRING);
                location.getField('PostalCode').setValue(EMPTY_STRING);
                location.getField('City').setValue(EMPTY_STRING);
                location.getField('StateOrProvinceAbbreviation').setValue(EMPTY_STRING);
                $("#altMailPartyAddress1").removeClass('gaig-error');
            }
            else {
                $scope.hasAlternateMailing.value = true;
            }
        }
        $rootScope.$broadcast('altMailSelected');
    };

    /**
     * If a disposition status is chosen for the submission,
     * set view only mode to true, retrieve disposition options and default disposition.
     */
    $scope.doCheckForDisposition = function () {
        var currentStatus = $scope.submission.transactionStatusRefCode;
        $scope.disposition.recaptureReviewDate = null;

        if (currentStatus != null && RA.Controller.isDispositionStatus(currentStatus)) {
            $rootScope.showPageLoading();

            async.parallel(
                [
                    function (callback) {
                        $scope.doPopulateDispositionOptions(callback);
                    },
                    function (callback) {
                        $scope.findDefaultDisposition(callback);
                    }
                ]);
            $scope.disableRecapture = true;
            $rootScope.hidePageLoading();
        }

    };

    /**
     * Format Transaction Status to be displayed in UI dropdown
     *        Returns formatted list
     */
    $scope.doFormatTransactionStatusList = function (unformattedList) {
        var formattedList = [];
        if (unformattedList) {
            for (var i in unformattedList) {
                if (i.indexOf('@') === -1) {
                    var newItem = {"value": i, "label": unformattedList[i]};
                    formattedList.push(newItem);
                }
            }
            return formattedList;
        }
    };

    /**
     * Performs an async call to retrieve the appropriate options for the
     * terminating submission status
     */
    $scope.doPopulateDispositionOptions = function (callback) {
        var currentStatus = $scope.submission.transactionStatusRefCode;

        if (currentStatus == TRANSACTION_STATUS_DECLINED) {
            async.parallel(
                {
                    declinedReasonList: function (callback) {
                        Presentation.findDispositionDeclinedList(function (result) {
                            var data = RA.Service.handleServiceResult(result, $scope);
                            callback(null, data);
                        });
                    }
                },
                function (err, results) {
                    $scope.dispositionDeclinedList = results.declinedReasonList;
                    $timeout(angular.noop);
                    if (callback != undefined && callback != null)
                        callback(null);
                }
            );
        }
        else if (currentStatus == TRANSACTION_STATUS_LOST) {
            async.parallel(
                {
                    lostReasonsList: function (callback) {
                        Presentation.findDispositionLostList(function (result) {
                            var data = RA.Service.handleServiceResult(result, $scope);
                            callback(null, data);
                        });
                    }
                },
                function (err, results) {
                    $scope.dispositionLostList = results.lostReasonsList;
                    $timeout(angular.noop);
                    if (callback != undefined && callback != null)
                        callback(null);
                }
            );
        }
        else if (currentStatus == TRANSACTION_STATUS_WITHDRAWN) {
            async.parallel(
                {
                    withdrawnReasonsList: function (callback) {
                        Presentation.findDispositionWithdrawnList(function (result) {
                            var data = RA.Service.handleServiceResult(result, $scope);
                            callback(null, data);
                        });
                    }
                },
                function (err, results) {
                    $scope.dispositionWithdrawnList = results.withdrawnReasonsList;
                    $timeout(angular.noop);
                    if (callback != undefined && callback != null)
                        callback(null);
                }
            );
        }
        else {
            if (callback)
                callback(null);
        }
    };

    $scope.determineProducerContactList = function (opts, setSelected, producerCode) {
        $scope.producerContactList = [];

        if ($scope.producerConfiguration.teamAssignment == 'true' && $scope.producerConfiguration.producerSource == PRODUCER_SOURCE_CRM) {
            if (($scope.producerRawData) && $scope.producerRawData.length > 0) {
                // we have the producer info, pull from the producer list
                angular.forEach($scope.producerRawData, function (producerData) {
                    if (producerData.code == producerCode) {
                        $scope.producerContactList = RA.UI.doConvertToLabelValue(producerData.contactList, function (dev) {
                            return dev.firstName + ' ' + dev.lastName
                        }, function (dev) {
                            return dev.firstName + ' ' + dev.lastName
                        });
                    }
                });

                if (opts && opts.callback)
                    opts.callback(NO_ERRORS);

                if ($scope.producerContactList.length > 0)
                    return;
            }
            // if no existing producer data, or existing data has an empty contact list, make a call to CRM
            async.series(
                {
                    producerContactList: function (callback) {

                        Search.findProducerContactList(producerCode, function (result) {
                            var data = RA.Service.handleServiceResult(result, $scope);
                            callback(null, data);
                        });
                    }
                },

                function (err, result) {
                    var data = result.producerContactList;

                    if (data && data.length > 0) {
                        $scope.producerContactList = RA.UI.doConvertToLabelValue(data, 'fullName', 'fullName');
                    }

                    if (setSelected) {
                        // do nothing
                    } else {
                        // make sure it's in the list.  If not, set the parties to null, so they don't get saved
                        var fullNameFound = false;
                        var prodContact = $rootScope.getRpmObjects('submission', 'producerContact');
                        var prosProdContact = $rootScope.getRpmObjects('submission', 'prospectContact');
                        var theContactParty;

                        if (prodContact.getValue('fullName')) {
                            theContactParty = prodContact;
                        }
                        else if (prosProdContact.getValue('fullName')) {
                            theContactParty = prosProdContact;
                        }

                        if (theContactParty) {
                            var contactName = theContactParty.getValue('fullName');
                            angular.forEach($scope.producerContactList, function (contactList) {
                                if (contactList.value == contactName) {
                                    fullNameFound = true;
                                }
                            });

                            if (!fullNameFound) {
                                prodContact.getField('fullName').setValue(undefined);
                                prosProdContact.getField('fullName').setValue(undefined);
                            }
                        }
                    }

                    $timeout(function () {
                        $scope.$apply();
                    });

                    if (opts && opts.callback)
                        opts.callback(NO_ERRORS);
                }
            );
        }
        else {
            if (opts && opts.callback)
                opts.callback(NO_ERRORS);

        }

    };

    $scope.determineTeamAssignmentLists = function (opts, setSelected, clearExisting) {
        // if they are consuming team assignment, then pull the underwriter, business developer and CSR list from CRM, else use ldap group
        if ($scope.producerConfiguration.teamAssignment == 'true') {
            if (clearExisting) {
                $scope.clearTeamAssignmentsAndLists();
            }
            if ($scope.submission.producerCode && $scope.submission.producerCode.length > 1) {
                $scope.setDisplayForLoadingAssignmentRoles();
                // clear out old crm messages
                RA.UI.doClearMessages($scope);

                // call CRM and get the list of available underwriters, business developers and CSR
                async.series(
                    [
                        function (callback) {
                            Search.findProducerTeamAssignments($scope.submission.producerCode, $scope.producerLookUpBuSubInfo.value, function (result) {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(NO_ERRORS, data);
                                if (data == null) {
                                    $timeout(function () {
                                        $scope.scrollTop();
                                        $scope.$apply();
                                    })
                                }
                            });
                        }
                    ],
                    function (err, results) {
                        var data = results[0];
                        if (data) {
                            if (data.underwriters && data.underwriters.length > 0) {
                                $scope.underWriterList = RA.UI.doConvertToLabelValue(data.underwriters, function (dev) {
                                    return dev.lastName + ', ' + dev.firstName
                                }, 'hid');

                                if (setSelected) {
                                    if (data.underwriters.length == 1) {
                                        var underwriter = $rootScope.getRpmObjects('submission', 'underwriter');
                                        underwriter.getField('gaiUserCode').setValue(data.underwriters[0].hid);
                                    }
                                }
                            }

                            if (data.renewalUnderwriters && data.renewalUnderwriters.length > 0) {
                                $scope.renewalUnderWriterList = RA.UI.doConvertToLabelValue(data.renewalUnderwriters, function (dev) {
                                    return dev.lastName + ', ' + dev.firstName
                                }, 'hid');

                                if (setSelected) {
                                    if (data.renewalUnderwriters.length == 1) {
                                        var renewalUnderwriter = $rootScope.getRpmObjects('submission', 'renewalUnderwriter');
                                        renewalUnderwriter.getField('gaiUserCode').setValue(data.renewalUnderwriters[0].hid);
                                    }
                                }
                            }

                            if (data.businessDevelopers && data.businessDevelopers.length > 0) {
                                $scope.businessDeveloperList = RA.UI.doConvertToLabelValue(data.businessDevelopers, function (dev) {
                                    return dev.lastName + ', ' + dev.firstName
                                }, 'hid');

                                if (setSelected) {
                                    if (data.businessDevelopers.length == 1) {
                                        var busDev = $rootScope.getRpmObjects('submission', 'businessDeveloper');
                                        busDev.getField('gaiUserCode').setValue(data.businessDevelopers[0].hid);
                                    }
                                }
                            }

                            if (data.csrs && data.csrs.length > 0) {
                                $scope.csrList = RA.UI.doConvertToLabelValue(data.csrs, function (dev) {
                                    return dev.lastName + ', ' + dev.firstName
                                }, 'hid');

                                if (setSelected) {
                                    if (data.csrs.length == 1) {
                                        var csrParty = $rootScope.getRpmObjects('submission', 'csr');
                                        csrParty.getField('gaiUserCode').setValue(data.csrs[0].hid);
                                    }
                                }
                            }

                            if (data.accountManagers && data.accountManagers.length > 0) {
                                $scope.accountManagerList = RA.UI.doConvertToLabelValue(data.accountManagers, function (dev) {
                                    return dev.lastName + ', ' + dev.firstName
                                }, 'hid');

                                if (setSelected) {
                                    if (data.accountManagers.length == 1) {
                                        var accManager = $rootScope.getRpmObjects('submission', 'accountManager');
                                        accManager.getField('gaiUserCode').setValue(data.accountManagers[0].hid);
                                    }
                                }
                            }

                            if (data.assignees && data.assignees.length > 0) {
                                var assigneesLength = data.assignees.length
                                for (var i = 0; i < assigneesLength; i++) {
                                    var assignee = data.assignees[i];
                                    assignee.nameForDisplay = assignee.lastName + ', ' + assignee.firstName;
                                }
                                $scope.assignToList = data.assignees;

                                if (setSelected) {
                                    if (data.assignees.length === 1) {
                                        submission.assignedToHid = data.assignees[0].hid;                                    }
                                }
                            }

                            if ($scope.viewOnlyMode) {
                                RA.Messages.removeInfoMessageMultiple($scope, LDAP_INVALID_CRM);
                            }
                            $timeout(function () {
                                $rootScope.$broadcast('pageStateChanged')
                            });
                        }
                        if (opts && opts.callback) {
                            opts.callback(NO_ERRORS);
                        }
                        $scope.removeDisplayForLoadingAssignmentRoles();
                    }
                );
            } else {
                if (opts && opts.callback) {
                    opts.callback(NO_ERRORS);
                }

            }
        }
        else if ($scope.producerConfiguration.teamAssignment == 'false') {
            // pull information from ldap group
            async.parallel(
                {
                    underwriterList: function (callback) {
                        Presentation.findUnderwriterList(function (result) {
                            var data = RA.Service.handleServiceResult(result, $scope);
                            callback(null, data);
                        });
                    },
                    businessDeveloperList: function (callback) {
                        Presentation.findBusinessDeveloperList(function (result) {
                            var data = RA.Service.handleServiceResult(result, $scope);
                            callback(null, data);
                        });
                    },
                    accountManagerList: function (callback) {
                        Presentation.findAccountManagerList(function (result) {
                            var data = RA.Service.handleServiceResult(result, $scope);
                            callback(null, data);
                        });
                    }
                },
                function (err, result) {
                    $scope.underWriterList = RA.UI.doConvertToLabelValue(result.underwriterList, function (dev) {
                        return dev.lastName + ', ' + dev.firstName
                    }, 'hid');
                    $scope.renewalUnderWriterList = $scope.underWriterList;
                    $scope.businessDeveloperList = RA.UI.doConvertToLabelValue(result.businessDeveloperList, function (dev) {
                        return dev.lastName + ', ' + dev.firstName
                    }, 'hid');
                    $scope.accountManagerList = RA.UI.doConvertToLabelValue(result.accountManagerList, function (dev) {
                        return dev.lastName + ', ' + dev.firstName
                    }, 'hid');

                    if (opts && opts.callback)
                        opts.callback(NO_ERRORS);
                }
            );
        } else {
            if (opts && opts.callback) {
                opts.callback(NO_ERRORS);
            }
        }

    };

    $scope.setProducerContactParties = function (opts) {
        // this logic is needed if you are viewing a submission that has an 'old' prospectContact or producerContact party saved.  You still want
        // to see who the old prospectContact or producerContact parties were.
        if ($scope.producerConfiguration.teamAssignment == 'true') {
            var rpmSession = $scope.submission.rpmSession;
            var prodContact = $rootScope.getRpmObjects('submission', 'producerContact');
            var prosProdContact = $rootScope.getRpmObjects('submission', 'prospectContact');
            var theContactParty;

            if (prodContact.getValue('fullName')) {
                theContactParty = prodContact;
            }
            else if (prosProdContact.getValue('fullName')) {
                theContactParty = prosProdContact;
            }

            if (theContactParty) {
                // make sure it's in the list
                var fullNameFound = false;
                var contactName = theContactParty.getValue('fullName');
                angular.forEach($scope.producerContactList, function (contactList) {
                    if (contactList.fullName == contactName) {
                        fullNameFound = true;
                    }
                });

                if (!fullNameFound && $scope.viewOnlyMode) {
                    if (!$scope.producerContactList) {
                        $scope.producerContactList = [];
                    }
                    $scope.producerContactList.push({'fullName': contactName});
                    $scope.producerContactList = RA.UI.doConvertToLabelValue($scope.producerContactList, 'fullName', 'fullName');
                }
            }
            if (opts && opts.callback)
                opts.callback(NO_ERRORS);
        }
        else {
            if (opts && opts.callback)
                opts.callback(NO_ERRORS);
        }
    };

    $scope.findTeamAssignmentParty = function (opts, partyId, partyList) {
        var party = $rootScope.getRpmObjects('submission', partyId);
        if ($scope.producerConfiguration.teamAssignment == 'true') {
            // this logic is needed if you are viewing a submission that has an 'old' team assignment party saved.  You still want
            // to see who the party id
            if (party && party.getValue('gaiUserCode')) {
                // see if the current gai user code exists in the drop down list
                var partyFound = false;
                angular.forEach(partyList, function (theListParty) {
                    if (party.getValue('gaiUserCode') == theListParty.value) {
                        partyFound = true;
                    }
                });

                if (!partyFound) {
                    // if the party isn't in the list, find the person and add them to the list
                    async.series(
                        [
                            function (callback) {
                                Search.findPersonByHid(party.getValue('gaiUserCode'), function (result) {
                                    var data = RA.Service.handleServiceResult(result, $scope);
                                    callback(NO_ERRORS, data);
                                });
                            }
                        ],
                        function (err, results) {
                            if (results && results[0] && opts && opts.callback) {
                                var newPartyList = partyList;
                                var item = RA.UI.doConvertToLabelValue(results, function (dev) {
                                    return dev.lastName + ', ' + dev.firstName
                                }, 'hid');
                                //should only be one but playing it safe
                                angular.forEach(item, function (theItem) {
                                    newPartyList.push(theItem);
                                });
                                opts.callback(NO_ERRORS, newPartyList);
                            } else {
                                opts.callback(NO_ERRORS);
                            }
                        }
                    );
                }
                else {
                    // party found
                    if (opts.callback)
                        opts.callback(NO_ERRORS);
                }
            }
            else {
                // party is not populated
                if (opts.callback) {
                    opts.callback(NO_ERRORS);
                }
            }
        }
        else {
            if (opts.callback)
                opts.callback(NO_ERRORS);
        }
    };

    $scope.findProducerConfiguration = function (opts) {

        $scope.producerConfiguration = {};
        opts = opts || {};

        async.series(
            [
                function (callback) {
                    Presentation.findProducerConfiguration(function (result) {
                        var data = RA.Service.handleServiceResult(result, $scope);
                        callback(NO_ERRORS, data);
                    });
                }
            ],
            function (err, results) {
                var data = results[0];

                if (data) {
                    // configuration factors for producer, including producerSource (CRM/PRM), subAgency (String true/false),
                    // underwriter, businessDeveloper, csr
                    $scope.producerConfiguration = data;
                }

                if (opts.callback)
                    opts.callback(NO_ERRORS);
            }
        );

    };

    $scope.findAccountPolicyInfo = function (callback) {
        $scope.customerNumber = RA.Session.getCustomerNumber();

        async.series(
            [
                function (callback) {
                    Account.findAccountPolicies($scope.customerNumber, function (result) {
                        var data = RA.Service.handleServiceResult(result, $scope);
                        callback(NO_ERRORS, data);
                    });
                }
            ],
            function (err, results) {
                var data = results[0];

                if (data) {
                    $scope.accountRelation = data;
                    if (data.length > 0) {
                        $scope.accountSourceId = data[0].accountId;
                        $scope.foundAccountRelation = true;
                    }
                }

                if (callback)
                    callback(NO_ERRORS);
            }
        );
    };


    /**
     * Async call to get default disposition when creating a new submission disposition
     */
    $scope.findDefaultDisposition = function (callback) {

        Submission.findDefaultDisposition(RA.Controller.serialize($scope.submission), function (result) {
            $scope.disposition = RA.Service.handleServiceResult(result, $scope);
            var disposition = $scope.disposition;
            // we need to store the review date in a variable because we shouldn't set it until the user clicks
            // YES on Recapture next term
            if (disposition != null && disposition.dispositionTypeCode != null) {

                if (disposition.dispositionTypeCode == TRANSACTION_STATUS_DECLINED) {
                    $scope.disposition.declinedRecaptureIndicator = FALSE;
                    $scope.declinedReviewDate = disposition.recaptureReviewDate;
                    $("#declinedRecaptureReviewDate").val(EMPTY_STRING);
                } else if (disposition.dispositionTypeCode == TRANSACTION_STATUS_LOST) {
                    disposition.recaptureIndicator ? $scope.disposition.lostRecaptureIndicator = TRUE : $scope.disposition.lostRecaptureIndicator = FALSE;
                    $scope.lostReviewDate = disposition.recaptureReviewDate;

                    if (disposition.recaptureIndicator) {
                        $scope.disposition.lostRecaptureReviewDate = $scope.lostReviewDate;
                        $scope.disableRecapture = false;
                        if ($scope.lostReviewDate != null && $scope.lostReviewDate != EMPTY_STRING) {
                            $scope.disposition.recaptureReviewDate = RA.UI.doMakeDateMMDDYYYY($scope.lostReviewDate);
                        }
                    }
                    else {
                        $("#lostRecaptureReviewDate").val(EMPTY_STRING);
                    }
                } else if (disposition.dispositionTypeCode == TRANSACTION_STATUS_WITHDRAWN) {
                    $scope.disposition.withdrawnRecaptureIndicator = FALSE;
                    $scope.withdrawnReviewDate = disposition.recaptureReviewDate;
                    $("#withdrawnRecaptureReviewDate").val(EMPTY_STRING);
                }
                $scope.disposition.recaptureReviewDate = EMPTY_STRING;
            }
            $timeout(angular.noop);
            if (callback != undefined && callback != null)
                callback(null);
        });
    };

    $scope.doClearProducerResults = function () {
        $scope.producerList = [];
    };

    $scope.doConfirmProducerChange = function () {
        var subm = $scope.submission;
        var prospect = $rootScope.getRpmObjects('submission', 'prospectProducer');
        var location = prospect.getValue('places')[0];
        if ($scope.producerConfiguration.producerSource == PRODUCER_SOURCE_CRM) {
            if (!subm.producerCode && !subm.agencyName && !prospect.getValue('fullName')) {
                return true;
            }
            else {
                if (confirm(CHANGE_PRODUCER_TYPE_MESSAGE)) {
                    $scope.doRemoveCRMProducerInformation();
                    return true;
                } else {
                    return false;
                }
            }
        } else {
            if ($scope.doDetermineIfProducerFieldsHaveChanged()) {
                if (confirm(CHANGE_PRODUCER_TYPE_MESSAGE)) {
                    $scope.doProspectProducerSwitch(prospect, location);
                    return true;
                }
                else {
                    return false;
                }
            } else {
                $scope.doProspectProducerSwitch(prospect, location);
                return true;
            }
        }

    };

    $scope.doRemoveCRMProducerInformation = function () {
        $scope.submission.producerCode = EMPTY_STRING;
        $scope.submission.agencyName = EMPTY_STRING;
        $scope.producerStatus = EMPTY_STRING;
        $scope.submission.profitCenterFullName = EMPTY_STRING;
        $scope.submission.territoryFullName = EMPTY_STRING;
        $scope.submission.fieldFullName = EMPTY_STRING;

        var profitCenterParty = $rootScope.getRpmObjects('submission', 'profitCenter');
        var territoryParty = $rootScope.getRpmObjects('submission', 'territory');
        var fieldParty = $rootScope.getRpmObjects('submission', 'field');
        var prospectParty = $rootScope.getRpmObjects('submission', 'prospectProducer');
        var underwriterParty = $rootScope.getRpmObjects('submission', 'underwriter');
        var renewalUnderwriterParty = $rootScope.getRpmObjects('submission', 'renewalUnderwriter');
        var busDevParty = $rootScope.getRpmObjects('submission', 'businessDeveloper');
        var csrParty = $rootScope.getRpmObjects('submission', 'csr');
        var accManagerParty = $rootScope.getRpmObjects('submission', 'accountManager');
        var prodContactParty = $rootScope.getRpmObjects('submission', 'producerContact');
        if (prospectParty) prospectParty.getField('fullName').setValue(undefined);
        if (profitCenterParty) profitCenterParty.getField('fullName').setValue(undefined);
        if (territoryParty) territoryParty.getField('fullName').setValue(undefined);
        if (fieldParty) fieldParty.getField('fullName').setValue(undefined);
        if (underwriterParty) underwriterParty.getField('gaiUserCode').setValue(undefined);
        if (renewalUnderwriterParty) renewalUnderwriterParty.getField('gaiUserCode').setValue(undefined);
        if (busDevParty) busDevParty.getField('gaiUserCode').setValue(undefined);
        if (csrParty) csrParty.getField('gaiUserCode').setValue(undefined);
        if (accManagerParty) accManagerParty.getField('gaiUserCode').setValue(undefined);
        if (prodContactParty) prodContactParty.getField('fullName').setValue(undefined);

        if ($scope.producerConfiguration.teamAssignment == 'true') {
            $scope.underWriterList = [];
            $scope.renewalUnderWriterList = [];
            $scope.producerContactList = [];
            $scope.csrList = [];
            $scope.businessDeveloperList = [];
            $scope.accountManagerList = [];
        }

        $timeout(function () {
            $timeout(angular.noop);
        });
    };

    $scope.doCopyMoreNamedInsured = function (partyToCopy, e) {
        if (e != null) {
            e.preventDefault();    // to prevent the scrolling to the top
        }

        $scope.doLoadEmptyMNIParty(function (result) {
            var rpmSession = new Dynamis.RpmSession(RA.Service.handleServiceResult(result, $scope));
            $rootScope.rpmSessionMap['submission'] = $scope.submission.rpmSession = rpmSession;
            $timeout(function () {
                $rootScope.$broadcast('sessionChanged');
            });

            var id = rpmSession.namedObjects.roots[1];
            var rpmObject = rpmSession.getRpmObjectById(id);
            rpmObject.getField('legalEntity').setValue(partyToCopy.getValue('legalEntity'));
            rpmObject.getField('firstName').setValue(partyToCopy.getValue('firstName'));
            rpmObject.getField('middleInitial').setValue(partyToCopy.getValue('middleInitial'));
            rpmObject.getField('lastName').setValue(partyToCopy.getValue('lastName'));
            rpmObject.getField('fullName').setValue(partyToCopy.getValue('fullName'));
            rpmObject.getField('fullName2').setValue(partyToCopy.getValue('fullName2'));

            $timeout(function () {
                $rootScope.$broadcast('moreNamedLoaded', {'itemsToRefresh':[id]});
            });
        });
    };

    $scope.doDetermineIfProducerFieldsHaveChanged = function () {
        var submission = $scope.submission;
        var rpmSession = submission.rpmSession;
        if (submission.producerCode || submission.agencyName) return true;

        var profitCenterParty = $rootScope.getRpmObjects('submission', 'profitCenter');
        var territoryParty = $rootScope.getRpmObjects('submission', 'territory');
        var fieldParty = $rootScope.getRpmObjects('submission', 'field');

        if (profitCenterParty.getValue('fullName') ||
            (territoryParty.getValue('fullName') && !(NONE_OPTION == territoryParty.getValue('fullName'))) ||
            (fieldParty.getValue('fullName') && !(NONE_OPTION == fieldParty.getValue('fullName')))) {
            return true;
        }

        var prospectParty = $rootScope.getRpmObjects('submission', 'prospectProducer');
        var prospectContact = $rootScope.getRpmObjects('submission', 'prospectContact');
        var producerContact = $rootScope.getRpmObjects('submission', 'producerContact');
        if (prospectParty.getValue('fullName') || prospectContact.getValue('fullName') || producerContact.getValue('fullName')) return true;

        var location = prospectParty.getValue('places')[0];
        var fields = ['AddressLine1', 'AddressLine2', 'PostalCode', 'City', 'StateOrProvinceAbbreviation'];
        for (var i = 0; i < fields.length; i++) {
            if (location.getValue(fields[i]))
                return true;
        }
        return false;
    };

    $scope.numberOfRecords = function (list) {
        if (list != null && list.length > 1) return "Records";
        else return "Record";
    };

    /**
     * remove the input party from the more named insured party array
     * @param party as RpmObject
     * @param e as event
     */
    $scope.doDeleteMoreNamedInsured = function (party, e) {
        var i = 0;
        var messagesLength, messages;
        RA.UI.doClearMessages($scope);
        if (e != null) {
            e.preventDefault();        // to prevent the scrolling to the top
        }

        Submission.doDeleteMoreNamedInsuredWithReducedSession(RA.Session.getProductName(), $scope.submission, $scope.quote, party,true,SUBM_INFO, function (result) {
            messages = result.data['SubmissionController.doDeleteMoreNamedInsured'].messages['@items'];
            messagesLength = messages.length;
            if (messagesLength) {
                for (i; i < messagesLength; i++) {
                    $scope.validationMessages.push({
                        type: messages[i].type.value,
                        context: messages[i].context,
                        text: messages[i].text
                    });
                }
                $timeout(function () {
                    $rootScope.$broadcast('moreNamedError');
                });
                $scope.scrollTop();
            } else {

                var data = RA.Service.handleServiceResult(result, $scope);
                $rootScope.rpmSessionMap['submission'] = $scope.submission.rpmSession = new Dynamis.RpmSession(data['submissionRpmSession']);

                if((data['quoteRpmSession'] !== undefined)&&(data['quoteRpmSession'] !== null)) {
                    $rootScope.rpmSessionMap['quote'] = $scope.quote.rpmSession = $scope.quoteList[0] = new Dynamis.RpmSession(data['quoteRpmSession']);
                }
                $timeout(function () {
                    $rootScope.$broadcast('sessionChanged');
                });
                $timeout(function () {
                    $rootScope.$broadcast('subObjectLoaded');
                });
            }
        });
    };

    $scope.doRestoreRemoved = function (party, e) {
        if (e != null)
            e.preventDefault();        // to prevent the scrolling to the top

        var rpmSession = $scope.submission.rpmSession;
        var restoreMe = [party].concat(rpmSession.getRelBySource(party, undefined, Dynamis.ActivationStatus.INACTIVE))
            .concat(rpmSession.getRelByTarget(party, undefined, Dynamis.ActivationStatus.INACTIVE));
        rpmSession.restore(restoreMe);
        $rootScope.rpmSessionMap['submission'] = rpmSession;
        $timeout(function () {
            $rootScope.$broadcast('sessionChanged');
        });
        $timeout(function () {
            $rootScope.$broadcast('moreNamedLoaded', {'itemsToRefresh':[party.getId()]});
        });
    };

    /**
     * If the saved status is not a terminated status, and the new status is a disposition status, return true.
     */
    $scope.doDetermineDispositionSaveButton = function () {
        if ($scope.submission) {
            var newTransactionStatus = $scope.submission.transactionStatusRefCode;
            var savedTransactionStatus = $scope.savedSubmission.transactionStatus;

            return !RA.Controller.isTerminatedStatus(savedTransactionStatus) && RA.Controller.isDispositionStatus(newTransactionStatus);
        } else {
            return false;
        }
    };

    $scope.doChangeMoreNamedLegalType = function (mn) {
        if (mn.getValue('legalEntity') === 'IND') {
            mn.getField('fullName').setValue(undefined);
        }
        else {
            mn.getField('firstName').setValue(undefined);
            mn.getField('middleInitial').setValue(undefined);
            mn.getField('lastName').setValue(undefined);
        }
        $timeout(function () {
            $rootScope.$broadcast('moreNamedLoaded', {'itemsToRefresh':[mn.id]});
        })
    };


    /**
     * If source sytem is UD, trans type is either nbs or renew, and submission is in terminated status,
     * return true. This function is used for determining whether to disable policy fields.
     */
    $scope.doDeterminePolicyFields = function () {
        var sourceSystem = $scope.submission.sourceSystemRefCode;
        var transactionType = $scope.savedSubmission.transactionType;
        var transactionStatus = $scope.savedSubmission.transactionStatus;

        return ( sourceSystem != null && sourceSystem === SOURCE_SYSTEM_CUBE &&
        $scope.doDetermineIfTransactionTypeIsATypeToDisablePolicyFieldsForSourceSystemUD(transactionType) );
    };

    $scope.doDetermineIfTransactionTypeIsATypeToDisablePolicyFieldsForSourceSystemUD = function (transactionType) {
        return transactionType == TRANSACTION_TYPE_TEMPORARY_REINSTATEMENT ||
            transactionType == TRANSACTION_TYPE_ENDORSEMENT ||
            transactionType == TRANSACTION_TYPE_CANCELLATION ||
            transactionType == TRANSACTION_TYPE_REINSTATEMENT ||
            transactionType == TRANSACTION_TYPE_NON_RENEWAL ||
            transactionType == TRANSACTION_TYPE_REVERSE_NON_RENEWAL ||
            transactionType == TRANSACTION_TYPE_CANCEL_REASON_CHANGE ||
            transactionType == TRANSACTION_TYPE_NON_RENEWAL_REASON_CHANGE;

    };
    /**
     * If the status is either issued or bound, or the submission is agent bound, return true to indicate policy fields
     * required.
     */
    $scope.doDeterminePolicyFieldsRequired = function () {
        if ($scope.submission) {
            return RA.Controller.isIssuedBoundStatus($scope.submission.transactionStatusRefCode) ||
                $scope.submission.agentBoundIndicator;
        } else {
            return false;
        }
    };

    /**
     * Determine if the policy field should be disabled or not
     *
     */
    $scope.doDeterminePolicyFieldsDisabled = function () {
        // return true if the field should be disabled.
        // order of these checks is important
        if ($scope.viewOnlyMode) {
            $scope.disablePolicyInfo = true;
            return;
        }
        if ($scope.doDeterminePolicyFields()) {
            $scope.disablePolicyInfo = true;
            return;
        }

        if ($scope.foundSubmission) {
            $scope.disablePolicyInfo = false;

        } else {
            if ($scope.submission.agentBoundIndicator) {
                $scope.disablePolicyInfo = false;

            } else {
                $scope.disablePolicyInfo = true;

            }
        }
    };

    /**
     * Determine if Policy Outline box should be viewable or not
     */
    $scope.doDeterminePolicyOutlineBox = function () {
        var subm = $scope.submission;
        return subm && subm.submissionId;
    };

    /**
     * Return true to turn on update button if we have an existing submission and its status is not in a terminating status.
     */
    $scope.doDetermineUpdate = function () {
        var subm = $scope.submission;

        return subm != undefined && subm != null && subm.submissionId != 0
            && subm.submissionId != EMPTY_STRING && !RA.Controller.isTerminatedStatus();
    };
    $scope.doShowCustNo = function () {
        var subm = $scope.submission;
        return subm != undefined && subm != null && subm.endorsementTypeRefCode === "CUSTNBR" && !RA.Controller.isIssuedStatus($scope.submission.transactionStatusRefCode);
    };


    /**
     * TODO: Temporary only. Remove once WPI makes call to CUBE for OOS.
     */
    $scope.doShowExternalPASButtons = function () {
        var subm = $scope.submission;

        return subm != undefined && subm != null && subm.submissionId != 0
            && subm.submissionId != EMPTY_STRING && 'DUCK' === subm.sourceSystemRefCode;
    };

    /**
     * Return true to turn on the save button if the the submission has not been saved.
     */
    $scope.doDetermineSaveButton = function () {
        var subm = $scope.submission;

        return subm == undefined || subm == null || subm.submissionId == 0 || subm.submissionId == EMPTY_STRING;
    };

    $scope.doDetermineProductsExist = function () {
        var productsExist = false;

        var products = $scope.submission.products;

        if (products) {
            if (products.length > 1) {
                // this means for sure a products exist
                productsExist = true;
            } else if (products.length == 1) {
                // in this case we have to check and make sure their are actually products added.
                // on renewals .. the products may not be added yet
                if (products[0].rpmUiObjectSet && products[0].rpmUiObjectSet.length > 0) {
                    productsExist = true;
                }
            }
        }

        $scope.productsExist = productsExist;
    };

    $scope.doDetermineProductSelectionButtons = function () {
        var productSelectionButtons = [];

        if ($scope.doDetermineSaveButton()) {
            productSelectionButtons =
                [
                    {
                        "label": "OK",
                        "function": function () {
                            $scope.saveProductSelection(true);
                        },
                        "class": "btn btn-primary",
                        "id": "productsOkButton"
                    },
                    {
                        "label": "Save & Add Another",
                        "function": function () {
                            $scope.saveProductSelectionAddAnother();
                        },
                        "class": "btn",
                        "id": "productsSaveAndAddButton"
                    },
                    {
                        "label": "Cancel",
                        "function": function () {
                            $scope.cancelProductSelection();
                        },
                        "class": "btn",
                        "id": "productsCancelButton"
                    }
                ];
        } else {
            productSelectionButtons =
                [
                    {
                        "label": "OK",
                        "function": function () {
                            $scope.saveProductSelection(true);
                        },
                        "class": "btn btn-primary",
                        "id": "productsOkButton"
                    },
                    {
                        "label": "Save & Add Another",
                        "function": function () {
                            $scope.saveProductSelectionAddAnother();
                        },
                        "class": "btn",
                        "disabled": true,
                        "id": "productsSaveAndAddButton"
                    },
                    {
                        "label": "Cancel",
                        "function": function () {
                            $scope.cancelProductSelection();
                        },
                        "class": "btn",
                        "id": "productsCancelButton"
                    }
                ];
        }

        return productSelectionButtons;
    };


    /**
     * If the submission is in disposition or is issued and UD is not he source system, return true to turn on re-open button.
     */
    $scope.doDetermineReopenButton = function () {
        if ($scope.submission) {
            var transactionStatus = $scope.savedSubmission.transactionStatus;
            var issuingSystem = $scope.submission.sourceSystemRefCode;
            //isNonAudit is to check if the transaction type is Premium Audit
            var isNonAudit = $scope.submission.transactionTypeRefCode != TRANSACTION_TYPE_AUDIT;
            var isCancelHalf = $scope.submission.transactionTypeRefCode === 'CANC' && $scope.submission.totalTransPartCount > 1;
            // Added isRewriteHalfAndUD variable to check if the transaction withdrawn is rewrite part of cancel rewrite in UD
            var isRewriteHalfAndUD = $scope.submission.transactionSubTypeRefCode === 'RW' && issuingSystem == SOURCE_SYSTEM_CUBE;
            var isNonUdIssued = transactionStatus == TRANSACTION_STATUS_ISSUED && issuingSystem != null && issuingSystem !== SOURCE_SYSTEM_CUBE;
            var isUD = issuingSystem === SOURCE_SYSTEM_CUBE
            return $scope.reopenAccess && !isUD && isNonAudit && !isRewriteHalfAndUD && !isCancelHalf && (RA.Controller.isDispositionStatus(transactionStatus) || isNonUdIssued);
        } else {
            return false;
        }
    };

    /**
     * Generate a policy number triggered by the view.
     * @param e
     */
    $scope.doCheckGeneratePolicyNumber = function (e) {

        RA.UI.doClearMessages($scope);

        if (e != null)
            e.preventDefault();    // to prevent the required fields from highlighting on button click

        if ($scope.submission.transactionSubTypeDescription === "Rewrite") {
            if (confirm('You are about to generate a new policy number. Do you want to continue?')) {
                $scope.doGeneratePolicyNumber();
            }
        }
        else {
            $scope.doGeneratePolicyNumber();
        }
    };

    $scope.doGeneratePolicyNumber = function () {
        $rootScope.showPageLoading();
        async.series(
            {
                subm: function (callback) {
                    Submission.doGeneratePolicyNumber(RA.Controller.serialize($scope.submission), function (result) {
                        var data = RA.Service.handleServiceResult(result, $scope);
                        callback(null, data);
                    });
                }
            },
            function (err, result) {

                if(0 === $scope.validationMessages.length) {
                    $scope.submission.policyInfo.policyNumber = result.subm.policyInfo.policyNumber;
                    $scope.submission.policyInfo.policyMod = result.subm.policyInfo.policyMod;
                    $scope.submission.policyInfo.policyVersion = result.subm.policyInfo.policyVersion;
                } else {
                    $scope.scrollTop();
                }

                $rootScope.hidePageLoading();
            }
        );
    };
    /**
     * Generate customer number from a button on the view.
     * @param e
     */
    $scope.doCheckGenerateCustomerNumber = function (e) {

        RA.UI.doClearMessages($scope);

        if (e != null)
            e.preventDefault();    // to prevent the required fields from highlighting on button click

        if (confirm('You are about to generate a new Customer number. Do you want to continue?')) {
            $scope.doGenerateCustomerNumber();
        }
    };
    $scope.doGenerateCustomerNumber = function () {
        $rootScope.showPageLoading();
        $scope.submission.customerNumber = null;
            async.series(
            {
                custNo: function (callback) {
                    Submission.doGenerateCustomerNumber(RA.Controller.serialize($scope.submission),true, function (result) {
                        var data = RA.Service.handleServiceResult(result, $scope);
                        callback(null, data);
                    });
                }
            },
            function (err, result) {

                if(0 === $scope.validationMessages.length) {
                    $scope.submission.customerNumber = result.custNo;
                } else {
                    $scope.scrollTop();
                }
                $rootScope.hidePageLoading();
            }
        );
    };

    /**
     * Called by view when legal entity type is selected.
     */
    $scope.doLegalEntityCheck = function () {
        var field, legalEntity;
        var primaryInsured = $rootScope.getRpmObjects('submission', 'primaryInsured');
        if (primaryInsured) {
            legalEntity = primaryInsured.getValue('legalEntity');
            if (legalEntity === LEGAL_ENTITY_INDIVIDUAL) {
                primaryInsured.getField('fullName').setValue(undefined);
            }
            else {
                primaryInsured.getField('firstName').setValue(undefined);
                primaryInsured.getField('middleInitial').setValue(undefined);
                primaryInsured.getField('lastName').setValue(undefined);
            }
        }
    };

    $scope.doOpenAgencySiteAddressWindow = function (e) {
        if (e != null) {
            e.preventDefault();
        }
        var webSite = $scope.producerDetails.agencyWebsite;
        if (webSite == null || webSite == EMPTY_STRING) {
            alert(WEBSITE_ADDRESS_REQUIRED_MESSAGE);
            return "";
        } else {
            var webSite = $scope.producerDetails.agencyWebsite;
            webSite = webSite.replace(/^\s+|\s+|\s+$/g, "");
            if (webSite.indexOf("http://") < 0) {
                webSite = "http://" + webSite;
            }
            window.open(webSite, 'ExternalWebSite', 'dependent=yes menubar=yes, toolbar=yes, resizable=yes, scrollbars=yes location=yes');
        }
    };

    //TODO - I think we can do this from the view
    $scope.doOpenWebSiteAddressWindow = function (e) {
        if (e != null) {
            e.preventDefault();
        }
        var webSite = $rootScope.getRpmObjects('submission', 'primaryInsured').getValue('website');
        if (!webSite) {
            alert(WEBSITE_ADDRESS_REQUIRED_MESSAGE);
            return "";
        }
        else {
            webSite = webSite.replace(/^\s+|\s+|\s+$/g, "");
            if (webSite.indexOf("http://") < 0) {
                webSite = "http://" + webSite;
            }
            window.open(webSite, 'ExternalWebSite', 'dependent=yes menubar=yes, toolbar=yes, resizable=yes, scrollbars=yes location=yes');
        }
    };


    $scope.doPreviewDeclinationLetter = function () {
        var path = 'submission/pdf/doDeclinationLetterPreview?submissionId=' + $scope.submission.submissionId;
        var child = window.open('', 'DeclinationLetter', 'dependent=yes, menubar=no, toolbar=no, resizable=yes, scrollbars=yes, location=no');
        child.location.href = path;
        child.focus();
    };

    $scope.doProspectProducerSwitch = function (prospect, prospectLocation) {
        var profitCenter = $rootScope.getRpmObjects('submission', 'profitCenter');
        profitCenter.getField('fullName').setValue(undefined);
        var territoryParty = $rootScope.getRpmObjects('submission', 'territory');
        territoryParty.getField('fullName').setValue(undefined);
        var fieldParty = $rootScope.getRpmObjects('submission', 'field');
        fieldParty.getField('fullName').setValue(undefined);
        $scope.submission.profitCenterFullName = null;
        $scope.submission.territoryFullName = null;
        $scope.submission.fieldFullName = null;

        //TODO - move to raCommons
        if ($scope.foundProspectProducer.value == NO) {
            // clear out the producer fields
            $scope.submission.producerCode = EMPTY_STRING;
            $scope.submission.agencyName = EMPTY_STRING;
            $scope.producerStatus = EMPTY_STRING;

            var producerContact = $rootScope.getRpmObjects('submission', 'producerContact');
            producerContact.getField('fullName').setValue(undefined);
            $scope.updateTerritoryList(true);

            prospectLocation.getField('CountryISOCode').setValue(UNITED_STATES);
            $scope.updateProspectProducerStateProvinceList();
        }
        else {
            // clear out the prospectProducer party fields
            prospect.getField('fullName').setValue(undefined);
            prospectLocation.getField('CountryISOCode').setValue(undefined);
            prospectLocation.getField('AddressLine1').setValue(undefined);
            prospectLocation.getField('AddressLine2').setValue(undefined);
            prospectLocation.getField('PostalCode').setValue(undefined);
            prospectLocation.getField('City').setValue(undefined);
            prospectLocation.getField('StateOrProvinceAbbreviation').setValue(undefined);

            var prospect = $rootScope.getRpmObjects('submission', 'prospectProducer');
            prospect.getField('email').setValue(undefined);

            var prospectContact = $rootScope.getRpmObjects('submission', 'prospectContact');
            prospectContact.getField('fullName').setValue(undefined);
        }

    };

    $scope.doReopen = function () {
        RA.UI.doClearMessages($scope);
        $rootScope.showPageLoading();
        $scope.foundSubmission = false;
        $scope.enableMenu = false;
        $scope.disableSubmissionLHN = true;
        $scope.disableWorksheetLHN = true;
        $scope.disableMyFile = true;

        async.series(
            {
                reopenSubm: function (callback) {
                    Submission.doReopenSubmission(RA.Controller.serialize($scope.submission), function (result) {
                        var data = RA.Service.handleServiceResult(result, $scope);
                        callback(null, data);
                    });
                }
            },
            function (err, result) {
                var subm = result.reopenSubm;
                if (subm) {
                    $scope.submission = subm;
                    $scope.foundSubmission = true;
                    $scope.enableMenu = true;
                    RA.Session.addSubmissionId(subm.submissionId);
                    $scope.savedSubmission = RA.Controller.createSavedSubmission(subm);
                    $scope.createCharms();
                    $scope.viewOnlyMode = RA.UI.isRetroEndtOrNbsReversal($scope.submission); // was false originally
                    $scope.showCustNoButton = !RA.UI.isCustNo($scope.submission);
                    $scope.doEnableDisableMenuItems();
                    $scope.disableMyFile = false;
                    // Format Product Info after reopen completed
                    $scope.replaceSavedSymbol(CLASS_TO_SYMBOL);
                    ProductSelection.bootstrapScope($scope, $rootScope, $compile, $timeout, Submission, {
                        state: 'submission.policyInfo.policyStateCode',
                        date: 'submission.submissionEffectiveDate',
                        session: $scope.submission.rpmSession,
                        quoteList: $scope.quoteList,
                        hide: $scope.doDetermineSaveButton,
                        source: $scope.findSourceSystemDefaults,
                        useReducedQuoteSession: true,
                        screenName: SUBM_INFO
                    });


                    // if the submission is locked to someone, and the current user isn't that person, set it to view only
                    var lockedByHid = $scope.submission.lockedByHid;
                    if (lockedByHid == null || lockedByHid == EMPTY_STRING) {
                        $scope.viewOnlyMode = true;
                    } else {
                        if (lockedByHid != $scope.currentUser.createHid) {
                            $scope.viewOnlyMode = true;
                        }
                    }


                    // Refresh banner after Reopen
                    $timeout(function () {
                        $rootScope.$broadcast('submissionLoaded');
                        $rootScope.$broadcast('pageSubmitted');
                    });

                    $scope.doResetDispositionReviewDates();
                    $scope.doDeterminePolicyFieldsDisabled();
                }
                $scope.scrollTop();
                $rootScope.hidePageLoading();
            }
        );
    };

    $scope.doResetQuoteNeedByDate = function () {
        $scope.submission.needByDate = '';
    };

    $scope.doSearchDisposition = function (callback) {
        $scope.disposition = EMPTY_STRING;

        async.parallel(
            {
                disposition: function (callback) {
                    Submission.findSubmissionDisposition($scope.submission.submissionId, function (result) {
                        var data = RA.Service.handleServiceResult(result, $scope);
                        callback(null, data);
                    })
                }
            },
            function (err, results) {
                var disposition = results.disposition;
                $scope.disposition = disposition;

                if (disposition != null)
                    $scope.doSetDispositionData(TRUE);

                $timeout(angular.noop);

                if (callback)
                    callback(null);
            }
        );

    };

    $scope.doSetAgentStatus = function () {
        $scope.submission.agentBoundStatus = $scope.submission.agentBoundIndicator ? "1" : "0";
        $scope.submission.agentBoundPremium = null;
        $scope.submission.binderNumberCode = null;

        if ($scope.submission.agentBoundStatus == "1") {
            $scope.doAgentBoundPremiumFocus = true;
        }
    };

    $scope.doSetDefaultExpirationDate = function () {
        if (RA.UI.isNullorEmpty($scope.submission.submissionExpirationDate)) {
            var effDateString = $scope.submission.submissionEffectiveDate;

            if (effDateString != undefined && effDateString != null) {
                var expString = null;
                if (effDateString.length == 10) {
                    var effYear = effDateString.match(/\d{4}/);
                    expString = effDateString.replace(effYear, Number(effYear) + 1);
                    $scope.submission.submissionExpirationDate = expString;
                }
                else {
                    try {
                        var expDate = new Date(effDateString);
                        expDate.setFullYear((expDate.getFullYear() + 1));
                        expDate = expDate.toISOString();
                        $scope.submission.submissionExpirationDate = expString;
                    } catch (exception) {
                        // couldn't format effective date so can't prepopulate the expiration date
                    }
                }

            }
        }
    };

    /**
     * Called from view and within controller
     */
    $scope.doSetSelectedSymbols = function (opts) {
        opts = opts || {};

        var selectedCodes = $scope.getSelectedProducts();
        if (selectedCodes) {
            var symbols = [];
            var productList = $scope.productList;

            for (var sel in selectedCodes) {
                for (var key in productList) {
                    if (productList[key].productCode == selectedCodes[sel].productCode) {
                        var exists = false;
                        for (var v in symbols) {
                            if (symbols[v] == productList[key].policySymbol) {
                                exists = true;
                                break;
                            }
                        }

                        if (!exists) {
                            var newItem = {
                                "value": productList[key].policySymbol,
                                "label": $scope.productList[key].policySymbol
                            };
                            symbols.push(newItem);

                        }
                    }
                }
            }
            $scope.selectProductSymbolList = symbols.length > 0 ? symbols : $scope.defaultProductSymbolList;
        }

        if (opts.callback)
            opts.callback(NO_ERRORS);
    };

    $scope.warnings.effectiveDateWarning = [
        // return of true means do not display a warning.  A return of false means display the warning
        {
            "test": function (effectiveDate) {
                if (effectiveDate != null) {
                    if (RA.UI.isDateGreaterThan3MonthsAgo(effectiveDate, $scope.systemDate)) {
                        return false; // display the warning message
                    } else {
                        return true;
                    }
                } else {
                    return true;
                }
            },
            "warn": EFFECTIVE_DATE_3_MONTHS_IN_PAST_WARN
        },
        {
            "test": function (effectiveDate) {
                if (effectiveDate != null) {
                    if (RA.UI.isDateGreaterThan3MonthsInTheFuture(effectiveDate, $scope.systemDate)) {
                        if (RA.UI.isDateGreaterThan6MonthsInTheFuture(effectiveDate, $scope.systemDate)) {
                            return true; // this is handled by the hard-warning
                        } else {
                            return false; // display the warning message
                        }
                    } else {
                        return true;
                    }
                } else {
                    return true;
                }
            },
            "warn": EFFECTIVE_DATE_3_MONTHS_IN_FUTURE_WARN
        }
    ];

    $scope.warnings.expirationDateWarning = [
        // return of true means do not display a warning.  A return of false means display the warning
        {
            "test": function (expirationDate) {
                var effDateString = $scope.submission.submissionEffectiveDate;
                var expDateString = expirationDate;

                if (effDateString != undefined && effDateString != null && expDateString != undefined && expDateString != null) {
                    if (effDateString.length == 10 && expDateString.length == 10) {
                        var effDate = new Date(effDateString);
                        var expDate = new Date(expDateString);

                        if (effDate >= expDate) {
                            return true;        // don't display message, the error message will display
                        }

                        var thirtyYearsInTheFuture = new Date(effDateString);
                        thirtyYearsInTheFuture.setYear(thirtyYearsInTheFuture.getFullYear() + 30);

                        if (expDate >= thirtyYearsInTheFuture) {
                            return true;    // don't display message, the error message will display
                        }

                        var threeYearsInTheFuture = new Date(effDateString);
                        threeYearsInTheFuture.setYear(threeYearsInTheFuture.getFullYear() + 3);

                        if (expDate >= threeYearsInTheFuture) {
                            return false;         // display warning message
                        }
                    }
                }
                return true;    // don't display warning message
            },
            "warn": EXPIRATION_DATE_3_YEARS_IN_FUTURE_WARN
        }
    ];

    $scope.warnings.receivedDateWarning = [
        // return of true means do not display a warning.  A return of false means display the warning
        {
            "test": function (receivedDate) {
                return receivedDate !== null ? !RA.UI.isDateGreaterThan3MonthsAgo(receivedDate, $scope.systemDate) : true;
            },
            "warn": RECEIVED_DATE_3_MONTHS_IN_PAST_WARN
        }
    ];

    $scope.doValidateEffectiveDate = function () {
        if ($scope.viewOnlyMode != true) { // false or null
            var the3MonthMessageObject = {
                "type": MESSAGE_INFO,
                "context": "submissionEffectiveDate",
                "text": EFFECTIVE_DATE_3_MONTHS_IN_PAST_WARN
            };
            var theCUC18MonthMessageObject = {
                "type": MESSAGE_VALIDATION,
                "context": "submissionEffectiveDate",
                "text": EFFECTIVE_DATE_18_MONTHS_IN_PAST_CUC
            };
            var the6MonthMessageObject = {
                "type": MESSAGE_VALIDATION,
                "context": "submissionEffectiveDate",
                "text": EFFECTIVE_DATE_6_MONTHS_IN_FUTURE
            };
            var thePossibleMessages = [];
            thePossibleMessages.push(the3MonthMessageObject);
            thePossibleMessages.push(theCUC18MonthMessageObject);
            thePossibleMessages.push(the6MonthMessageObject);
            $scope.validationMessages = RA.UI.doClearSomeMessages($scope.validationMessages, thePossibleMessages);
            $scope.infoMessages = RA.UI.doClearSomeMessages($scope.infoMessages, thePossibleMessages);
            $("#submissionEffectiveDate").removeClass('gaig-warning');
            if (!$scope.infoMessages) {
                $scope.infoMessages = [];
            }


            if (RA.UI.isDateGreaterThan3MonthsAgo($scope.submission.submissionEffectiveDate, $scope.systemDate) &&
                ($scope.submission.transactionTypeRefCode !== TRANSACTION_TYPE_ENDORSEMENT && $scope.submission.transactionTypeRefCode !== TRANSACTION_TYPE_CANCELLATION
                && $scope.submission.transactionTypeRefCode !== TRANSACTION_TYPE_CANCEL_REASON_CHANGE && $scope.submission.transactionTypeRefCode !== TRANSACTION_TYPE_REINSTATEMENT
                && $scope.submission.transactionTypeRefCode !== TRANSACTION_TYPE_TEMPORARY_REINSTATEMENT && $scope.submission.transactionTypeRefCode !== TRANSACTION_TYPE_NON_RENEWAL
                && $scope.submission.transactionTypeRefCode !== TRANSACTION_TYPE_NON_RENEWAL_REASON_CHANGE && $scope.submission.transactionTypeRefCode !== TRANSACTION_TYPE_REVERSE_NON_RENEWAL
                && $scope.submission.transactionSubTypeRefCode !== TRANSACTION_TYPE_FDW_CONVERSION)
                && $scope.submission.continuousTillCancInd === false) {
                $scope.infoMessages.push(the3MonthMessageObject);
                $("#submissionEffectiveDate").addClass('gaig-warning');
                $scope.doSetDefaultExpirationDate();
                return false;
            }
            if ($scope.submission.continuousTillCancInd === true && RA.UI.isDateGreaterThan18MonthsAgo($scope.submission.submissionEffectiveDate, $scope.systemDate)
                && $scope.submission.transactionSubTypeRefCode !== TRANSACTION_TYPE_FDW_CONVERSION) {
                $scope.infoMessages.push(theCUC18MonthMessageObject);
                $("#submissionEffectiveDate").addClass('gaig-warning');
                return false;
            }
            if (RA.UI.isDateGreaterThan6MonthsInTheFuture($scope.submission.submissionEffectiveDate, $scope.systemDate)) {
                $scope.validationMessages.push(the6MonthMessageObject);
                $("#submissionEffectiveDate").addClass('gaig-error');
                $scope.submission.submissionExpirationDate = EMPTY_STRING;
                return false;
            }
            $scope.doSetDefaultExpirationDate();
        }
    };

    $scope.doValidateExpirationDate = function () {

        if ($scope.viewOnlyMode != true) {  // false or null
            var effDateString = $scope.submission.submissionEffectiveDate;
            var expDateString = $scope.submission.submissionExpirationDate;


            if (effDateString != undefined && effDateString != null && expDateString != undefined && expDateString != null) {
                if (effDateString.length == 10 && expDateString.length == 10) {
                    var effDate = new Date(effDateString);
                    var expDate = new Date(expDateString);
                    var theEffGreaterThanExpireObject = {
                        "type": MESSAGE_VALIDATION,
                        "context": "submissionExpirationDate",
                        "text": EXPIRATION_DATE_GREATER_EFFECTIVE_DATE
                    };
                    var theThirtyYearsInFutureObject = {
                        "type": MESSAGE_VALIDATION,
                        "context": "submissionExpirationDate",
                        "text": EXPIRATION_DATE_30_YEARS_IN_FUTURE
                    };
                    var thePossibleMessages = [];
                    thePossibleMessages.push(theEffGreaterThanExpireObject);
                    thePossibleMessages.push(theThirtyYearsInFutureObject);
                    $scope.validationMessages = RA.UI.doClearSomeMessages($scope.validationMessages, thePossibleMessages);
                    $("#submissionExpirationDate").removeClass('gaig-error');

                    if (effDate >= expDate) {
                        $scope.validationMessages.push(theEffGreaterThanExpireObject);
                        $("#submissionExpirationDate").addClass('gaig-error');
                        return false;
                    }

                    var thirtyYearsInTheFuture = new Date(effDateString);
                    thirtyYearsInTheFuture.setYear(thirtyYearsInTheFuture.getFullYear() + 30);

                    if (expDate >= thirtyYearsInTheFuture && $scope.submission.continuousTillCancInd != true) {
                        $scope.validationMessages.push(theThirtyYearsInFutureObject);
                        $("#submissionExpirationDate").addClass('gaig-error');
                        return false;
                    }
                }
            }
        }
    };

    $scope.doValidateQuoteNeedByDate = function () {
        if ($scope.viewOnlyMode != true) { // false or null
            var theDateGreaterThan6MonthsInFutureMessageObject = {
                "type": MESSAGE_VALIDATION,
                "context": "needByDate",
                "text": QUOTE_NEED_BY_DATE_6_MONTHS_IN_FUTURE
            };
            var thePossibleMessages = [];
            thePossibleMessages.push(theDateGreaterThan6MonthsInFutureMessageObject);
            $scope.validationMessages = RA.UI.doClearSomeMessages($scope.validationMessages, thePossibleMessages);
            $("#needByDate").removeClass('gaig-error');

            // Only perform edit if this is a New Submission not yet saved
            if ($scope.submission.createDate === null && RA.UI.isDateGreaterThan6MonthsInTheFuture($scope.submission.needByDate, $scope.systemDate)) {
                $scope.validationMessages.push(theDateGreaterThan6MonthsInFutureMessageObject);
                $("#needByDate").addClass('gaig-error');
                return false;
            }
        }
    };

    $scope.doValidateReceivedDate = function () {

        if ($scope.viewOnlyMode != true) { // false or null
            var theDateGreaterThan3MonthAgoMessageObject = {
                "type": MESSAGE_INFO,
                "context": "receivedDate",
                "text": RECEIVED_DATE_3_MONTHS_IN_PAST_WARN
            };
            var theDateGreaterThanTodayMessageObject = {
                "type": MESSAGE_VALIDATION,
                "context": "receivedDate",
                "text": RECEIVED_DATE_GREATER_THAN_TODAY
            };
            var thePossibleMessages = [];
            thePossibleMessages.push(theDateGreaterThan3MonthAgoMessageObject);
            thePossibleMessages.push(theDateGreaterThanTodayMessageObject);
            $scope.infoMessages = RA.UI.doClearSomeMessages($scope.infoMessages, thePossibleMessages);
            $scope.validationMessages = RA.UI.doClearSomeMessages($scope.validationMessages, thePossibleMessages);
            $("#receivedDate").removeClass('gaig-warning');
            $("#receivedDate").removeClass('gaig-error');
            if (!$scope.infoMessages) {
                $scope.infoMessages = [];
            }

            if (RA.UI.isDateGreaterThan3MonthsAgo($scope.submission.receivedDate, $scope.systemDate)) {
                $scope.infoMessages.push(theDateGreaterThan3MonthAgoMessageObject);
                $("#receivedDate").addClass('gaig-warning');
                return false;
            }
            if (RA.UI.isDateGreaterThanToday($scope.submission.receivedDate, $scope.systemDate)) {
                $scope.validationMessages.push(theDateGreaterThanTodayMessageObject);
                $("#receivedDate").addClass('gaig-error');
                return false;
            }
        }
    };

    $scope.doValidateReviewDate = function () {
        if ($scope.viewOnlyMode != true && $scope.isContinuousReviewDateEnabled) {
            var theDatePriorToEffectiveDateObject = {
                "type": MESSAGE_VALIDATION,
                "context": "continuousUntilCancelledReviewDate",
                "text": REVIEW_DATE_BEFORE_EFFECTIVE_DATE
            };
            var thePossibleMessages = [];
            thePossibleMessages.push(theDatePriorToEffectiveDateObject);
            $scope.validationMessages = RA.UI.doClearSomeMessages($scope.validationMessages, thePossibleMessages);
            $("#continuousUntilCancelledReviewDate").removeClass('gaig-error');

            if (!$scope.submission.continuousTillCancReviewDt || RA.UI.isDateBeforeDate($scope.submission.continuousTillCancReviewDt, $scope.submission.submissionEffectiveDate)) {
                $scope.validationMessages.push(theDatePriorToEffectiveDateObject);
                $("#continuousUntilCancelledReviewDate").addClass('gaig-error');
                return false;
            }
        }
        else if ($scope.viewOnlyMode != true && !$scope.isContinuousReviewDateEnabled && $("#continuousUntilCancelledReviewDate").hasClass('gaig-error')) {
            var theDatePriorToEffectiveDateObject = {
                "type": MESSAGE_VALIDATION,
                "context": "continuousUntilCancelledReviewDate",
                "text": REVIEW_DATE_BEFORE_EFFECTIVE_DATE
            };
            var thePossibleMessages = [];
            thePossibleMessages.push(theDatePriorToEffectiveDateObject);
            $scope.validationMessages = RA.UI.doClearSomeMessages($scope.validationMessages, thePossibleMessages);
            $("#continuousUntilCancelledReviewDate").removeClass('gaig-error');
        }
    };

    $scope.doValidateZipCode = function (countryCode, zipCodeToValidate) {
        var ret = false;
        if (UNITED_STATES == countryCode) {
            if (zipCodeToValidate != null && !isNaN(zipCodeToValidate)) {
                ret = true;
            }
        } else {
            ret = true;
        }
        return ret;
    };

    $scope.convertToCapitalCase = function convertToCapitalCase(word) {
        return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase();
    };

    $scope.isCancelOrRetro = function isCancelOrRetro(submissionObj) {
        // need to know cancel and retro endt's for showing & disabling MNI (special cases)
        if (submissionObj === null) {
            submissionObj = $scope.submission;
        }
        return ['CANC','CRC'].indexOf(submissionObj.transactionTypeRefCode) !== -1 || submissionObj.transactionSubTypeRefCode === 'RETRO' || submissionObj.transactionTypeRefCode === 'AUD' ;
    }

    $scope.findCityStateByPostalCode = function (partyToUpdate, opts, party, moreNamedListId) {
        opts = opts || {};
        if (partyToUpdate === PARTY_TYPE_INSURED) {
            opts.doFocus = true;
            opts.setCityList = function (list, loc, city) {
                $scope.insuredPartyCityList = list;
                loc.getField('City').setValue(city);
                $timeout(function () {
                    $scope.$apply();
                })
            };
            $scope.updatePartyAddressRPM($rootScope.getRpmObjects('submission', 'primaryInsured'), opts);
        }
        if (partyToUpdate === PARTY_TYPE_ALT_MAIL) {
            opts.setCityList = function (list, loc, city) {
                $scope.altMailPartyCityList = list;
                loc.getField('City').setValue(city);
                $timeout(function () {
                    $scope.$apply();
                })
            };
            $scope.updatePartyAddressRPM($rootScope.getRpmObjects('submission', 'alternateMailing'), opts);
        }
        if (partyToUpdate === PARTY_TYPE_PROSPECT_PRODUCER) {
            opts.setCityList = function (list, loc, city) {
                $scope.prospectProducerCityList = list;
                loc.getField('City').setValue(city);
                $timeout(function () {
                    $scope.$apply();
                })
            };
            $scope.updatePartyAddressRPM($rootScope.getRpmObjects('submission', 'prospectProducer'), opts);
        }
        if (partyToUpdate === PARTY_TYPE_MORE_NAMED_INSURED) {
            opts.setCityList = function (list, loc, city) {
                $scope.removeFromMoreNamedListOfCityList(moreNamedListId);
                $scope.moreNamedListOfCityList.push({
                    'label': moreNamedListId,
                    'value': list
                });
                loc.getField('City').setValue(city);
                $timeout(function () {
                    $scope.$apply();
                })
            };
            $scope.updatePartyAddressRPM(party, opts);
        }
    };

    $scope.removeFromMoreNamedListOfCityList = function removeFromMoreNamedListOfCityList(moreNamedListId) {
        for (var i = 0; i < $scope.moreNamedListOfCityList.length; i++) {
            if ($scope.moreNamedListOfCityList[i].label === moreNamedListId) {
                $scope.moreNamedListOfCityList.splice(i, 1);
                break;
            }
        }
    };

    $scope.getMoreNamedListOfCityList = function getMoreNamedListOfCityList(moreNamedListId) {
        for (var i = 0; i < $scope.moreNamedListOfCityList.length; i++) {
            if ($scope.moreNamedListOfCityList[i].label === moreNamedListId) {
                return $scope.moreNamedListOfCityList[i].value;
                break;
            }
        }
        return null;
    };

    $scope.getMoreNamedStateProvinceList = function getMoreNamedStateProvinceList(moreNamedListId) {
        if ($scope.moreNamedStateProvinceList) {
            return $scope.moreNamedStateProvinceList[moreNamedListId];
        }
        $scope.moreNamedStateProvinceList = [];
        return $scope.stateProvinceList;
    };

    $scope.getMoreNamedInsuredPostalLabel = function getMoreNamedInsuredPostalLabel(moreNamedListId)
    {
        if ($scope.moreNamedInsuredPostalLabel)
        {
            return $scope.moreNamedInsuredPostalLabel[moreNamedListId];
        }

        return "ZIP Code";
    }

    $scope.getMoreNamedInsuredStateLabel = function getmoreNamedInsuredStateLabel(moreNamedListId)
    {
        if ($scope.moreNamedInsuredStateLabel) {
            return $scope.moreNamedInsuredStateLabel[moreNamedListId];
        }

        return "State";
    }

    $scope.updatePartyAddressRPM = function updatePartyAddressRPM(party, opts) {
        var location = party.getValue('places')[0];
        var postalCode = location.getValue('PostalCode');
        if (!postalCode) {
            location.getField('City').setValue(EMPTY_STRING);
            location.getField('StateOrProvinceAbbreviation').setValue(EMPTY_STRING);
            if (opts.callback)
                opts.callback(NO_ERRORS);
            return;
        }

        if ($scope.doValidateZipCode(location.getValue('CountryISOCode'), postalCode)) {
            async.series(
                [
                    function (callback) {
                        Presentation.findCityStateByPostalCode(postalCode, function (result) {
                            var data = RA.Service.handleServiceResult(result, $scope);
                            callback(NO_ERRORS, data);
                        });
                    }
                ],
                function (err, results) {
                    var data = results[0];
                    var cityListResult;
                    var partyCity;
                    var existingPartyCity;

                    if (data != null && data.cityList && data.cityList.length > 0) {
                        cityListResult = RA.Controller.convertStringToValueUpperCaseLabelPairs(data.cityList);

                        //previously selected city
                        existingPartyCity = location.getValue('City');

                        //unset the prospect party city for now
                        location.getField('City').setValue(undefined);

                        //is there a previously selected city on the submission
                        //compare against the city list returned and make sure it remains the selected city
                        //if it is in the returned list
                        if (existingPartyCity) {
                            for (var i = 0; i < cityListResult.length; i++) {
                                if (cityListResult[i].value === existingPartyCity) {
                                    partyCity = cityListResult[i].value;
                                    break;
                                }
                            }
                        }

                        if (!partyCity)
                            partyCity = (data.preferredCity || data.cityList[0]).toUpperCase();

                        location.getField('City').setValue(partyCity);
                        location.getField('StateOrProvinceAbbreviation').setValue(data.addressInfoList[0].state);
                    }
                    else {
                        location.getField('City').setValue(EMPTY_STRING);
                        location.getField('StateOrProvinceAbbreviation').setValue(EMPTY_STRING);
                    }

                    if (opts.setCityList)
                        opts.setCityList(cityListResult, location, partyCity);

                    if (opts.doFocus) {
                        $timeout(function () {
                            var citySelect = $("#insuredPartyCity").find('.select2-focusser');
                            citySelect.focus();
                        }, 300);
                    }

                    if (opts.callback)
                        opts.callback(NO_ERRORS, cityListResult);
                }
            );

        }
        else {
            alert(ZIPCODE_MUST_BE_NUMERIC);
            location.getField('City').setValue(EMPTY_STRING);
            location.getField('StateOrProvinceAbbreviation').setValue(EMPTY_STRING);
        }
    };

    $scope.doToggleContinuousUntilCancelled = function () {
        if ($scope.doShowContinuousCancel()) {
            if ($scope.submission.continuousTillCancInd === TRUE || $scope.submission.continuousTillCancInd === true) {
                setDataForContinuousUntilCancelledFields(CONTINUOUS_DATA_TOGGLE_OFF);
                $scope.isContinuousEnable = true;
                $scope.doValidateReviewDate();
            }
            else {
                setDataForContinuousUntilCancelledFields(CONTINUOUS_DATA_TOGGLE_ON);
            }
        }
    };

    $scope.doShowContinuousCancel = function () {
        var showContinuousCancel = false;
        if ($scope.submission && $scope.submission.submissionId && $scope.continuousUntilCancelledOption != CONTINUOUS_NOT_ELIGIBLE) {
            showContinuousCancel = true;
        }
        return showContinuousCancel;
    };

    $scope.doToggleContinuousUntilCancelledOnChange = function () {
        if ($scope.doShowContinuousCancel()) {
            if ($scope.submission.continuousTillCancInd === TRUE || $scope.submission.continuousTillCancInd === true) {
                setDataForContinuousUntilCancelledFields(CONTINUOUS_DATA_TOGGLE_ON);
            }
        }
    };

    $scope.doShowFleetIndicator = function () {
        if ($scope.quoteList.length === 0) return false;

        var quote = $rootScope.getRpmObjects('quote', 'policy.Policy');
        if (!quote) return false;

        var fleetShow = quote.getField('fleetIndicator').traits['v:show'];
        return $scope.submission && $scope.submission.submissionId && fleetShow;
    };

    $scope.findProducerInformation = function (checkLength, opts) {
        opts = opts || {};

        var submission = $scope.submission;
        var producer = submission.producerCode;

        //checkLength==false only when initially loading a previously saved submission - fullName is not needed in this case.
        var fullName = checkLength ? submission.agencyName || EMPTY_STRING : EMPTY_STRING;
        var producerSearchType = $scope.foundProspectProducer.value == YES ? PRODUCER_PROSPECT : PRODUCER_APPOINTED;
        //appointed producer codes have length 6, prospect have length 9 including the hyphen
        var correctLength = producerSearchType == PRODUCER_APPOINTED ? 6 : 9;
        var producerLookUpBu = $scope.producerBusinessUnit;

        if (producer !== null &&
            ((producer.length === correctLength) || !checkLength) &&
            ((fullName === EMPTY_STRING || fullName == null) || !checkLength)) {
            async.series(
                [
                    function (callback) {
                        Search.findProducersListWithBu(fullName, $scope.submission.producerCode, EMPTY_STRING, EMPTY_STRING, producerSearchType, producerLookUpBu, function (result) {
                            var data = RA.Service.handleServiceResult(result, $scope);
                            callback(NO_ERRORS, data);
                        }, opts);
                    }
                ],
                function (err, results) {
                    $scope.producerRawData = results[0];
                    var agent = $scope.producerRawData[0];

                    if (agent) {
                        $scope.submission.profitCenterFullName = agent.profitCenterCodeNameDisplay;
                        $scope.submission.territoryFullName = agent.territoryCodeNameDisplay;
                        $scope.submission.fieldFullName = agent.fieldCodeNameDisplay;

                        if (producerSearchType == PRODUCER_PROSPECT) {
                            var prospectParty = $rootScope.getRpmObjects('submission', 'prospectProducer');
                            prospectParty.getField('fullName').setValue(agent.name);
                            $scope.producerStatus = agent.producerStatus;
                        }
                        else {
                            submission.agencyName = agent.name;
                            $scope.producerStatus = agent.producerStatus;
                            $scope.savedSubmission.agencyName = agent.name;
                        }

                        if (checkLength) {
                            $scope.determineTeamAssignmentLists(null, checkLength ? true : false, false);
                        }
                        $scope.determineProducerContactList(null, checkLength ? true : false, $scope.submission.producerCode);
                        if (!checkLength) {
                            $scope.setProducerContactParties(null);
                        }
                    }
                    else {
                        submission.agencyName = EMPTY_STRING;
                        $scope.submission.profitCenterFullName = null;
                        $scope.submission.territoryFullName = null;
                        $scope.submission.fieldFullName = null;
                    }

                    if (opts.callback)
                        opts.callback(NO_ERRORS);

                    $timeout(angular.noop);

                }
            );
        }
        else {
            if (opts.callback)
                opts.callback(NO_ERRORS);
        }
    };
    // checkes if Producer is changed
    $scope.isProducerChanged = false;
    $scope.producerChangedFlag = function producerChangedFlag(isProdChanged) {
        if (isProdChanged) {
            $scope.isProducerChanged = true;
            $scope.clearTeamAssignmentsAndLists();
        } else {
            $scope.isProducerChanged = false;
        }
        return $scope.isProducerChanged;
    };

    // removes output preference data from database if the producer is changed for the current submission
    $scope.resetOutputPreferenceData = function resetOutputPreferenceData() {
        var submission = $rootScope.getRpmObjects('submission', 'Submission');
        if (submission) {
            if (submission.hasField('PrintedOutputDestination')) {
                submission.getField('PrintedOutputDestination').setValue(undefined);
            }

            if (submission.hasField('InsuredCopyMethod')) {
                submission.getField('InsuredCopyMethod').setValue(undefined);
            }
        }
    };

    $scope.findProducerInformationSubAgent = function (checkLength, opts) {

        var submission = $scope.submission;
        var submissionRpm = $rootScope.getRpmObjects('submission', 'Submission');
        var subAgentProducerCode = submissionRpm.getValue('subAgent');
        var fullName = submission.subAgentFullName;
        var producerSearchType = PRODUCER_SUBAGENCY;
        var producerLookupBu = $scope.producerBusinessUnit;

        opts = opts || {};

        if (subAgentProducerCode && (6 === subAgentProducerCode.length || 9 === subAgentProducerCode.length ) && ((fullName === EMPTY_STRING || fullName === null) || !checkLength)) {
            //producer full name is sometimes abbreviated for print(preferred name)(limit 40 chars)
            //So if producer code is 6 digits, fullname is assigned to null.
            if (subAgentProducerCode != null && (subAgentProducerCode.length == 6 || subAgentProducerCode.length == 9)) {
                fullName = EMPTY_STRING;
            }

            async.series(
                [
                    function (callback) {
                        Search.findProducersListWithBu(fullName, subAgentProducerCode, EMPTY_STRING, EMPTY_STRING, producerSearchType, producerLookupBu, function (result) {
                            var data = RA.Service.handleServiceResult(result, $scope);
                            callback(NO_ERRORS, data);
                        }, opts);
                    }
                ],
                function (err, results) {
                    var subAgent = results[0][0];
                    if (subAgent) {
                        submission.subAgentFullName = subAgent.name;
                        $scope.submission.subAgentStatus = subAgent.producerStatus;
                        $scope.savedSubmission.subAgencyName = subAgent.name;
                    }
                    else {
                        submission.subAgentFullName = EMPTY_STRING;
                        $scope.submission.subAgentStatus = EMPTY_STRING;
                    }

                    if (opts.callback)
                        opts.callback(NO_ERRORS);

                    $timeout(angular.noop);
                }
            );
        } else {
            if (opts.callback)
                opts.callback(NO_ERRORS);
        }
    };

    $scope.workActivity = function (submissionId) {

        $rootScope.showPageLoading();
        Activity.doWorkActivity(submissionId, function (result) {
            if (result.data['ActivityController.doWorkActivity'].status !== false) {
                RA.Session.removeViewOnlyMode();
                RA.Session.addCurrentUserHid($scope.currentUser.createHid);
                RA.Session.addSubmissionIdSearch(submissionId);
                RA.Session.addSessionMode(SESSION_SUBMISSION_MODE);
                $scope.applyLayout('submission');
            }
            else {
                RA.UI.doClearMessages($scope);
                RA.Service.handleServiceResult(result, $scope);
                $rootScope.hidePageLoading();
            }
            $scope.$apply();
        });

    };

    $scope.saveSubmission = function (work) {
        $rootScope.showPageLoading();
        RA.UI.doClearMessages($scope);

        $scope.doRemoveAllSessionVariables();
        $scope.foundSubmission = false;
        $scope.enableMenu = false;
        $scope.disableSubmissionLHN = true;
        $scope.disableWorksheetLHN = true;
        $scope.disableMyFile = true;
        $scope.insuredPartyAddressOverrideInd = false;
        $scope.alternatePartyAddressOverrideInd = false;

        // verify agent bound premiums
        var agentBoundPremium = $scope.submission.agentBoundPremium;
        if (isNaN(agentBoundPremium)) {
            alert(AGENT_BOUND_PREMIUM);
            $rootScope.hidePageLoading();
            $scope.scrollTop();
            return false;
        }
        // if policy number is empty, ensure policyNumber set to null
        if ($scope.submission.policyInfo.policyNumber == EMPTY_STRING)
            $scope.submission.policyInfo.policyNumber = null;

        // verify dates
        if (!$scope.doValidateDatesOnSave()) {
            $rootScope.hidePageLoading();
            return false;
        }

        for (var i = 0; i < $scope.quoteList.length; i++) {
            $scope.quoteList[i].getNamedObjects().policyPremiums = $scope.policyPremiums;
        }

        if ($scope.quoteList.length === 0) {
            $scope.validationMessages = $scope.validationMessages || [];
            $scope.validationMessages.push({
                type: MESSAGE_VALIDATION,
                "context": "productSelectionLabel",
                text: 'At least one product must be selected.'
            });
            $rootScope.hidePageLoading();
            return false;
        }

        $scope.validateTaxonomyCodes();

        RA.UI.consoleTime('saveSubmission');
        Submission.saveSubmissionAndQuotes($scope.submission, $scope.quoteList, SUBM_INFO, function (result) {
            var data = RA.Service.handleServiceResult(result, $scope);

            if (data && data === TIMEOUT) {
                $rootScope.hidePageLoading();
                $scope.isTimeoutOpen = true;
            }
            else {
                var status = result.data['SubmissionController.saveSubmissionAndQuote'].status;
                var submission = data.submission;
                $scope.submission = submission;
                $scope.rpmSession = submission.rpmSession;
                $rootScope.rpmSessionMap['submission'] = submission.rpmSession;
                $rootScope.$broadcast('sessionChanged');
                var quote;

                if (status) {
                    quote = data.quote;
                    quote.rpmSession.namedObjects.quoteNum = 1;
                    $scope.quoteList = [quote.rpmSession];

                    $scope.findSourceSystemDefaults();

                    if (submission.rpmSession) {
                        $scope.rpmSession = submission.rpmSession;
                    }

                    $scope.findRelatedPolicies();

                    var subId = submission.submissionId;

                    if (subId != null && subId != "0") {
                        $scope.foundSubmission = true;
                        $scope.enableMenu = true;
                        $scope.disableMyFile = false;
                        $scope.doEnableDisableMenuItems();
                    }

                    $scope.doSetSessionParameters();
                    $scope.savedSubmission = RA.Controller.createSavedSubmission(submission);
                    $scope.createCharms();
                    $scope.doDetermineDisplayHideAddressOverrideIndicator();

                    var isIssued = RA.Controller.isIssuedStatus(submission.transactionStatusRefCode);

                    $scope.viewOnlyMode = isIssued || RA.UI.isRetroEndtOrNbsReversal($scope.savedSubmission);

                    // if the submission is locked to someone, and the current user isn't that person, set it to view only
                    var lockedByHid = submission.lockedByHid;
                    if (lockedByHid == null || lockedByHid == EMPTY_STRING) {
                        $scope.viewOnlyMode = true;
                    } else {
                        if (lockedByHid != $scope.currentUser.createHid) {
                            $scope.viewOnlyMode = true;
                        }
                    }

                    $scope.doDeterminePolicyFieldsDisabled();

                    // reset the LHN
                    $timeout(function () {
                        $rootScope.$broadcast('submissionSaved');
                    });

                    // Async Calls to Determine whether notes exist for this submission (If Notes exist, populate Icon in Left Hand Nav)
                    async.auto(
                        {
                            // Fetch Account Information from ACCOUNT_RELATION Table
                            findAccountPolicyInfo: function (callback) {
                                $scope.findAccountPolicyInfo(callback);
                            },
                            determineNotesExist: ['findAccountPolicyInfo', function (callback) {
                                $scope.doDetermineNotesExist({'callback': callback});
                            }],
                            afterNotesAsyncMethodCalls: ['determineNotesExist', function (callback) {
                                if (!work) {
                                    // Don't hide page loading yet if we're going to work the submission too
                                    $rootScope.hidePageLoading();
                                }
                                $scope.scrollTop();
                            }]
                        });
                    snapshots[SNAP_SUBMISSION] = RA.UI.takeSnapshot(submission);
                    RA.Session.addViewOnlyMode(YES);
                }
                $scope.setWholesaleRetailOption();
                $scope.doDeterminePolicyFieldsDisabled();
                if (!status) {
                    $scope.doDetermineAddressOverrides(result.data['SubmissionController.saveSubmissionAndQuote'].messages);
                    $rootScope.hidePageLoading();
                    $scope.scrollTop();
                }

                $scope.replaceSavedSymbol(CLASS_TO_SYMBOL);
                ProductSelection.bootstrapScope($scope, $rootScope, $compile, $timeout, Submission, {
                    state: 'submission.policyInfo.policyStateCode',
                    date: 'submission.submissionEffectiveDate',
                    session: $scope.submission.rpmSession,
                    quoteList: $scope.quoteList,
                    hide: $scope.doDetermineSaveButton,
                    source: $scope.findSourceSystemDefaults,
                    useReducedQuoteSession: true,
                    screenName: SUBM_INFO
                });
                $scope.findProducerInformationSubAgent(false);

                if (status && work) {
                    // Clear out any existing messages
                    removeSessionItem(SESSION_SUBMISSION_MESSAGES);
                    var submMessages = [];

                    // Add messages to be displayed when the submission page reloads in work mode
                    var existingSaveMessages = result.data["SubmissionController.saveSubmissionAndQuote"].messages;
                    var numSubmissions = 0;
                    for (var i = 0; i < existingSaveMessages.length; i++) {
                        if (existingSaveMessages[i].text.indexOf('saved successfully.') !== -1) {
                            numSubmissions++;
                        }
                        submMessages.push({
                            type: existingSaveMessages[i].type.value,
                            "context": existingSaveMessages[i].context,
                            text: existingSaveMessages[i].text
                        });
                    }
                    if (numSubmissions > 1) {
                        submMessages.push({
                            type: MESSAGE_SUCCESS,
                            "context": "",
                            text: "Multiple products were selected. The Primary Submission is displayed: " + submission.submissionId
                        });
                    }

                    var assignToName = submission.assignedToHid;
                    for (var i = 0; i < $scope.assignToList.length; i++) {
                        var item = $scope.assignToList[i];
                        if (item.hid === submission.assignedToHid) {
                            assignToName = item.firstName + ' ' + item.lastName;
                            break;
                        }
                    }

                    if (submission.assignedToHid !== submission.createHid) {
                        submMessages.push({
                            type: MESSAGE_INFO,
                            "context": "",
                            text: "Warning: Submission is no longer assigned to " + assignToName + "."
                        });
                    }

                    setSessionItem(SESSION_SUBMISSION_MESSAGES, JSON.stringify(submMessages));

                    // Now work the primary submission (this contains the primary Submission ID (No need to look through the product hierarchy again)
                    $scope.workActivity(submission.submissionId);
                }

                $timeout(function () {
                    $rootScope.$broadcast('pageStateChanged');
                });
            }
        });
        RA.UI.consoleTimeEnd('saveSubmission');

    };

    $scope.replaceSavedSymbol = function replaceSavedSymbol(direction) {
        if ($scope.available.length === 0) {
            var rpmSession = $scope.submission.rpmSession;
            var rpmObjects = rpmSession.getRpmObjects();

            if (!rpmObjects || Object.keys(rpmObjects).length == 0)
                return;

            for (var v in rpmObjects) {

                var obj = rpmObjects[v];
                if (obj.getRpmClass().getName().indexOf('symbol.') === 0) {
                    $scope.available.push(obj);
                }
            }
        }
    };

    $scope.saveSubmissionDisposition = function () {
        RA.UI.doClearMessages($scope);
        $rootScope.showPageLoading();

        $scope.disposition.recaptureComments = $('#withdrawnRecaptureComments').val();
        $scope.disposition.dispositionComments = $('#withdrawnComments').val();
        var disposition = $scope.disposition;
        var submission = $scope.submission;

        disposition.letterIndicator = disposition.letterIndicator == 1 ? true : false;
        var dispositionType = disposition.dispositionTypeCode;
        var indicatorToUse = "";

        if (dispositionType == TRANSACTION_STATUS_DECLINED) {
            indicatorToUse = $scope.disposition.declinedRecaptureIndicator;
            $scope.disposition.recaptureReviewDate = RA.UI.doMakeDateMMDDYYYY($scope.declinedReviewDate);
        } else if (dispositionType == TRANSACTION_STATUS_LOST) {
            indicatorToUse = $scope.disposition.lostRecaptureIndicator;
            $scope.disposition.recaptureReviewDate = RA.UI.doMakeDateMMDDYYYY($scope.lostReviewDate);
        } else {
            indicatorToUse = $scope.disposition.withdrawnRecaptureIndicator;
            $scope.disposition.recaptureReviewDate = RA.UI.doMakeDateMMDDYYYY($scope.withdrawnReviewDate);
        }
        $scope.disposition.recaptureIndicator = indicatorToUse == TRUE ? true : false;

        if ($scope.disposition.recaptureReviewDate == EMPTY_STRING) {
            $scope.disposition.recaptureReviewDate = null;
        }

        // verify agent bound premiums
        var agentBoundPremium = $scope.submission.agentBoundPremium;
        if (isNaN(agentBoundPremium)) {
            alert(AGENT_BOUND_PREMIUM);
            $rootScope.hidePageLoading();
            $scope.scrollTop();
            return false;
        }

        // verify dates
        if (!$scope.doValidateDatesOnSave()) {
            $rootScope.hidePageLoading();
            return false;
        }

        $scope.policyPremiums['@type'] = 'java.util.LinkedHashMap';
        for (var i = 0; i < $scope.quoteList.length; i++) {
            $scope.quoteList[i].getNamedObjects().policyPremiums = $scope.policyPremiums;
        }

        $scope.validateTaxonomyCodes();
        $scope.replaceSavedSymbol(SYMBOL_TO_CLASS);
        var submissionDispositionDto = {
            '@type': 'com.gaic.bue.uwd.ra.common.dto.submission.SubmissionDispositionDto',
            "submission": submission,
            "disposition": disposition
        };

        async.series(
            {
                submissionDisposition: function (callback) {
                    Submission.saveSubmissionDisposition({
                        dto: submissionDispositionDto,
                        quotes: $scope.quoteList,
                        screenName: SUBM_INFO
                    }, function (result) {
                        var data = RA.Service.handleServiceResult(result, $scope);
                        if (result.data['SubmissionController.saveSubmissionDisposition'].status === false) {
                            $scope.dispStatus = false;
                            callback("error", data);
                        }
                        else {
                            $scope.dispStatus = true;
                            callback(null, data);
                        }
                    });
                },
                submission: function (callback) {
                    Submission.findSubmission($scope.submission.submissionId, function (result) {
                        var data = RA.Service.handleServiceResult(result, $scope);
                        callback(null, data);
                    });
                }
            },
            function (err, result) {
                if (result.submissionDisposition != null) {
                    $scope.disposition = result.submissionDisposition.disposition;
                    if ($scope.disposition) {
                        $scope.doSetDispositionData(TRUE);
                    }
                }


                if (result.submission != null && $scope.dispStatus) {
                    $scope.submission = result.submission;
                    $scope.findRelatedPolicies();

                    $scope.savedSubmission = RA.Controller.createSavedSubmission($scope.submission);
                    $scope.createCharms();
                    $scope.viewOnlyMode = true;
                    $scope.doDeterminePolicyFieldsDisabled();
                    $scope.setWholesaleRetailOption();
                }
                // Refresh banner after submission Disposition save
                $timeout(function () {
                    $rootScope.$broadcast('submissionLoaded');
                    $rootScope.$broadcast('pageSubmitted');
                });
                // format product info after Disposition completed successfully
                $scope.replaceSavedSymbol(CLASS_TO_SYMBOL);
                ProductSelection.bootstrapScope($scope, $rootScope, $compile, $timeout, Submission, {
                    state: 'submission.policyInfo.policyStateCode',
                    date: 'submission.submissionEffectiveDate',
                    session: $scope.submission.rpmSession,
                    quoteList: $scope.quoteList,
                    hide: $scope.doDetermineSaveButton,
                    source: $scope.findSourceSystemDefaults,
                    useReducedQuoteSession: true,
                    screenName: SUBM_INFO
                });


                $rootScope.hidePageLoading();
                $scope.scrollTop();
            }
        );

    };

    $scope.setWholesaleRetailOption = function setWholesaleRetailOption() {
        var wholesaleRetail = $scope.submission.wholesaleRetailRefCode;
        if (RA.UI.isNullorEmpty(wholesaleRetail) || ('--' === wholesaleRetail)) {
            $scope.submission.wholesaleRetailRefCode = 'none';
        }
    };

    $scope.selectAgencyFromList = function (event, producerCode, agent, profitCenter, territory, field, producerStatus) {
        if (event != null) {
            event.preventDefault();    // prevents IE from executing twice
        }

        var submission = $scope.submission;
        var isSubAgency = $scope.isSubAgency || false;

        // different paths must be taken in you are consuming CRM or not.  If non-crm, "apply" the selection to the submission
        // if you are CRM, just populate the data and don't "apply" it until the "DONE" or "CANCEL" button is pressed.
        if ($scope.producerConfiguration.producerSource == PRODUCER_SOURCE_CRM) {
            if ($scope.foundSearchForProdType.value == 'subAgency') {
                $scope.producerLookupModal.selectedSubAgentProducerCode = producerCode;
                $scope.producerLookupModal.selectedSubAgent = agent;
                $scope.producerLookupModal.selectedSubAgentProfitCenter = profitCenter;
                $scope.producerLookupModal.selectedSubAgentTerritory = territory;
                $scope.producerLookupModal.selectedSubAgentField = field;
                $scope.producerLookupModal.selectedSubAgentStatus = producerStatus;
            }
            else {
                $scope.producerLookupModal.selectedProducerCode = producerCode;
                $scope.foundCRMProducerCode.value = producerCode;
                $scope.producerLookupModal.selectedProducer = agent;
                $scope.producerLookupModal.selectedProducerProfitCenter = profitCenter;
                $scope.producerLookupModal.selectedProducerTerritory = territory;
                $scope.producerLookupModal.selectedProducerField = field;
                $scope.producerLookupModal.selectedProducerStatus = producerStatus;
                $scope.producerLookupModal.selectedProducerPick = $scope.foundCRMProspectProducer.value;
            }
        }
        else {
            // non-crm
            if ($scope.foundSearchForProdType.value == 'subAgency') {
                var submissionRpm = $rootScope.getRpmObjects('submission', 'Submission');
                submissionRpm.getField('subAgent').setValue(producerCode);
                submission.subAgentFullName = agent;
                submission.subAgentStatus = producerStatus;
            } else {
                submission.producerCode = producerCode;
                submission.agencyName = agent;
                submission.profitCenterFullName = profitCenter;
                submission.territoryFullName = territory;
                submission.fieldFullName = field;
                $scope.producerStatus = producerStatus;
            }
            $scope.determineTeamAssignmentLists(null, true, true);
        }

        if ($scope.producerConfiguration.producerSource !== PRODUCER_SOURCE_CRM || $scope.producerConfiguration.subAgency !== "true") {
            $scope.toggleAgencyLookupOpen(isSubAgency);
        }
    };

    $scope.tabToBinder = function () {
        if ($scope.submission.agentBoundPremium == EMPTY_STRING) {
            $scope.submission.agentBoundPremium = null;
        } else {
            var boundPrem = $scope.submission.agentBoundPremium;
            $scope.submission.agentBoundPremium = null;
        }
        $("#binderNumber").focus();
        $scope.submission.agentBoundPremium = boundPrem;
    };

    $scope.updateAssignedTo = function () {
        if ($scope.submission && $scope.submission.rpmSession) {
            var party = $rootScope.getRpmObjects('submission', 'underwriter');
            var underwriterHid = party.getValue('gaiUserCode');
            var assignedToHid = $scope.submission.assignedToHid;
            if (underwriterHid && !assignedToHid) {
                $scope.submission.assignedToHid = underwriterHid;
            }
        }
    };


    $scope.updateDispositionStatus = function (dispositionType) {

        if (dispositionType == DISPOSITION_DECLINED) {
            if ($scope.disposition.declinedRecaptureIndicator == TRUE) {
                $scope.disposition.declinedRecaptureReviewDate = null;
                $scope.disposition.recaptureComments = EMPTY_STRING;
                $("#declinedRecaptureReviewDate").val(EMPTY_STRING);
                $scope.disposition.recaptureReviewDate = null;
                $scope.disableRecapture = true;
            } else {
                $scope.disposition.declinedRecaptureReviewDate = $scope.declinedReviewDate;
                $scope.disableRecapture = false;
                if ($scope.declinedReviewDate != null && $scope.declinedReviewDate != EMPTY_STRING) {
                    $scope.disposition.recaptureReviewDate = RA.UI.doMakeDateMMDDYYYY($scope.declinedReviewDate);
                }
            }
        } else if (dispositionType == DISPOSITION_LOST) {
            if ($scope.disposition.lostRecaptureIndicator == TRUE) {
                $scope.disposition.lostRecaptureReviewDate = null;
                $scope.disposition.recaptureComments = EMPTY_STRING;
                $("#lostRecaptureReviewDate").val(EMPTY_STRING);
                $scope.disposition.recaptureReviewDate = null;
                $scope.disableRecapture = true;
            } else {
                $scope.disposition.lostRecaptureReviewDate = $scope.lostReviewDate;
                $scope.disableRecapture = false;
                if ($scope.lostReviewDate != null && $scope.lostReviewDate != EMPTY_STRING) {
                    $scope.disposition.recaptureReviewDate = RA.UI.doMakeDateMMDDYYYY($scope.lostReviewDate);
                }
            }
        } else if (dispositionType == DISPOSITION_WITHDRAWN) {
            if ($scope.disposition.withdrawnRecaptureIndicator == TRUE) {
                $scope.disposition.withdrawnRecaptureReviewDate = null;
                $scope.disposition.recaptureComments = EMPTY_STRING;
                $("#withdrawnRecaptureReviewDate").val(EMPTY_STRING);
                $scope.disposition.recaptureReviewDate = null;
                $scope.disableRecapture = true;
            } else {
                $scope.disposition.withdrawnRecaptureReviewDate = $scope.withdrawnReviewDate;
                $scope.disableRecapture = false;
                if ($scope.withdrawnReviewDate != null && $scope.withdrawnReviewDate != EMPTY_STRING) {
                    $scope.disposition.recaptureReviewDate = RA.UI.doMakeDateMMDDYYYY($scope.withdrawnReviewDate);
                }
            }
        }
        $timeout(angular.noop);
    };

    $scope.updateReviewDate = function (dispositionType) {

        if (dispositionType == DISPOSITION_DECLINED) {
            $scope.declinedReviewDate = $scope.disposition.declinedRecaptureReviewDate;
        }
        else if (dispositionType == DISPOSITION_LOST) {
            $scope.lostReviewDate = $scope.disposition.lostRecaptureReviewDate;
        }
        else if (dispositionType == DISPOSITION_WITHDRAWN) {
            $scope.withdrawnReviewDate = $scope.disposition.withdrawnRecaptureReviewDate;
        }

    };

    $scope.updateFieldList = function (resetValue) {
        if (!$scope.submission.rpmSession) return;

        var profitCenterParty = $rootScope.getRpmObjects('submission', 'profitCenter');
        if (!profitCenterParty) return;

        var territoryParty = $rootScope.getRpmObjects('submission', 'territory');
        var fieldParty = $rootScope.getRpmObjects('submission', 'field');

        var selectedProfitCenter = profitCenterParty.getField('fullName').getTrait('r:value');
        var selectedTerritory = territoryParty.getField('fullName').getTrait('r:value');
        var selectedField = fieldParty.getField('fullName').getTrait('r:value');

        var tempFieldList = [];
        $scope.fieldList = [];
        tempFieldList.push(NONE_OPTION);
        if (selectedProfitCenter != null && selectedProfitCenter != 0) {
            for (var index in $scope.producerHierarchyList) {
                if (index == selectedProfitCenter) {
                    var territoryList = $scope.producerHierarchyList[index];
                    for (var index2 in territoryList) {
                        if (index2 == selectedTerritory) {
                            for (var foundFieldIndex in territoryList[index2]) {
                                if (foundFieldIndex.indexOf('@') === -1) {
                                    tempFieldList.push(territoryList[index2][foundFieldIndex])
                                }
                            }
                        }
                    }
                }
            }
        }

        $scope.fieldList = RA.UI.doConvertToLabelValue(tempFieldList);

        if (resetValue) {
            $rootScope.getRpmObjects('submission', 'field').getField('fullName').setValue(NONE_OPTION);
        }

    };

    $scope.updatePolicyStateProv = function () {
        var submission = $scope.submission;

        // If you haven't saved the submission yet, or if you don't have a policy state yet...
        if (!submission.policyInfo.policyStateCode || !submission.submissionId) {
            var primary = $rootScope.getRpmObjects('submission', 'primaryInsured');
            var location = primary.getValue('places')[0];

            // then update the policy state based on the primary insured address
            submission.policyInfo.policyStateCode = location.getValue('StateOrProvinceAbbreviation');

            // and update the default region
            $scope.updateDefaultRegionForPolicyState();
        }
    };


    $scope.updateDefaultRegionForPolicyState = function updateDefaultRegionForPolicyState() {
        var submission = $scope.submission;
        var state = submission.policyInfo.policyStateCode;
        var subRpm = $rootScope.getRpmObjects('submission', 'Submission');
        if (state) {
            Presentation.findDefaultRegionForPolicyState(state, function (result) {
                var defaultRegion = RA.Service.handleServiceResult(result, $scope);

                if (defaultRegion != '#NOT_DEFINED') {
                    subRpm.getField('servicingRegion').setValue(defaultRegion);
                    $timeout(function () {
                        $scope.$broadcast('pageStateChanged');
                    })
                }
            });
        }
    };


    /**
     * Called from view
     */
    $scope.updateAgencyLookupStateProvList = function () {
        if ($scope.producerLookup.countryCode != null) {
            async.series(
                {
                    states: function (callback) {
                        Presentation.findStateProvinceList($scope.producerLookup.countryCode, function (result) {
                            var data = RA.Service.handleServiceResult(result, $scope);
                            callback(null, data);
                        });
                    }
                }, function (err, result) {
                    var states = result.states;

                    if (states != null)
                        $scope.agencyLookupStateProvinceList = states;

                    if ($scope.producerLookup.countryCode == UNITED_STATES) {
                        $("#stateLookupInputLabel").text(STATE_LABEL);
                        $scope.stateLookupDisabled = false;
                    } else {
                        $("#stateLookupInputLabel").text(PROVINCE_LABEL);
                        if ($scope.producerLookup.countryCode == CANADA) {
                            $scope.stateLookupDisabled = false;
                        } else {
                            $scope.stateLookupDisabled = true;
                            $scope.producerLookup.stateProvinceCode = EMPTY_STRING;
                        }
                    }
                    $timeout(angular.noop);

                }
            );
        }
    };

    $scope.updateQuoteDto = function ()
    {
        $scope.quote.rpmSession = $scope.quoteList[0];//TODO fix this to update all quotes
        $scope.quote.policySymbol = $scope.submission.policyInfo.policySymbol;
        $scope.quote.policyNumber = $scope.submission.policyInfo.policyNumber;
        $scope.quote.policyVersion = $scope.submission.policyInfo.policyVersion;
        $scope.quote.policyMod = $scope.submission.policyInfo.policyMod;
        $scope.quote.policyStateCode = $scope.submission.policyInfo.policyStateCode;

        if($scope.submission.transactionTypeRefCode === 'NBS')
        {
            $scope.quote.transactionEffectiveDate = $scope.submission.submissionEffectiveDate;
        }
        $scope.quote.policyTermEffectiveDate = $scope.submission.submissionEffectiveDate;
        $scope.quote.policyTermExpirationDate = $scope.submission.submissionExpirationDate;
    };

    $scope.agentBoundPremiumValidation = function agentBoundPremiumValidation(agentBoundPremium) {
        if (isNaN(agentBoundPremium)) {
            alert(AGENT_BOUND_PREMIUM);
            $rootScope.hidePageLoading();
            $scope.scrollTop();
            return false;
        }
        return true;
    };

    $scope.verifyPolicyNumber = function verifyPolicyNumber(policyNumber){
        if (EMPTY_STRING === policyNumber) {
            return null;
        } else {
            RA.Session.addPolicyNumber(policyNumber);
            return policyNumber;
        }
    };


    //TODO: Temporary only. Remove once WPI makes call to CUBE for OOS.
    $scope.externalPASPostExternalIssue = function ()
    {
        $rootScope.showPageLoading();
        var submission = $scope.submission;
        RA.UI.consoleTime('externalPASPostExternalIssue');
        async.series(
            {
                externalPASPostExternalIssue: function (callback) {
                    var method, params, retVal;
                    method = Submission.externalPASPostExternalIssue;
                    params = {submissionId: $scope.submission.submissionId, screenName: SUBM_INFO};
                    retVal = function (result) {
                        return result.data['SubmissionController.externalPASPostExternalIssue'];
                    };

                    method(params, function (result) {
                        var data = RA.Service.handleServiceResult(result, $scope);
                        callback(null, retVal(result));
                    });
                }
            },
            function (err, result) {
                var resultData;
                var resultStatus;
                if (result.externalPASPostExternalIssue) {
                    resultStatus = result.externalPASPostExternalIssue.status;
                    resultData = result.externalPASPostExternalIssue.data;
                    if (resultData) {
                    }
                }
                $rootScope.hidePageLoading();
            }
        );
        RA.UI.consoleTimeEnd('externalPASPostExternalIssue');
        $scope.scrollTop();
        return true;
    };

    $scope.updateSubmission = function ()
    {
        var productIds;
        var policyNumber;
        var isAgentBoundPremiumValid;
        $rootScope.showPageLoading();
        $scope.updateQuoteDto();
        var submission = $scope.submission;
        RA.UI.doClearMessages($scope);
        // Do not remove Customer Number from Session -- if update fails, we need Customer Number in Session when User clicks LHN
        //RA.Session.removeCustomerNumber();
        $scope.insuredPartyAddressOverrideInd = false;
        $scope.alternatePartyAddressOverrideInd = false;

        // verify agent bound premiums
        isAgentBoundPremiumValid = $scope.agentBoundPremiumValidation(submission.agentBoundPremium);
        if ( ! isAgentBoundPremiumValid ) {
            return false;
        }

        // if policy number is empty, ensure policyNumber set to null
        policyNumber = submission.policyInfo.policyNumber;
        submission.policyInfo.policyNumber = $scope.verifyPolicyNumber(policyNumber);

        // verify dates
        if ( ! $scope.doValidateDatesOnSave() ) {
            $rootScope.hidePageLoading();
            return false;
        }

        $scope.policyPremiums['@type'] = 'java.util.LinkedHashMap';
        for (var i = 0; i < $scope.quoteList.length; i++) {
            $scope.quoteList[i].getNamedObjects().policyPremiums = $scope.policyPremiums;
        }

        // on a renewal submission, it can be created (saved) with no products.  This edit check is to verify they entered a product.
        // this edit exists here because on the server side, you have to work a submission first to add the product, and the work does an update
        // which would trigger the validation method.
        productIds = $scope.quoteList[0].namedObjects.productIds;
        if (productIds instanceof Array) {
            // do nothing, products exist
        } else {
            $scope.validationMessages = $scope.validationMessages || [];
            $scope.validationMessages.push({
                type: MESSAGE_VALIDATION,
                "context": "productSelectionLabel",
                text: 'At least one product must be selected.'
            });
            $rootScope.hidePageLoading();
            return false;
        }

        $scope.validateTaxonomyCodes();
        if ($scope.isProducerChanged) {
            $scope.resetOutputPreferenceData();
        }

        $scope.replaceSavedSymbol(SYMBOL_TO_CLASS);
        RA.UI.consoleTime('updateSubmission');
        async.series(
            {
                updateSubm: function (callback) {
                    var method, params, retVal;
                    $scope.transStatus = $scope.submission.transactionStatusRefCode;
                    switch ($scope.submission.transactionStatusRefCode) {
                        case 'QUOTED':
                            $scope.submission.transactionStatusRefCode = initStatus; // need to know prior status...controller will change to quoted
                            method = Quote.doMarkAsQuoted;
                            params = {
                                dto: $scope.submission,
                                quote: $scope.quote,
                                quotes: $scope.quoteList,
                                selectedQuoteId: $scope.selectedQuoteId,
                                screenName: SUBM_INFO
                            }; // controller will have to get the quote
                            retVal = function (result) {
                                return result.data['QuoteController.doMarkAsQuoted'];
                            };
                            break;
                        case 'BND':
                            $scope.submission.transactionStatusRefCode = initStatus; // need to know prior status...controller will change to bound
                            method = Issuance.doBindForWorkflow;
                            params = {
                                dto: $scope.submission,
                                quote: $scope.quote,
                                quoteId: parseInt(RA.Session.getQuoteId()),
                                quotes: $scope.quoteList,
                                selectedQuoteId: $scope.selectedQuoteId,
                                screenName: SUBM_INFO
                            };
                            retVal = function (result) {
                                return result.data['IssuanceController.doBindForWorkflow'];
                            };
                            break;
                        case 'ISSU':
                            $scope.submission.transactionStatusRefCode = initStatus; // need to know prior status...controller will change to issued
                            method = Issuance.doIssueForWorkflow;
                            params = {
                                dto: $scope.submission,
                                quote: $scope.quote,
                                quoteId: parseInt(RA.Session.getQuoteId()),
                                quotes: $scope.quoteList,
                                selectedQuoteId: $scope.selectedQuoteId,
                                screenName: SUBM_INFO
                            };
                            retVal = function (result) {
                                return result.data['IssuanceController.doIssueForWorkflow'];
                            };
                            break;
                        case 'RATED':
                            $scope.submission.transactionStatusRefCode = initStatus; // need to know prior status...controller will change to rated
                            method = Submission.markAsRated;
                            params = {dto: $scope.submission, quotes: $scope.quoteList,selectedQuoteId: $scope.selectedQuoteId, screenName: SUBM_INFO};
                            retVal = function (result) {
                                return result.data['SubmissionController.markAsRated'];
                            };
                            break;
                        case 'PROC':
                            $scope.submission.transactionStatusRefCode = initStatus; // need to know prior status...controller will change to processed
                            method = Submission.markAsProcessed;
                            params = {dto: $scope.submission, quotes: $scope.quoteList, selectedQuoteId: $scope.selectedQuoteId,screenName: SUBM_INFO};
                            retVal = function (result) {
                                return result.data['SubmissionController.markAsProcessed'];
                            };
                            break;
                        default:
                            method = Submission.updateSubmission;
                            params = {dto: $scope.submission, quotes: $scope.quoteList, selectedQuoteId: $scope.selectedQuoteId,screenName: SUBM_INFO};
                            retVal = function (result) {
                                return result.data['SubmissionController.updateSubmission'];
                            };
                            break;
                    }


                    method(params, function (result) {
                        var data = RA.Service.handleServiceResult(result, $scope);
                        callback(null, retVal(result));
                    });
                }
            },
            function (err, result) {
                var resultData;
                var resultStatus;
                var lockedByHid;
                var isIssued;
                var transStatus;
                if (result.updateSubm) {
                    resultStatus = result.updateSubm.status;
                    resultData = result.updateSubm.data;
                    if (resultData) {
                        if ('lhMap' === resultData['@type']) {
                            //doBind and doMarkAsQuoted returns map rather than submissionDto
                            $scope.submission = resultData.submissionDto;
                            if (resultData.quote) {
                                $scope.quote = resultData.quote;
                                $rootScope.rpmSessionMap['quote'] = $scope.quote.rpmSession;
                                $scope.quoteList = [$scope.quote.rpmSession];
                            }

                        }
                        else {
                            $scope.submission = resultData;
                        }
                        if ($scope.submission.rpmSession) {
                            $scope.rpmSession = $scope.submission.rpmSession;
                            $rootScope.rpmSessionMap['submission'] = $scope.submission.rpmSession;
                            $rootScope.$broadcast('sessionChanged');
                        }
                        if (true === resultStatus) {
                            $scope.disabledFields = resultData.disabledFields;
                            $scope.disableUnemploymentId();
                            $scope.findRelatedPolicies();
                            $scope.savedSubmission = RA.Controller.createSavedSubmission($scope.submission);
                            $scope.createCharms();
                            $scope.doDetermineDisplayHideAddressOverrideIndicator();
                            RA.Session.addCustomerNumber($scope.submission.customerNumber);
                            $scope.doEnableDisableMenuItemsWithSubmission($scope.submission);
                            transStatus = $scope.submission.transactionStatusRefCode;
                            $scope.updateTransactionStatusList();
                            isIssued = RA.Controller.isIssuedStatus(transStatus);
                            $scope.viewOnlyMode = isIssued || RA.UI.isRetroEndtOrNbsReversal($scope.submission);
                            lockedByHid = $scope.submission.lockedByHid;
                            if (null === lockedByHid || EMPTY_STRING === lockedByHid) {
                                $scope.viewOnlyMode = true;
                            }

                            if (YES === $scope.foundProspectProducer.value) {
                                //non service calls
                                $scope.updateTerritoryList(false);
                                $scope.updateFieldList(false);
                            }

                            $scope.clearScopeCache();
                            initStatus = transStatus;

                            // Async Calls to Determine whether notes exist for this submission (If Notes exist, populate Icon in Left Hand Nav)
                            async.auto(
                                {
                                    // Fetch Account Information from ACCOUNT_RELATION Table
                                    findAccountPolicyInfo: function (callback) {
                                        $scope.findAccountPolicyInfo(callback);
                                    },
                                    determineNotesExist: ['findAccountPolicyInfo', function (callback) {
                                        $scope.doDetermineNotesExist({'callback': callback});
                                    }]
                                });

                            $timeout(function () {
                                $rootScope.$broadcast('submissionLoaded');
                                $rootScope.$broadcast('pageSubmitted');
                            });
                            $scope.doDeterminePolicyFieldsDisabled();
                            $scope.findProducerInformationSubAgent(false);
                        }
                        //Following if result.status should be possibly result.updateSubm.status??  If so, change hidePageLoading scenario
                        else {
                            $scope.doDetermineAddressOverrides(result.updateSubm.messages);
                        }
                    }
                    $timeout(function () {
                        $rootScope.$broadcast('moreNamedLoaded');
                    });
                    $scope.replaceSavedSymbol(CLASS_TO_SYMBOL);
                    ProductSelection.bootstrapScope($scope, $rootScope, $compile, $timeout, Submission, {
                        state: 'submission.policyInfo.policyStateCode',
                        date: 'submission.submissionEffectiveDate',
                        session: $scope.submission.rpmSession,
                        quoteList: $scope.quoteList,
                        hide: $scope.doDetermineSaveButton,
                        source: $scope.findSourceSystemDefaults,
                        useReducedQuoteSession: true,
                        screenName: SUBM_INFO
                    });
                    snapshots[SNAP_SUBMISSION] = RA.UI.takeSnapshot($scope.submission);

                    $timeout(function () {
                        $rootScope.$broadcast('pageStateChanged');
                    });
                }
                $rootScope.hidePageLoading();
            }
        );
        RA.UI.consoleTimeEnd('updateSubmission');
        $scope.scrollTop();
        return true;
    };

    $scope.updateTerritoryList = function (resetValue) {
        if (!$scope.submission.rpmSession) return;

        var profitCenterParty = $rootScope.getRpmObjects('submission', 'profitCenter');
        if (!profitCenterParty) return;

        var selectedProfitCenter = profitCenterParty.getField('fullName').getTrait('r:value');
        var territoryList = [];
        $scope.territoryList = [];
        $scope.fieldList = [];
        $scope.fieldList.push(NONE_OPTION_OBJECT);

        if (selectedProfitCenter != null && selectedProfitCenter != 0) {
            territoryList.push(NONE_OPTION);
            for (var index in $scope.producerHierarchyList) {
                if (index == selectedProfitCenter) {
                    var selectedTerritory = $scope.producerHierarchyList[index];

                    for (var index2 in selectedTerritory)
                        if (index2.indexOf('@') === -1) {
                            territoryList.push(index2);
                        }
                }
            }
            $scope.territoryList = RA.UI.doConvertToLabelValue(territoryList);
        } else {
            $scope.territoryList.push(NONE_OPTION_OBJECT);
        }

        if (resetValue) {
            $rootScope.getRpmObjects('submission', 'territory').getField('fullName').setValue(NONE_OPTION);
            $rootScope.getRpmObjects('submission', 'field').getField('fullName').setValue(NONE_OPTION);
        }

    };

    $scope.updateTransactionStatusList = function () {
        async.auto(
            {
                transactionStatusList: function (callback) {
                    Presentation.findTransactionStatusList($scope.submission.transactionStatusRefCode, $scope.submission.sourceSystemRefCode, $scope.submission.transactionTypeRefCode, function (result) {
                            var data = RA.Service.handleServiceResult(result, $scope);
                            callback(null, data);
                        }
                    );
                }
            },
            // Runs After Async Call Completes
            function (err, results) {
                $scope.transactionStatusList = [];
                $scope.transactionStatusList = $scope.doFormatTransactionStatusList(results.transactionStatusList);
                $timeout(angular.noop);
            });
    };
    $scope.scrollProducerInformationSection = function () {
        $('html, body').animate({
            scrollTop: $("#producerInformationSection").offset().top
        }, 200);
    };

    $scope.scrollSubAgentInformationSection = function () {
        $('html, body').animate({
            scrollTop: $("#subAgentInformation").offset().top
        }, 200);
    };

    $scope.scrollTop = function () {
        $('html, body').animate({
            scrollTop: $('.gaig-main').offset().top
        }, 0);
    };

    $rootScope.scrollTransactionStatus = function () {
        $('html, body').animate({
            scrollTop: $("#transStatusSection").offset().top
        }, 200);
    };

    $scope.scrollRemovedInsured = function (event) {
        event.preventDefault();
        $('html, body').animate({
            scrollTop: $("#removedInsuredSection").offset().top
        }, 200);
    };

    $scope.toggleMoreInfo = function (e) {
        $scope.moreInfo = !$scope.moreInfo;
    };

    // Define Child Window Handle Var
    $scope.childWindowHandle = EMPTY_STRING;

    // doOpenNotesWindow - Initiated from Left-Hand Nav
    $scope.doOpenNotesWindow = function (event) {
        if (angular.isDefined(event)) {
            event.preventDefault();
        }

        if ($scope.disableNotes == true) {
            return;
        }
        // Invoke Common Method containing Open Notes Window Logic
        RA.UI.doOpenNotesWindow($scope);
    };

    $scope.doCheckPolicyNumberIsDisabled = function doCheckPolicyNumberIsDisabled() {
        return $scope.foundSubmission && $('#policyNumber').prop('disabled');
    };

    $scope.doCheckProducerInformationDisabled = function doCheckProducerInformationDisabled() {
        return $scope.foundSubmission && $('#producerCode').prop('disabled');
    };

    $scope.doCheckInsuredPartyNameDisabled = function doCheckInsuredPartyNameDisabled() {
        return $scope.foundSubmission && $('#insuredPartyFullName').prop('disabled');
    };

    $scope.doCheckUnderwriterDisabled = function doCheckUnderwriterDisabled() {
        return $scope.foundSubmission && $('#underwriter').prop('disabled');
    };

    $scope.doCheckNewNumber = function doCheckNewNumber() {
        if ($scope.submission.policyInfo.policyNumber) {
            $scope.submission.policyInfo.policyNumber = $scope.submission.policyInfo.policyNumber.toUpperCase();
        }
        if ($scope.submission.policyInfo.policyNumber != $scope.submission.policyInfo.prevPolicyNumber) {
            $scope.submission.policyInfo.policyMod = '00';
            $scope.submission.policyInfo.policyVersion = '00';
        }
    };

    $scope.doOpenMyFile = function (event) {
        if (angular.isDefined(event)) {
            event.preventDefault();
        }

        if ($scope.foundSubmission == true) {
            Navigation.doGetMyFileLink(function (result) {
                var data = RA.Service.handleServiceResult(result, $scope);
                RA.Controller.viewDocumentsMyfile(data, 'SubmissionID=' + $scope.submission.submissionId);
            });
        }
    };

    $scope.doSetDispositionData = function (dispositionStatus) {

        $scope.disposition.declinedRecaptureIndicator = FALSE;
        $scope.disposition.lostRecaptureIndicator = FALSE;
        $scope.disposition.withdrawnRecaptureIndicator = FALSE;

        if (dispositionStatus != FALSE) {
            var dispositionType = $scope.submission.transactionStatusRefCode;
            var recaptureIndicator = $scope.disposition.recaptureIndicator;

            if (recaptureIndicator) {
                if (dispositionType == TRANSACTION_STATUS_DECLINED) {
                    $scope.disposition.declinedRecaptureReviewDate = $scope.disposition.recaptureReviewDate;
                    $scope.disposition.declinedRecaptureIndicator = TRUE;
                } else if (dispositionType == TRANSACTION_STATUS_LOST) {
                    $scope.disposition.lostRecaptureIndicator = TRUE;
                    $scope.disposition.lostRecaptureReviewDate = $scope.disposition.recaptureReviewDate;
                } else {
                    $scope.disposition.withdrawnRecaptureIndicator = TRUE;
                    $scope.disposition.withdrawnRecaptureReviewDate = $scope.disposition.recaptureReviewDate;
                }
                $scope.disableRecapture = false;
            } else {
                $("#declinedRecaptureReviewDate").val(EMPTY_STRING);
                $("#lostRecaptureReviewDate").val(EMPTY_STRING);
                $("#withdrawnRecaptureReviewDate").val(EMPTY_STRING);
                $scope.disableRecapture = true;
            }
        }

    };

    $scope.findSourceSystemDefaults = function findSourceSystemDefaults() {
        /*
         When the situation arises that two products can be on the same submission,
         with the same symbol, but not all can be issued in UD, this code will have
         to change. Hopefully, the author will know to execute those multiple calls
         concurrently.
         */


        // On a copied submission you won’t have any products, so subObj below won’t exist.
        // Since coming from copy, you’re on a new submission, the PPS won’t display and it won’t matter what’s in the list.

        if (!$scope.quoteList || !$scope.quoteList[0]) {
            return;
        } else if ($scope.quoteList.length > 1){
            delete $scope.submission.sourceSystemRefCode;
            $timeout(angular.noop);
            return
        }

        var symbolName;
        var prodName;
        var productIds = $scope.quoteList[0].namedObjects.productIds;
        var id = productIds ? productIds[0] : 0;

        var rpmObject = $scope.quoteList[0].getRpmObjectById(id);
        prodName = rpmObject ? rpmObject.getRpmClass().getEffectiveName() : '';
        symbolName = $scope.quoteList[0].getNamedObjects().symbolLabel;

        Presentation.findSourceSystemDefaults(prodName, function (result) {
            $scope.sourceSystemList = RA.Service.handleServiceResult(result, $scope);
            var hasSystem = false;
            for (var i in $scope.sourceSystemList) {
                if ($scope.submission.sourceSystemRefCode === $scope.sourceSystemList[i].value) {
                    hasSystem = true;
                    break;
                }
            }

            if (!hasSystem) {
                Presentation.findDefaultSourceSystem(prodName, symbolName, function(result) {
                    $scope.submission.sourceSystemRefCode = RA.Service.handleServiceResult(result, $scope);
                    if (!$scope.submission.sourceSystemRefCode) {
                        delete $scope.submission.sourceSystemRefCode;
                    }
                    $timeout(angular.noop);
                });
            }
            $timeout(angular.noop);
        });
    };

    $scope.doDeleteProductLocal = function(quoteNum) {
        $scope.doDeleteProduct(quoteNum);
        if ($scope.quoteList.length === 1) {
            delete $scope.submission.sourceSystemRefCode;
            $scope.findSourceSystemDefaults()
        } else if ($scope.quoteList.length === 0) {
            delete $scope.submission.sourceSystemRefCode;
        }
    };

    $scope.findBillingTypeDefaults = function findBillingTypeDefaults() {
        if ($scope.submission.billingTypeRefCode)
            return;

        Presentation.findBillingTypeDefaults(function (result) {
            var defaultBillingType = RA.Service.handleServiceResult(result, $scope);
            $scope.submission.billingTypeRefCode = defaultBillingType;
            $timeout(angular.noop);
        });
    };

    $scope.findRelatedPolicies = function findRelatedPolicies() {
        var customerNumber = $scope.submission.customerNumber;
        var submissionExpirationDate = $scope.submission.submissionExpirationDate;
        var submissionId = $scope.submission.submissionId;
        // Method now passing needed fields rather than entire Dto to reduce network traffic
        Submission.findRelatedPolicies(customerNumber, submissionExpirationDate, submissionId, function (result) {
            $scope.relatedPolicies = RA.Service.handleServiceResult(result, $scope);
            $timeout(angular.noop);
        });
    };

    $scope.doTaxonomySearch = function doTaxonomySearch() {
        var code = $scope.taxonomySearch.code;
        var hasCode;

        if (code)
            code = code.toUpperCase();

        hasCode = $scope.taxonomyCodes.hasOwnProperty(code);
        $scope.taxonomySearch.description = hasCode ? $scope.taxonomyCodes[code] : EMPTY_STRING;
        $scope.taxonomyDescriptionPlaceholder = NO_TAXONOMY_MATCH;
        $scope.taxonomySearch.code = code;
    };

    $scope.doTaxonomySearchModal = function doTaxonomySearchModal() {
        var results = [];
        var searchType = $scope.taxonomyModal.filter;
        if (searchType === TAXONOMY_CODE) {
            results = $scope.searchTaxonomyByCode($scope.taxonomyModal.code);
        }
        else if (searchType === TAXONOMY_GROUP) {
            results = $scope.searchTaxonomyByGroup($scope.taxonomyModal.group);
        }
        else if (searchType === TAXONOMY_KEYWORD) {
            results = $scope.searchTaxonomyByKeyword($scope.taxonomyModal.keyword);
        }
        $scope.taxonomyModal.results = results;
    };

    $scope.searchTaxonomyByCode = function searchTaxonomyByCode(code) {
        var results = [];
        var indexOfCode;
        var codeUpper;

        if (!code) {
            return results;
        }

        codeUpper = code.toUpperCase();

        if (code.length === 3) {
            if ($scope.taxonomyCodes.hasOwnProperty(codeUpper)) {
                results.push([codeUpper, codeUpper + ' - ' + $scope.taxonomyCodes[codeUpper]]);
            }
        } else {
            angular.forEach($scope.taxonomyCodes, function (description, code) {
                indexOfCode = code.indexOf(codeUpper);
                if (indexOfCode !== -1 && indexOfCode === 0) {
                    results.push([code, code + ' - ' + description]);
                }
            });
        }

        return $scope.sortTaxonomyResults(results);
    };

    $scope.searchTaxonomyByGroup = function searchTaxonomyByGroup(group) {
        var i, len, code, results = [];
        var codes = $scope.taxonomyGroupsAll[group];

        if (!group) {
            return results;
        }

        for (i = 0, len = codes.length; i < len; i++) {
            code = codes[i];
            results.push([code, code + ' - ' + $scope.taxonomyCodes[code]]);
        }
        return $scope.sortTaxonomyResults(results);
    };

    $scope.searchTaxonomyByKeyword = function searchTaxonomyByKeyword(keyword) {
        var results = [];

        if (!keyword) {
            return results;
        }

        angular.forEach($scope.taxonomyCodes, function (taxonomyDescription, taxonomyCode) {
            if (taxonomyDescription.toUpperCase().indexOf(keyword.toUpperCase()) > -1) {
                results.push([taxonomyCode, taxonomyCode + ' - ' + taxonomyDescription]);
            }
        });

        return $scope.sortTaxonomyResults(results);
    };

    $scope.doSelectTaxonomyCode = function doSelectTaxonomyCode(code) {
        $scope.taxonomySearch = {code: code, description: $scope.taxonomyCodes[code]};
        $scope.taxonomyModalView.isOpen = false;
    };

    $scope.onTaxonomyLookupOpen = function onTaxonomyLookupOpen() {
        var taxSearch;
        var results;
        var code = $scope.taxonomySearch.code;
        var description = $scope.taxonomySearch.description;

        $scope.resetTaxonomyModalDefaults(true);

        if (code || description) {
            results = $scope.searchTaxonomyByCode(code);

            if (results.length) {
                $scope.taxonomyModal.filter = TAXONOMY_CODE;
                $scope.taxonomyModal.code = code;
            } else if (!results.length && description) { // if search by code fails, do a keyword search
                results = $scope.searchTaxonomyByKeyword(description);

                $scope.taxonomyModal.filter = TAXONOMY_KEYWORD;
                $scope.taxonomyModal.keyword = description;
            }
        }

        $scope.taxonomyModal.results = results;
    };

    $scope.validateTaxonomyCodes = function validateTaxonomyCodes() {
        var primary = $rootScope.getRpmObjects('submission', 'primaryInsured');
        var taxSearch = $scope.taxonomySearch;
        var taxCode = taxSearch.code;
        var taxField = primary.getField('taxonomyCode');
        if (!taxCode || !$scope.taxonomyCodes.hasOwnProperty(taxCode)) {
            taxField.setValue(undefined);
        }
        else {
            taxField.setValue(taxCode);
        }
    };

    $scope.resetTaxonomyModalDefaults = function resetTaxonomyModalDefaults(resetAll) {
        var currentFilter = $scope.taxonomyModal.filter;
        var results = $scope.taxonomyModal.results || [];

        if (resetAll) {
            $scope.taxonomyModal = {
                code: undefined,
                group: undefined,
                keyword: undefined,
                results: undefined,
                filter: TAXONOMY_CODE
            };
        } else {
            $scope.taxonomyModal = {
                code: undefined,
                group: undefined,
                keyword: undefined,
                results: results,
                filter: currentFilter
            };
        }
    };

    $scope.sortTaxonomyResults = function sortTaxonomyResults(results) {
        results.sort(function (a, b) {
            var code1 = a[0], code2 = b[0];
            if (code2 < code1) {
                return 1;
            }
            else if (code1 < code2) {
                return -1;
            }
            else {
                return 0;
            }
        });
        return results;
    };

    $scope.getOrderedRpmCollection = function (sessionKey, collectionKey, status)
    {
        var coll = $rootScope.getRpmCollection(sessionKey, collectionKey, status);
        return RA.UI.getOrderedRpmCollection(coll);
    };

    $scope.getOrderedSubGroup = function (coll)
    {
        return RA.UI.getOrderedRpmCollection(coll);
    };

    $scope.disableUnemploymentId = function(){
        var primary = $rootScope.getRpmObjects('submission', 'primaryInsured');
        var moreNamed = $rootScope.getRpmCollection('submission', 'moreNamedInsured');

        var unemploymentMoreNamed = [];
        if(moreNamed){
            for (var k=0; k<moreNamed.length; k++){
                var unemployments = moreNamed[k].getValue('unemployment');
                for (var j = 0; j < unemployments.length; j++) {
                    unemploymentMoreNamed.push(unemployments[j])
                }
            }
        }

        var unemploymentPrimary = primary.getValue('unemployment');

        pushUnemploymentIdToList(unemploymentPrimary);
        pushUnemploymentIdToList(unemploymentMoreNamed);
    };

    function pushUnemploymentIdToList(unemployment){
        for(var i=0; i<unemployment.length; i++){
            $scope.disabledFields[unemployment[i].id] = true;
        }
    }
    function doSetupContinuousUntilCancelled(continuousUntilCancelledOption) {
        switch (continuousUntilCancelledOption) {
            case CONTINUOUS_IS_REQUIRED:
                setDataForContinuousUntilCancelledFields(CONTINUOUS_DATA_ON);
                break;

            case CONTINUOUS_NOT_ELIGIBLE:
                setDataForContinuousUntilCancelledFields(CONTINUOUS_DATA_OFF);
                break;

            case CONTINUOUS_IS_OPTIONAL:

                if ($scope.submission.continuousTillCancInd === false) {
                    $scope.isContinuousReviewDateEnabled = true;
                    setDataForContinuousUntilCancelledFields(CONTINUOUS_DATA_OFF);
                } else {
                    setDataForContinuousUntilCancelledFields(CONTINUOUS_DATA_ON);
                }
                break;
        }
    }

    function setDataForContinuousUntilCancelledFields(statusIndicator) {
        switch (statusIndicator) {
            case CONTINUOUS_DATA_ON:
                $scope.submissionExpirationDateRequirement = EMPTY_STRING;
                $scope.continuousReviewDateRequirement = 'required';
                $scope.isContinuousReviewDateEnabled = true;
                $scope.isContinuousEnabled = doValidateTransactionTypeForContinuous();

                if ($scope.submission.continuousTillCancReviewDt == null || $scope.submission.continuousTillCancReviewDt == undefined) {
                    var submissionEffDate = new Date($scope.submission.submissionEffectiveDate);
                    $scope.submission.continuousTillCancReviewDt = (submissionEffDate.getMonth() + 1 + "/" + submissionEffDate.getDate() + "/" + (submissionEffDate.getFullYear() + 1));
                }
                break;

            case CONTINUOUS_DATA_OFF:
                $scope.submissionExpirationDateRequirement = 'required';
                $scope.continuousReviewDateRequirement = EMPTY_STRING;
                $scope.submission.continuousTillCancReviewDt = null;
                $scope.isContinuousReviewDateEnabled = false;
                $scope.isContinuousEnabled = doValidateTransactionTypeForContinuous();

                break;

            case CONTINUOUS_DATA_TOGGLE_ON:

                $scope.submissionExpirationDateRequirement = EMPTY_STRING;
                $scope.continuousReviewDateRequirement = 'required';
                $scope.isContinuousReviewDateEnabled = true;

                if ($scope.submission.continuousTillCancReviewDt == null || $scope.submission.continuousTillCancReviewDt == undefined) {
                    var submissionEffDate = new Date($scope.submission.submissionEffectiveDate);
                    $scope.submission.continuousTillCancReviewDt = (submissionEffDate.getMonth() + 1 + "/" + submissionEffDate.getDate() + "/" + (submissionEffDate.getFullYear() + 1));
                    $scope.submission.continuousTillCancInd = true;
                    $scope.submission.submissionExpirationDate = (CONTINUOUS_INFINITE_EXPIRATION_DATE);
                }
                break;

            case CONTINUOUS_DATA_TOGGLE_OFF:

                $scope.submissionExpirationDateRequirement = 'required';
                $scope.continuousReviewDateRequirement = EMPTY_STRING;
                $scope.submission.continuousTillCancReviewDt = null;
                $scope.isContinuousReviewDateEnabled = false;

                if ($scope.submission.submissionExpirationDate == CONTINUOUS_INFINITE_EXPIRATION_DATE) {
                    var submissionEffDate = new Date($scope.submission.submissionEffectiveDate);
                    $scope.submission.submissionExpirationDate = (submissionEffDate.getMonth() + 1 + "/" + submissionEffDate.getDate() + "/" + (submissionEffDate.getFullYear() + 1));
                }
                break;
        }
    }

    function doValidateTransactionTypeForContinuous() {
        var transType = $scope.submission.transactionTypeRefCode;

        return (transType == TRANSACTION_TYPE_NEW_BUSINESS || transType == TRANSACTION_TYPE_NEW_RENEWAL) ? true : false;
    }

    $scope.doHandleCopiedSubmission = function(submission) {
        var lostToRateAgent;
        var submissionRpm;
        $scope.submission = submission;
        submissionRpm = $rootScope.getRpmObjects('submission', 'Submission');

        submissionRpm.getField('YearsQuotedByGAICCount').setValue(null);
        submissionRpm.getField('LostToRateText').setValue(null);

        lostToRateAgent = $rootScope.getRpmObjects('submission','party.LostToAgent');
        if(lostToRateAgent) {
            lostToRateAgent.getField('fullName').setValue(null);
        }

        $scope.findSourceSystemDefaults();
        submission.screenCommands = null;

        var primary = $rootScope.getRpmObjects('submission', 'primaryInsured');
        var dba = primary.getValue('dba');
        $scope.showPrimaryDBA = dba.length > 0;

        var unemployment = primary.getValue('unemployment');
        $scope.showPrimaryUnemployment = unemployment.length > 0;

        $scope.savedSubmission = {
            "transactionTypeDesc": "New Business", "transactionStatusDesc": "New",
            "transactionSubTypeDesc": "New Business", "submissionId": "New Business"
        };
    }


    function doHandleDefaultSubmission(submission) {
        $scope.doRemoveAllSessionVariables();
        $scope.disposition = EMPTY_STRING;
        $scope.foundSubmission = false;
        $scope.enableMenu = false;
        $scope.disableMyFile = true;
        $scope.disableSubmissionLHN = true;
        $scope.disableWorksheetLHN = true;
        $scope.disableQuoteListLHN = true;
        $scope.disableBillingLHN = true;
        $scope.foundProspectProducer.value = NO;
        $scope.hasAlternateMailing.value = false;

        var primary = $rootScope.getRpmObjects('submission', 'primaryInsured');
        primary.getField('legalEntity').setValue('CCORP');

        var location = primary.getValue('places')[0];
        location.getField('CountryISOCode').setValue('US');

        if (submission.submissionId === '0')
            delete subm.submissionId;

        if (submission.quoteItemNo === '0')
            delete submission.quoteItemNo;

        $scope.doResetDispositionReviewDates();

        // If Advanced Search Dto Exists and User clicks "Create New Submission" from Search screen, pop-up "Include Fields" Modal
        var advancedSearchDto = JSON.parse(RA.Session.getAdvancedSearch());

        if (advancedSearchDto) {
            //add search fields to submission
            populateSubmissionFromAdvancedSearch(advancedSearchDto, submission);

            //create scope insured partly city list if city was as search field
            if (submission.insuredParty.city)
                $scope.insuredPartyCityList = [subm.insuredParty.city];

            //clear the advanced search
            RA.Session.removeAdvancedSearch();
        }

        $scope.submission = submission;

        //create the saved submission only with the default descriptions
        $scope.savedSubmission = {
            "transactionTypeDesc": "New Business", "transactionStatusDesc": "New",
            "transactionSubTypeDesc": "New Business", "submissionId": "New Business"
        };
        $scope.setWholesaleRetailOption();
    }

    function doHandleSearchedSubmission(submission) {
        $scope.submission = submission;

        RA.UI.consoleTime('doHandleSearchedSubmission findRelatedPolicies');
        $scope.findRelatedPolicies();
        RA.UI.consoleTimeEnd('doHandleSearchedSubmission findRelatedPolicies');

        $scope.findSourceSystemDefaults();
        $scope.policyPremiums = $scope.quoteList[0].getNamedObjects().policyPremiums;

        var primary = $rootScope.getRpmObjects('submission', 'primaryInsured');
        var dba = primary.getValue('dba');
        $scope.showPrimaryDBA = dba.length > 0;

        var unemployment = primary.getValue('unemployment');
        $scope.showPrimaryUnemployment = unemployment.length > 0;

        //resolve the current user from either footer directive or session
        var currentUserHid = $scope.currentUser ? $scope.currentUser.createHid : RA.Session.getCurrentUserHid();
        //make sure user hid does not stay in session
        RA.Session.removeCurrentUserHid();

        $scope.doEnableDisableMenuItems();

        $scope.doResetDispositionReviewDates();

        $scope.doDetermineDisplayHideAddressOverrideIndicator();

        RA.Session.addCustomerNumber($scope.submission.customerNumber);
        // if in a disposition status, go get the dispositionDto
        var transStatus = submission.transactionStatusRefCode;
        if (RA.Controller.isDispositionStatus(transStatus)) {
            async.series(
                [
                    function (callback) {
                        $scope.doPopulateDispositionOptions(callback);
                    },
                    function (callback) {
                        $scope.doSearchDisposition(callback);
                    }
                ]);

            $scope.viewOnlyMode = true;
        }
        else {
            // set the disposition screen fields to "NO"
            $scope.doSetDispositionData(FALSE);

            if (RA.Controller.isIssuedStatus(transStatus)) {
                $scope.viewOnlyMode = true;
            }
            else {
                $scope.viewOnlyMode = RA.UI.isRetroEndtOrNbsReversal($scope.submission); // was false originally
            }
        }

        var isViewOnly = RA.Session.getViewOnlyMode() === YES;
        var isViewOnlyCustNo = RA.Session.getViewOnlyModeCustNo() === YES;
        var lockedByHid = $scope.submission.lockedByHid;

        $scope.viewOnlyMode = isViewOnly || !lockedByHid || lockedByHid !== currentUserHid || RA.UI.isRetroEndtOrNbsReversal($scope.submission);
        $scope.showCustNoButton = !RA.UI.isCustNo($scope.submission);
        $scope.viewOnlyModeCustNo = isViewOnlyCustNo || !RA.UI.isCustNo($scope.submission);
        // if the submission is locked to someone, and the current user isn't that person, set it to view only

        // populate the saved object which stores the 'original' or saved submission (before UI changes)
        $scope.savedSubmission = RA.Controller.createSavedSubmission(submission);
        $scope.foundSubmission = true;
        $scope.enableMenu = true;
        $scope.doEnableDisableMenuItems();
        $scope.doSetSessionParameters();
        snapshots[SNAP_SUBMISSION] = RA.UI.takeSnapshot(submission);
        $scope.disableMyFile = false;
        $scope.setWholesaleRetailOption();
    }
}

SubmissionManagementController.$inject = ['$scope', '$rootScope', 'Submission', 'Presentation', 'Search', 'Account', 'Activity', 'Notes', 'Navigation', 'ProductSelection', '$compile', '$timeout', 'Quote', 'Issuance'];

function populateSubmissionFromAdvancedSearch(advancedSearch, submission) {
    submission.insuredParty.fullName = advancedSearch.insuredName;
    submission.customerNumber = advancedSearch.customerNumber;

    if (advancedSearch.country != null && advancedSearch.country.length > 0) {
        submission.insuredParty.countryCode = advancedSearch.country;
    }

    if (advancedSearch.city != null && advancedSearch.city.length > 0) {
        submission.insuredParty.city = advancedSearch.city;
    }

    submission.insuredParty.address1 = advancedSearch.address;
    submission.insuredParty.postalCode = advancedSearch.zip;
    submission.insuredParty.stateProvinceCode = advancedSearch.state;
    submission.producerCode = advancedSearch.producerCode;
    submission.agencyName = advancedSearch.agencyName;
}
