'use strict'


var doChangeDetailsAll;
var doDashboardCheck;
var doDeleteFilter;
var doDetermineActivityButton;
var doEnableSaveCurrentViewLink;
var doHandleMenuAction;
var doGetRunFiltersKey;
var doLinkManageActivities;
var doCheckSelectedAssignedTo;
var doRefreshFilter;
var doSetPendedOption;
var doSetTrnStatus;
var doTogglePendedOptionDash;
var doUnlock;
var doValidateAssignToCount;
var doValidateFilterCount;
var doViewSelectedFilters;
var doValidatePopoverFilterCount;
var doChangeChartView;
var doClosePopover;
var latestSortColumn;
var sessionData = null;
var activityCategoryIndex = 1;
var removeAssignedFromAssignToSelectList;
var formatPersonName;
var LOGIN_USER = 'Me';
var NO_ASSIGN_TO_FILTER_LIST = null;
var SPECIAL_CHARACTER_REPLACEMENT_MAP = null;
var currentChartView = EMPTY_STRING;
var dashboardChart = {};
var ACTIVITY_BAR_COLOR = '#669900';
var doEnableDisablePendingButtons;
var openViewHistory;
var unRevisedDispositionStatusList;
var disabledFields = [];

var ASSIGN_TO_FILTER_TYPE = 'assignTo';
var ASSIGN_TO_FILTER_NAME = 'My Assigned To';
var INBOX_FILTER_TYPE = 'inbox';
var MY_INBOX_FILTER_NAME =  'My Inbox';

var RETAIN_TABLE_FILTERS = true;
var DO_NOT_RETAIN_TABLE_FILTERS = false;

var RUN_LAST_FILTER_TYPE = true;
var DO_NOT_RUN_LAST_FILTER_TYPE = false;

var RETAIN_CHART_VIEW = true;
var DO_NOT_RETAIN_CHART_VIEW = false;

var USE_REGULAR_EXPRESSIONS = true;
var DO_NOT_USE_REGULAR_EXPRESSIONS = false;

// HIDE BU SPECIFIC FIELDS
// - Only Set to true when there are less than two BU Specific Fields
var HIDE_BU1_SPECIFIC_COLUMN = false;
var HIDE_BU2_SPECIFIC_COLUMN = false;

var DATA_TABLE_STATE_SESSION_KEY = 'DataTables_' + window.location.host + '/UwdRefApp/dyn/html/dashboard';
var SELECTED_BAR_SESSION_KEY = 'Selected_Bar_' + window.location.host + '/UwdRefApp/dyn/html/dashboard';
var CURRENT_CHART_VIEW = 'Current_Char_View_' + window.location.host + '/UwdRefApp/dyn/html/dashboard';
var PEOPLE_PENDED_OPTION_SESSION_KEY = 'People_Pended_option_' + window.location.host + '/UwdRefApp/dyn/html/dashboard';
var RESET_VALUE_FOR_SELECTED_BAR = '';
var SORT_COLUMN_INDEX_KEY = 'SORT_COLUMN_INDEX';
var SORT_ORDER_KEY = 'SORT_ORDER';
var BEGINING_ANCHOR_TAG_KEY = '<a href=#';
var ENDING_OF_BEGINING_ANCHOR_TAG_KEY = '">';
var ENDING_ANCHOR_TAG_KEY = '</a>';
var LENGTH_TO_INDICATE_INDEX_0 = 1;
var NOT_FOUND = -1;
var BAR_STATUS_NAME_INDEX = 0;

var FILTERNAME_UNCHAGED_VALUE = "";

var MAX_NUMBER_OF_ROWS_TO_DISPLAY = 1000;

var DISABLED = true;
var ENABLED = false;

var SORT_ORDER_ASCENDING = 'asc';
var SORT_ORDER_DESCENDING = 'desc';


var VIEW_SUBMISSION = 'VIEW_SUBMISSION';
var WORK_SUBMISSION = 'WORK_SUBMISSION';
var CHANGE_DETAIL = 'CHANGE_DETAIL';
var VIEW_DETAIL = 'VIEW_DETAIL';
var SET_TRANSACTION_STATUS = 'SET_TRANSACTION_STATUS';
var UNLOCK = 'UNLOCK';
var VIEW_SUPPORTING_DOCUMENTS = 'VIEW_SUPPORTING_DOCUMENTS';
var VIEW_POLICY_DOCUMENTS = 'VIEW_POLICY_DOCUMENTS';
var VIEW_HISTORY = 'VIEW_HISTORY';
var REOPEN_ACTIVITY = 'REOPEN_ACTIVITY';
var DELETE = 'DELETE';
var RUN_MY_FILTERS = 'RUN_MY_FILTERS';
var RUN_MY_ASSIGNED = 'RUN_MY_ASSIGNED'
var VIEW_BY_ACTIVITY = 'view_by_actvity';
var VIEW_BY_ACTIVITY_STATUS = 'view_by_activity_status';
var VIEW_BY_TOTALS = 'view_by_totals';
var EXCLUDE_PENDED = 'EXCLUDE';
var INCLUDE_PENDED = 'INCLUDE';
var ONLY_PENDED = 'ONLY';
var OPEN = 'Open';
var RATED = 'Rated';
var QUOTED = 'Quoted';
var BND = 'Bound';
var NBS = 'New Business';
var REN = 'Renewal';
var ENDT = 'Endorsement';
var CANC = 'Cancellation';
var REIN = 'Reinstatement';
var NRI = 'Non-Renewal';
var OTHER = 'Other';
var MANAGE_FILTER_NEW_MODE = 'new-filter';
var MANAGE_FILTER_EDIT_MODE = 'edit-filter';
var MY_ASSIGNED_TO_FILTER_NM = 'My Assigned To';
var MY_INBOX_FILTER_NM = 'My Inbox';

var DEFAULT_SORT_COLUMN_NAME = 'trnEffectiveDate';
var DEFAULT_SORT_ORDER = 'asc';


var FILTER_REGEX_FOR_OTHER = '^((?!(Non-Renewal|Endorsement|New\\sBusiness|Renewal|Cancellation|Reinstatement))' +
    '|(Non-Renewal|Endorsement|New\\sBusiness|Renewal|Cancellation|Reinstatement)(?=.+))';


var STATUS_LIST =
    {
        'OPEN':OPEN,
        'RATED':RATED,
        'QUOTED':QUOTED,
        'BND':BND
    };

var ACTIVITY_TYPE_LIST =
    {
        'NBS':NBS,
        'REN':REN,
        'ENDT':ENDT,
        'CANC':CANC,
        'REIN':REIN,
        'NRI':NRI,
        'OTHER':OTHER
    };


var SORTABLE_COLUMN_NAME_INDEX_MAP =
    {
        'activityCategory':1,
        'transactionStatusRefCode':2,
        'assignedToName':3,
        'bu1':4,
        'bu2':5,
        'needByDate':6,
        'trnEffectiveDate':7,
        'insuredName':8,
        'policy':9,
        'producerName':10,
        'transactionPremium':11,
        'assignedDate':12,
        'pendingDate':22
    };
var DEFAULT_SORT_COLUMN_INDEX = 1;

var COL_ACTIVITY_CATEGORY;
var COL_TRN_STATUS;
var COL_ASSIGNED_TO;
var COL_NEED_BY;
var COL_TRANS_EFFECTIVE_DATE;
var COL_INSURED_NAME;
var COL_POLICY;
var COL_PRODUCER_NAME;
var COL_TRANS_PREMIUM;
var COL_ASSIGNED_DATE;
var COL_BU_SPECIFIC_1;
var COL_BU_SPECIFIC_2;
var COL_PENDING_DATE;


var DROPDOWN_MENU_COLUMN_INDEX                                         =  0;
var ACTIVITY_CATEGORY_COLUMN_INDEX                                     =  1;
var TRN_STATUS_COLUMN_INDEX                                            =  2;
var ASSIGNED_TO_COLUMN_INDEX                                           =  3;
var BU1_SPECIFIC_COLUMN_INDEX                                          =  4;
var BU2_SPECIFIC_COLUMN_INDEX                                          =  5;
var NEED_BY_COLUMN_INDEX                                               =  6;
var TRANS_EFFECTIVE_DATE_COLUMN_INDEX                                  =  7;
var INSURED_NAME_COLUMN_INDEX                                          =  8;
var POLICY_COLUMN_INDEX                                                =  9;
var PRODUCER_NAME_COLUMN_INDEX                                         = 10;
var TRANS_PREMIUM_COLUMN_INDEX                                         = 11;
var ASSIGNED_DATE_COLUMN_INDEX                                         = 12;
var SUBMISSION_ID_COLUMN_INDEX 		                                   = 13;
var ACTIVITY_REASON_COLUMN_INDEX                                       = 14;
var ACTIVITY_ID_COLUMN_INDEX	                                       = 15;
var LOCKED_TO_HID_COLUMN_INDEX                                         = 16;
var PENDING_INDICATOR_COLUMN_INDEX                                     = 17;
var OVERDUE_INDICATOR_COLUMN_INDEX                                     = 18;
var RUSH_INDICATOR_COLUMN_INDEX                                        = 19;
var CLAIMS_EXIST_INDICATOR_COLUMN_INDEX                                = 20;
var PREVIOUS_PENDING_INDICATOR_COLUMN_INDEX                            = 21;
var PENDING_DATE_COLUMN_INDEX                                          = 22;
var FILTER_NAME_COLUMN_INDEX                                           = 23;
var HIDDEN_COLUMN_USED_FOR_FILTERING_BY_ACTIVITY_CATEGORY_COLUMN_INDEX = 24;
var HIDDEN_TRN_EXPIRATION_DATE										   = 25;
var HIDDEN_IS_WORKED       										       = 26;
var HIDDEN_IS_NON_UD       										       = 27;
var HIDDEN_POL_TERM_EFF_DT                                              = 28;

function DashboardController($scope, $rootScope, Dashboard, Activity, Navigation, Presentation, Search, Submission, $timeout, $compile, Logging, $filter)
{
    $scope.editAccess = false;
    RA.Session.removeViewOnlyMode();
    var NEW_FILTER_SNAPSHOT_KEY = 'createFilter';
    var MANAGE_FILTER_SNAPSHOT_KEY = 'manageFilter';
    var DISPOSITION_SNAPSHOT_KEY = "disposition";
    var ACTIVITY_DETAILS_SNAPSHOT_KEY = 'activityDetails';
    var SAVE_CURRENT_VIEW_AS_A_FILTER_SNAPSHOT_KEY = 'saveCurrentViewAsAFilter';

    var createTRNStatusEntryFromDashboard = function (dashboardItem, setTRNStatusEntry) {
        return {
            "date": setTRNStatusEntry.date,
            "index": setTRNStatusEntry.index,
            "insuredName": setTRNStatusEntry.insuredName,
            "lockHid": dashboardItem.lockedToHid,
            "lockName": setTRNStatusEntry.lockName,
            "policy": dashboardItem.policy,
            "reason": setTRNStatusEntry.reason,
            "status": setTRNStatusEntry.status,
            "subId": setTRNStatusEntry.subId,
            "type": setTRNStatusEntry.type,
        };
    }

    $rootScope.showMainContent = true;

    var snapshots = {};

    $scope.cancelFunction = function cancelFunction(key, value, preCallback, postCallback)
    {
        var current = RA.UI.takeSnapshot(value, preCallback);
        if(snapshots[key] == current || confirm(UNSAVED_CHANGES_NAV_CONFIRM))
        {
            postCallback();
        }
    };

    $scope.preCallback = function preCallback()
    {
        var listsToDelete =
        ['assignedToPersonFromSelection',
            'underwriterFromSelection',
            'renewalUnderwriterFromSelection',
            'csrFromSelection',
            'marketingFromSelection',
            'delegateFromSelection',
            'lossPreventionFromSelection',
            'accountManagerFromSelection',
            'stateFromSelection',
            'assignmentReasonFromSelection',
            'regionFromSelection',
            'policySymbolFromSelection'];
        for (var i in listsToDelete) {
            if($scope.directiveModels[listsToDelete[i]] === '')
                delete $scope.directiveModels[listsToDelete[i]];
        }

        if($scope.directiveModels.filterToCopyFrom === '')
            $scope.directiveModels.filterToCopyFrom = {};
    };
    $scope.selectedCarrier = [];
    $scope.filterList = [];
    $scope.defaultFilter = null;
    $scope.myInboxFilter = null;
    $scope.assignedToFilter = null;
    $scope.currentFilterResults = [];
    $scope.currentFilterResultsCountOnly = [];
    $scope.currentResultsTotalCount = 0;
    $scope.isTRNStatusOpen = false;
    $scope.isAddFilterOpen = false;
    $scope.isManageFilterOpen = false;
    $scope.isConfirmOutOfSequenceOpen = false;
    $scope.isConfirmCommissionOutOfSequenceOpen = false;
    $scope.assignedToPersonFromSelection = {};
    $scope.chartViewSelection = VIEW_BY_ACTIVITY;
    $scope.currentChartView = VIEW_BY_ACTIVITY;
    $scope.pendedOptionSelection = INCLUDE_PENDED;
    $scope.currentPendedOption = INCLUDE_PENDED;
    $scope.filtersAreRunning = false;
    $scope.assignToSelectList = [];
    $scope.assigneeList = [];
    $scope.underwriterSelectList = [];
    $scope.producerHierarchyList = [];
    $scope.profitCenterList = [];
    $scope.territoryList = [];
    $scope.fieldList = [];
    $scope.producerSearchResult = null;
    $scope.filterProducersSelected = [];
    $scope.producerSearchValue = {};
    $scope.manageFilterMode = null;
    $scope.noOfLockedRowsChecked = 0;
    $scope.latestRanFilterList = [];
    $scope.latestRanFilterType = RUN_MY_FILTERS;
    $scope.saveCurrentFilterName = {"name": ""};
    $scope.activityDetailsTitle = EMPTY_STRING;
    $scope.selectedNewEffectiveFromString = EMPTY_STRING;
    $scope.selectedNewEffectiveToString = EMPTY_STRING;
    $scope.selectedNewNeedByFromString = EMPTY_STRING;
    $scope.selectedNewNeedByToString = EMPTY_STRING;
    $scope.selectedManageEffectiveFromString = EMPTY_STRING;
    $scope.selectedManageEffectiveToString = EMPTY_STRING;
    $scope.selectedManageNeedByFromString = EMPTY_STRING;
    $scope.selectedManageNeedByToString = EMPTY_STRING;
    $scope.producerLookUpBuForFilter = EMPTY_STRING_AS_VALUE;
    $scope.directiveModels = {};
    $scope.disposition = {"recaptureIndicator":FALSE};
    $scope.dispositionTypeCode = '';
    $scope.dateLabel = DATE_LABEL;
    $scope.reasonLabel = REASON_LABEL;
    $scope.commentsLabel = COMMENTS_LABEL;
    $scope.disableRecapture = true;

    $rootScope.charms = {"charmsList": null};
    $scope.charmsList = [];
    $scope.rowCount = {"filter": null, "assignedTo": null};

    $scope.selectedUnderwriterList = [];
    $scope.selectedRenewalUnderwriterList = [];
    $scope.selectedCSRList = [];
    $scope.selectedAssigneeList = [];
    $scope.selectedMarketingList = [];
    $scope.selectedDelegateList = [];
    $scope.selectedLossPreventionList = [];
    $scope.selectedAccountManagerList = [];
    $scope.selectedStateList = [];
    $scope.selectedPolicySymbolList = [];
    $scope.selectedAssignmentReasonList = [];
    $scope.originalFilterName;
    $scope.submissionId;
    $scope.isConfirmWorkDash = false;

    $scope.isViewHistoryOpen = false;
    $scope.clearFields = [];
    $scope.clearedFieldsList = [];
    $scope.isSingleInActivityDetails;

    var DATA_ASSIGN_TO = "ASSIGNED_TO";
    var DATA_UNDERWRITER = "UNDERWRITER";
    var DATA_PRODUCER_CODE = "PRODUCER_CODE";
    var DATA_PROFIT_CENTER = "PROFIT_CENTER";
    var DATA_TERRITORY = "TERRITORY";
    var DATA_FIELD = "FIELD";
    var DATA_NEED_BY_DATE_TO = "NEED_BY_DATE_TO";
    var DATA_NEED_BY_DATE_FROM = "NEED_BY_DATE_FROM";
    var DATA_EFFECTIVE_DATE_TO = "EFFECTIVE_DATE_TO";
    var DATA_EFFECTIVE_DATE_FROM = "EFFECTIVE_DATE_FROM";
    var DATA_STATES = "STATES";

    $scope.isActivityDetailsOpen = false;

    $scope.activityDetails = {'sourceId':EMPTY_STRING,
        'activityId':EMPTY_STRING,
        'assignToHid':EMPTY_STRING,
        'assignmentReasonCode':EMPTY_STRING,
        'referralStatusRefCode':EMPTY_STRING,
        'pendingDate':EMPTY_STRING,
        'underwriterHid':EMPTY_STRING,
        'premiumTierRefCode':EMPTY_STRING,
        'priorityRefCode':EMPTY_STRING,
        'needByDate':EMPTY_STRING,
        'transactionEffectiveDate':EMPTY_STRING,
        'activityReasonComments':EMPTY_STRING,
        'userComments':EMPTY_STRING,
        'endorsementTypeRefCode':EMPTY_STRING,
        'endorsementSubTypeRefCode':EMPTY_STRING,
        'reasonRefCode':EMPTY_STRING,
        'reasonTypeCode':EMPTY_STRING,
        'policyTermExpirationDate':EMPTY_STRING,
        activityComments:{}};


    $scope.returnFromBindDetail = function(result) {
        RA.UI.doClearMessages($scope)
        //var data = RA.Service.handleServiceResult(result,$scope);
        // handleServiceResult cannot parse the result without an out of memory exception
        var data = result.data;
        var messages = result.messages;

        for(var key in result.data)
        {
            if(key.search(/Controller\.*/) > -1)
            {
                //console.log("Found a controller!")
                var resultData = result.data[key];
                messages = resultData.messages;
                data = resultData.data;
                break;
            }
        }
        if (messages) {
            RA.UI.doDisplayUIMessages(messages, $scope);
        }

        if (result.status === true) {
            $rootScope.showMainContent = true;
            $rootScope.mainDisplay.show.charms = $rootScope.mainDisplay.show.charms.slice(0,-1 * ACCT_BIND_ROOT_CHARM_EXTENSION_LENGTH);
            sessionStorage.removeItem('dynamicIds');
        }

        if (data !== "cancel") {
            $scope.doRunMySelectedFiltersFromScript(null, RETAIN_TABLE_FILTERS, false, RETAIN_CHART_VIEW, null);
        }
    }

    $scope.doChangeDetailsCancel = function()
    {
        $scope.cancelFunction(ACTIVITY_DETAILS_SNAPSHOT_KEY, $scope.activityDetails, null, $scope.doToggleActivityDetailsModal);
    }

    $scope.detailsButtons = [
        {
            "buttonId":"detailUnlock",
            "label": "Save and Unlock",
            "css": "btn",
            "onClick": function() {
                $scope.saveActivitiesAndUnlock();
            },
            "closeOnClick": false,
            "dynatrace":"changeDetailsUnlockDashboard"
        },
        {
            "buttonId":"detailCloseReminder",
            "label":"Save and Close Reminder",
            "css": "btn",
            "onClick": function(){
                $scope.saveActivitiesAndClose();
            },
            "closeOnClick": false,
            "dynatrace":"changeDetailsCloseDashboard"
        },
        {
            "buttonId": "saveDetailsAndChangeTRNStatus",
            "label": "Save and Set Transaction Status",
            "css": "btn",
            "onClick": function () {
                $scope.saveDetailsAndChangeStatus();
            },
            "closeOnClick": false,
            "isDisabled": false,
            "dynatrace": "saveDetailsAndChangeStatus"
        }
    ];
    $scope.confirmButtonsWorkDash =
        [
            {
                "label": CONTINUE,
                "function": function ()
                {
                    $scope.setConfirmWorkValueDash(true);
                },
                "class": "btn btn-primary",
                "id": "confirmButtonContinueDash"
            },
            {
                "label": CANCEL,
                "function": function ()
                {
                    $scope.setConfirmWorkValueDash(false);
                },
                "class": "btn",
                "id": "confirmButtonCancelDash"
            }
        ];

    $scope.findRowCountOptions = function(callback) {
        var dispatcher = new RA.Service.Dispatcher();

        dispatcher.dispatch({
            rowCountDefault: function (callback) {
                Dashboard.findDashboardRowCountDefault(function (result) {
                    var data = RA.Service.handleServiceResult(result, $scope);
                    callback(null, data);
                }, { queue: dispatcher });
            },
            rowCountOptions: function (callback) {
                Dashboard.findDashboardRowCountOptions(function (result) {
                    var data = RA.Service.handleServiceResult(result, $scope);
                    callback(null, data);
                }, { queue: dispatcher });
            },
            pageSizeDefault: function (callback) {
                Dashboard.findDashboardDefaultPageSize(function (result) {
                    var data = RA.Service.handleServiceResult(result, $scope);
                    callback(null, data);
                }, { queue: dispatcher });
            }
        }, function findRowCountOptionsCallback(err, result) {
            $scope.rowCount.options = result.rowCountOptions;
            $scope.rowCount.filters = result.rowCountDefault;
            $scope.rowCount.pageSizeDefault = result.pageSizeDefault;
            $scope.rowCount.assignedTo = result.rowCountDefault;
            $scope.dashboardRowCountOptions = RA.Controller.convertStringToValueLabelPairs(result.rowCountOptions);

            if (callback != undefined) {
                callback(null,null);
            }
        });
    };

    $scope.workActivity = function(submissionId) {

        $rootScope.showPageLoading();
        Activity.doWorkActivity(submissionId, function(result)
        {
            if(result.data['ActivityController.doWorkActivity'].status !== false)
            {
                RA.Session.removeViewOnlyMode();
                RA.Session.addSubmissionIdSearch(submissionId);
                RA.Session.addCurrentUserHid($scope.currentUser.createHid);
                RA.Session.addSessionMode (SESSION_SUBMISSION_MODE);
                $scope.applyLayout('submission');
            }
            else
            {
                RA.Service.handleServiceResult(result, $scope);
                $scope.pageLoaded = YES;
                $rootScope.hidePageLoading();
            }
            $scope.$apply();
        });

    };

    $scope.findAllFilters = function(callback, refreshAll)
    {
        async.parallel(
            {
                allFilters: function(callback)
                {
                    Dashboard.findFilters(function(result)
                    {
                        var data = RA.Service.handleServiceResult(result, $scope);
                        var isValid = RA.Service.isValidResult(result);
                        if(isValid && data){
                            callback(null, data);
                        }
                        else
                        {
                            callback("ERROR", data);
                        }
                    });
                }
            },

            function(err, result)
            {
                if(err){
                    callback(err, null);
                    return;
                }
                var filters = result.allFilters;
                $scope.filterList = filters.length > 0 ? filters : [];
                $scope.defaultFilter = DBoard.Util.doExtractDefaultFilter(filters);
                $scope.myInboxFilter = DBoard.Util.doExtractMyInboxFilter(filters);

                if ($scope.defaultFilter == null)
                    $scope.defaultFilter = $scope.myInboxFilter;

                $scope.assignedToFilter = DBoard.Util.doExtractAssignedToFilter(filters); //removes assigned to filter from list

                if (refreshAll === TRUE)
                {
                    var showAssignToList = $scope.shouldAssignListBeDisplayed();
                    DBoard.UI.doRenderFilterList($scope.filterList, $scope.myInboxFilter, $scope.assignedToFilter,showAssignToList);

                }
                else {
                    DBoard.UI.doRenderFilterList($scope.filterList, $scope.myInboxFilter, null);

                }
                DBoard.UI.doSetResultTotalCount($scope.currentFilterResultsCountOnly);


                if (callback != undefined)
                    callback(null,null);
            }
        );
    };
    $scope.shouldAssignListBeDisplayed = function()
    {
        if( $scope.haveAnyInboxFiltersBeenRan() )
        {
            return false;
        }
        else if( $scope.haveAnyAssignedToFiltersBeenRan() )
        {
            return true;
        }

        return false;
    }


    $scope.haveAnyInboxFiltersBeenRan = function()
    {
        if( $scope.myInboxFilter && $scope.myInboxFilter.filterRanIndicatorMap[$scope.myInboxFilter.filterName] == true )
        {
            return true;
        }
        $.each($scope.filterList, function( index, filter )
        {
            if( filter.filterRanIndicatorMap[filter.filterName] == true )
            {
                return true;
            }
        } );

        return false;
    }
    $scope.haveAnyAssignedToFiltersBeenRan = function()
    {
        var assignedFilterRan = false;
        if($scope.assignedToFilter) {
            $.each($scope.assignedToFilter.assignedToList, function (index, hid) {
                if ($scope.assignedToFilter.filterRanIndicatorMap[hid] == true) {
                    assignedFilterRan = true;
                }
            });
        }

        return assignedFilterRan;
    }

    $scope.findAssignToFilters = function(callback)
    {
        async.parallel(
            {
                allFilters: function(callback)
                {
                    Dashboard.findFilters(function(result)
                    {
                        var data = RA.Service.handleServiceResult(result, $scope);
                        var isValid = RA.Service.isValidResult(result);
                        if(isValid && data){
                            callback(null, data);
                        }
                        else
                        {
                            callback("ERROR", data);
                        }
                    });
                }
            },

            function(err, result)
            {
                if(err){
                    callback(err, null);
                    return;
                }
                var filters = result.allFilters;
                $scope.assignedToFilter = DBoard.Util.doExtractAssignedToFilter(filters); //removes assigned to filter from list
                if (callback != undefined)
                {
                    callback(null,null);
                }

            }
        );
    };

    //called on page load
    async.auto(
        {
            editAccess:function(callback)
            {
                Presentation.hasPermission({'resource':'submission', 'action': 'edit'},function(result)
                {
                    var data = RA.Service.handleServiceResult(result, $scope);
                    $scope.editAccess = data;
                    callback(null, data);
                })
            },
            filters: function(callback)
            {
                $scope.findAllFilters(callback, TRUE);
            },
            headings: ['filters', function (callback)
            {
                // this must occur because we find the results because we need the column headings when
                // creating the table
                Presentation.findDashboardResultColumnList(function(result)
                {
                    var data = RA.Service.handleServiceResult(result, $scope);
                    var dashboardColumnList = data;

                    var convertedArray = [];
                    // Populate Sort List and Assign Table Column Values
                    if (dashboardColumnList != null) {
                        for (var i in dashboardColumnList)
                        {
                            if(i.indexOf('@') === -1 )
                            {
                                var newItem = {"name": i, "label": dashboardColumnList[i]};
                                // Assign Column Values to Table (based upon Map Stored in NCUBE)

                                DBoard.UI.assignColumnValues(i, dashboardColumnList[i]);
                                if((i === "bu1" && HIDE_BU1_SPECIFIC_COLUMN) || (i === "bu2" && HIDE_BU2_SPECIFIC_COLUMN)) {
                                    // If BU Specific Field should be hidden, do not push into sort array
                                }
                                else {
                                    convertedArray.push(newItem);
                                }
                            }
                        }
                    }
                    $scope.sortOrderSelectList = convertedArray;
                    //  Remove New Characters from Sort Order List
                    for (var n in $scope.sortOrderSelectList) {
                        $scope.sortOrderSelectList[n].label= $scope.sortOrderSelectList[n].label.replace("<br>"," ");
                    }

                    callback(null);
                });
            }],
            rowCountOptions: ['headings', function(callback)
            {
                $scope.findRowCountOptions(callback);
            }],
            dispatch: function(callback)
            {
                var dispatcher = new RA.Service.Dispatcher('dashboard_load');
                dispatcher.dispatch(
                    {
                        myFileLink: function(callback)
                        {
                            Navigation.doGetMyFileLink(function(result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue':dispatcher});
                        },
                        assignToList: function(callback)
                        {
                            Presentation.findAssignToList(function(result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue':dispatcher});
                        },
                        underwriterList: function(callback)
                        {
                            Presentation.findUnderwriterList(function(result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue':dispatcher});
                        },
                        producerHierarchyList: function(callback)
                        {
                            Search.findProducerHierarchy(function(result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue':dispatcher});
                        },
                        assignment:function(callback)
                        {
                            Presentation.findAssignmentReasonList(function(result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue':dispatcher});
                        },
                        endorsementType:function(callback)
                        {
                            Presentation.findEndorsementTypeList(function(result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue':dispatcher});
                        },
                        endorsementSubType:function(callback)
                        {
                            Presentation.findEndorsementSubTypeList(function(result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue':dispatcher});
                        },
                        premiumTier:function(callback)
                        {
                            Presentation.findPremiumTierList(function(result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue':dispatcher});
                        },
                        priority:function(callback)
                        {
                            Presentation.findPriorityList(function(result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue':dispatcher});
                        },
                        cancelType:function(callback)
                        {
                            Presentation.findCancellationTypeList(function(result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue':dispatcher});
                        },
                        cancelReason:function(callback)
                        {
                            Presentation.findCancellationReasonList(function(result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue':dispatcher});
                        },
                        nonRenewalReason:function(callback)
                        {
                            Presentation.findNonRenewalReasonList(function(result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue':dispatcher});
                        },
                        reinstatementReason:function(callback)
                        {
                            Presentation.findReinstatementReasonList(function(result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue':dispatcher});
                        },
                        rewriteReason:function(callback)
                        {
                            Presentation.findRewriteReasonList(function(result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue':dispatcher});
                        },
                        referralStatus:function(callback)
                        {
                            Presentation.findReferralStatusList(function(result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue':dispatcher});
                        },
                        unlockAccess:function(callback)
                        {
                            Presentation.hasPermission({'resource':'submission','action':'unlock'},function(result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue':dispatcher});
                        },
                        renewalType:function(callback)
                        {
                            Presentation.findRenewalProcessingTypeList(function(result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            });
                        },
                        csrList:function(callback)
                        {
                            Presentation.findCSRList(function(result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            });
                        },
                        delegateList:function(callback)
                        {
                            Presentation.findDelegateList(function(result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            });
                        },
                        businessDeveloperList: function(callback)
                        {
                            Presentation.findBusinessDeveloperList(function(result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            });
                        },
                        accountManagerList: function(callback)
                        {
                            Presentation.findAccountManagerList(function(result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            });
                        },
                        lossPreventionList: function(callback)
                        {
                            Presentation.findLossPreventionList(function(result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            });
                        },
                        stateList: function(callback)   // [A]
                        {
                            Presentation.findStateProvinceList('US', function(result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            });
                        },
                        assignmentReasonList: function(callback)   // [A]
                        {
                            Presentation.findAssignmentReasonList(function(result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            });
                        },
                        hiddenFields: function(callback)
                        {
                            var objClasses = ['com.gaic.bue.uwd.ra.common.dto.dashboard.DashboardFilterDto']
                            Dashboard.getHiddenFields(objClasses, function(result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            });
                        },
                        dispositionStatusList:function(callback)
                        {
                            Presentation.findDispositionStatusList(function(result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue':dispatcher});
                        },
                        regionList:function(callback)
                        {
                            Presentation.findRegionList(function(result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            });
                        },
                        policySymbolList:function(callback)
                        {
                            Presentation.findPolicySymbolList(function(result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            });
                        },
                        findBusinessUnitListForProducerLookUp: function(callback)
                        {
                            Presentation.findBusinessUnitListForProducerLookUp(function(result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            });
                        }
                    },
                    function(err, results)
                    {
                        $scope.myFileLink = results.myFileLink;
                        $scope.assignToSelectList = results.assignToList;
                        $scope.assigneeList = results.assignToList;
                        $scope.underwriterSelectList = results.underwriterList;
                        $scope.renewalUnderwriterSelectList = results.underwriterList;

                        $scope.assignToList = results.assignToList;
                        $scope.assignmentReasonList = results.assignment;
                        $scope.endorsementTypeList = results.endorsementType;
                        $scope.endorsementSubTypeList = results.endorsementSubType;
                        $scope.premiumTierList = results.premiumTier;
                        $scope.priorityList = results.priority;
                        $scope.cancellationTypeList = results.cancelType;
                        $scope.cancellationReasonList = results.cancelReason;
                        $scope.nonRenewalReasonList = results.nonRenewalReason;
                        $scope.reinstatementReasonList = results.reinstatementReason;
                        $scope.rewriteReasonList = results.rewriteReason;
                        $scope.referralStatusList = results.referralStatus;
                        $scope.renewalProcessingTypeList = results.renewalType;
                        $scope.csrList = results.csrList;
                        $scope.delegateList = results.delegateList;
                        $scope.businessDeveloperList = results.businessDeveloperList;
                        $scope.accountManagerList = results.accountManagerList;
                        $scope.lossPreventionList = results.lossPreventionList;
                        $scope.dispositionStatusList = RA.Controller.convertObjectToValueLabelPairs(results.dispositionStatusList);
                        $scope.businessUnitListForProducerLookUp = RA.Controller.convertObjectsToLabelAndValue(results.findBusinessUnitListForProducerLookUp);
                        $scope.producerLookUpBuForFilter.value = getSessionItem('businessUnit');
                        $scope.regionList = RA.UI.rpmEnumToList(results.regionList);
                        $scope.stateSelectList = results.stateList;
                        $scope.policySymbolSelectList = results.policySymbolList;
                        $scope.assignmentReasonList = results.assignmentReasonList;
                        var hiddenFields = results.hiddenFields.hiddenFields;

                        $scope.hiddenFields = {};
                        for(var i in hiddenFields){
                            var fieldName = hiddenFields[i];
                            $scope.hiddenFields[fieldName] = fieldName;
                        }

                        if($scope.dispositionStatusList != undefined)
                        {
                            unRevisedDispositionStatusList = angular.copy($scope.dispositionStatusList)
                        }

                        $scope.unlockAccess = results.unlockAccess;

                        if (results.producerHierarchyList != null)
                        {
                            $scope.producerHierarchyList = results.producerHierarchyList;
                            $scope.profitCenterList.push(NONE_OPTION);

                            for(var index in results.producerHierarchyList) {
                                if(index.indexOf('@') === -1 )
                                {
                                    $scope.profitCenterList.push(index);
                                }
                            }
                        }

                        callback(null,null);
                    });
            }
        },
        function(err, results)
        {
            if(err){
                $scope.displayErrorMessages = true;
                $scope.errorMessages = $scope.errorMessages || [];
            }
            removeAssignedFromAssignToSelectList();
            DBoard.UI.initializeFilterCheckboxes( $scope.filterList );
            $scope.initializePendedButtons();
            doEnableDisablePendingButtons();

            $rootScope.hidePageLoading();

            // commenting this out to prevent the dashboard from becoming enabled until all of the dashboard is loaded
            // this is causing issues in production
            //$scope.pageLoaded = YES;

            //refactor for dashboard performance; removed a secondary call for filter counts and
            // moving the following code from the async load to here
            //runs the filter counts after the page has already rendered
            var tempCurrentChartView = getSessionItem(CURRENT_CHART_VIEW);
            if( tempCurrentChartView )
            {
                $scope.currentChartView = tempCurrentChartView;
                $scope.chartViewSelection = tempCurrentChartView;
            }

            var errorsToKeep = [];
            for(var index in $scope.errorMessages)
            {
                if($scope.errorMessages[index].context == "Dashboard Controller")
                {
                    errorsToKeep.push($scope.errorMessages[index]);
                }
            }
            $scope.doRunMySelectedFiltersFromScript(null, RETAIN_TABLE_FILTERS, false, RETAIN_CHART_VIEW, errorsToKeep);

            $scope.$apply();
        }
    );


    removeAssignedFromAssignToSelectList = function( )
    {
        var filteredAssignToSelectList = [];
        if($scope.assignedToFilter && $scope.assignedToFilter.assignedToMap != 'undefined' )
        {
            angular.forEach( $scope.assignToSelectList, function(assignToSelect)
                {
                    var hid = $scope.assignedToFilter.assignedToMap[ assignToSelect.hid ];
                    if( hid == null || hid == 'undefined')
                    {
                        filteredAssignToSelectList.push( assignToSelect );
                    }
                }
            );

        }

        $scope.assignToSelectList =   filteredAssignToSelectList;
    };

    $scope.initializePendedButtons = function initializePendedButtons()
    {
        var pendedSessionValue = getSessionItem(PEOPLE_PENDED_OPTION_SESSION_KEY);

        $timeout(function()
        {
            switch (pendedSessionValue)
            {
                case INCLUDE_PENDED:
                    $('#includeButton').click();
                    break;
                case ONLY_PENDED:
                    $('#onlyButton').click();
                    break;
                default:
                    $('#excludeButton').click();
            }
        });
    };

    $scope.doRunMySelectedFiltersFromGUI = function()
    {
        var dashboardItemsTable = $('#dashboardItemsTable').dataTable();
        if (dashboardItemsTable)
            dashboardItemsTable.fnClearTable();
        DBoard.UI.clearGlobalFilterOnTable();
        setSessionItem(SELECTED_BAR_SESSION_KEY, RESET_VALUE_FOR_SELECTED_BAR);
        $scope.doRunMySelectedFilters(null, false, false, false, DBoard.UI.doGetRunFiltersKey());
    };

    $scope.doRunMySelectedFiltersFromScript = function(callback, retainTableFilters, runLastFilterType, retainChartView, errorsToKeep )
    {
        $scope.doRunMySelectedFilters(callback, retainTableFilters, runLastFilterType, retainChartView, doGetRunFiltersKey(), errorsToKeep);
    };

    $scope.doRunMySelectedFilters = function(callback, retainTableFilters, runLastFilterType, retainChartView , whichFiltersToRun, errorsToKeep )
    {
        var doShowPageLoading = false;
        RA.UI.doClearMessages($scope);

        if(errorsToKeep && errorsToKeep.length > 0)
        {
            for(var index in errorsToKeep)
            {
                $scope.errorMessages.push(errorsToKeep[index]);
            }
        }

        if ($scope.pageLoaded === YES)
        {
            $rootScope.showPageLoading();
            doShowPageLoading = true;
        }

        if( whichFiltersToRun == null || whichFiltersToRun == undefined )
        {
            whichFiltersToRun = RUN_MY_FILTERS;
        }

        if(runLastFilterType != null && runLastFilterType == true){
            whichFiltersToRun = $scope.latestRanFilterType;
        }

        var filtersToRun = [];

        switch (whichFiltersToRun)
        {
            case RUN_MY_FILTERS:
            {
                $scope.latestRanFilterType = RUN_MY_FILTERS;
                filtersToRun = $scope.buildRunMyFilters();
                $scope.selectChartToViewForRunMyFilters(retainChartView, filtersToRun);
                MAX_NUMBER_OF_ROWS_TO_DISPLAY = $scope.rowCount.filters;
                break;
            }
            case RUN_MY_ASSIGNED:
            {
                $scope.latestRanFilterType = RUN_MY_ASSIGNED;
                var assignToList = DBoard.UI.doGetAssignToList();
                MAX_NUMBER_OF_ROWS_TO_DISPLAY = $scope.rowCount.assignedTo;

                if ( $scope.areNoAssignFilteredSelected(assignToList))
                {

                    var filterResults = [{"activityStatusCount":{}, "dashboardItems": [],"defaultSortField": "trnEffectiveDate", "filterName":EMPTY_STRING}];

                    $scope.selectChartToViewRunForRunMyAssignedFilters(retainChartView, filtersToRun);
                    $scope.setCurrentCharView($scope.chartViewSelection);
                    $scope.currentFilterResults = filterResults;

                    var totalCount = 0;
                    $scope.currentResultsTotalCount = totalCount > 999 ? '1000+' : totalCount;

                    DBoard.UI.doSetupChart(filterResults, $scope.currentChartView, retainTableFilters, $scope, $compile);
                    DBoard.UI.doSetUpDataTable($rootScope, $scope, retainTableFilters, $compile, $filter);
                    doDashboardCheck();
                    DBoard.UI.doSetResultTotalCount(filterResults);

                    $scope.pendedOptionSelection = INCLUDE_PENDED;
                    $("#includeButton").click();

                    if (doShowPageLoading)
                        $rootScope.hidePageLoading();
                    else
                        $scope.pageLoaded = YES;

                    $("#runFilterButtonPeople").attr("disabled", true);
                    return;
                }
                else
                {
                    delete assignToList.count;
                    var assignToFilter = $scope.assignedToFilter;
                    filtersToRun = DBoard.Util.doProcessAssignToList(assignToFilter, assignToList);
                    assignToFilter.originalFilterName = assignToFilter.filterName;

                    Dashboard.updateFilter(assignToFilter, function(result)
                    {
                        RA.Service.handleServiceResult(result, $scope);
                    });
                    break;
                }
            }
        }

        // saving the list of filters run, in case they select "Save Current view as a filter"
        $scope.latestRanFilterList = filtersToRun;

        $scope.currentFilterResults = [];
        var asyncFunctions = {};

        // set up the charms list
        $scope.charmsList = [];

        //setup the asyncFunction for each filter
        angular.forEach(filtersToRun, function(filter)
            {
                delete filter.$$hashKey;
                var filterName = filter.filterName;
                var functionKey = DBoard.UI.doGetFilterUiId(filterName);

                // set the number of rows to find
                filter.rowLimit = MAX_NUMBER_OF_ROWS_TO_DISPLAY;

                var charmsItem = {"label": filter.filterName, "onRemove": function() { $scope.removeCharmFilter(filter.filterName);}};
                $scope.charmsList.push(charmsItem);

                asyncFunctions[functionKey] = function(callback)
                {
                    Dashboard.doRunFilter(filter, function(result)
                    {
                        var data = RA.Service.handleServiceResult(result, $scope);
                        var isValid = RA.Service.isValidResult(result);
                        // Loop through SetTRNStatus Modal's Table and update entries using data from the dashboard
                        if (isValid && $scope.table && $scope.table.length > 0) {
                            for (var j = 0, tableLength = $scope.table.length; j < tableLength; j++ )
                            {
                                for(var i = 0, dataLength = data.dashboardItems.length; i < dataLength; i++) {
                                    var dashboardItem = data.dashboardItems[i];
                                    if ($scope.table[j].subId === dashboardItem.submissionId) {
                                        $scope.table[j] = createTRNStatusEntryFromDashboard(dashboardItem, $scope.table[j]);
                                        break;
                                    }
                                }
                            }
                            $scope.$apply();
                        }
                        else
                        {
                            $scope.displayErrorMessages = true;
                            $scope.errorMessages = $scope.errorMessages || [];
                        }

                        callback(null, data);
                    });
                };
            }
        );
        $rootScope.charms.charmsList = $scope.charmsList;

        $scope.doRunFiltersForCount();

        //run the asyncfunction setup above
        async.parallel
        (
            asyncFunctions,
            function(err, result)
            {
                var filterResults = [];
                var filterResult;

                angular.forEach(filtersToRun, function(filter)
                    {
                        if (result[DBoard.UI.doGetFilterUiId(filter.filterName)] === TIMEOUT) {
                            $scope.isTimeoutOpen = true;
                        } else {
                            filterResult =  result[DBoard.UI.doGetFilterUiId(filter.filterName)];
                            if (filterResult) {
                                filterResults.push(filterResult);
                            }
                        }
                    }
                );

                $scope.setCurrentCharView($scope.chartViewSelection);
                $scope.currentFilterResults = filterResults;
                var totalCount = DBoard.UI.doCurrentResultsTotalCount(filterResults);
                $scope.currentResultsTotalCount = totalCount > 999 ? '1000+' : totalCount;

                DBoard.UI.doSetupChart(filterResults, $scope.currentChartView, retainTableFilters, $scope, $compile);
                DBoard.UI.doSetUpDataTable($rootScope, $scope, retainTableFilters, $compile, $filter);
                //Redundant code..
                //doDashboardCheck();
                //DBoard.UI.doSetResultTotalCount(filterResults);
                DBoard.UI.doLastFilterRanCheckBox(filtersToRun, $scope.latestRanFilterType);

                //reorder the "Filters" base on what was just ran
                if( whichFiltersToRun == RUN_MY_FILTERS )
                {
                    var sortedCompleteFilterNameListMinusMyInBoxFilterName = $scope.doSortMyInboxFilterControlList( $scope.filterList, filterResults);
                    DBoard.UI.reorderFilterList( sortedCompleteFilterNameListMinusMyInBoxFilterName,$scope.myInboxFilter ? $scope.myInboxFilter.filterName : "" );
                    $scope.saveUnusedFiltersAsNotRun( $scope.filterList, filterResults );
                }
                else{
                    var sortedCompleteFilterListMinusAssignedFilterList = $scope.doSortAssignedToFilterControlList( $scope.assignedToFilter, filterResults);
                    DBoard.UI.reorderAssignedFilterList( sortedCompleteFilterListMinusAssignedFilterList,LOGIN_USER );
                    $scope.saveUnusedFiltersAsNotRunWhenAssignToRan( $scope.filterList, filtersToRun );
                }


                doValidateFilterCount();


                var lastScreen = getSessionItem(SESSION_LAST_SCREEN_ACCESSED);

                $scope.resetSelectedBarInChart();
                $scope.addMessageForFilterCountsOver1000( filterResults );

                $scope.doSetPendingOptionForSaveAndRunFilter( whichFiltersToRun, filterResults[0] );

                if( filtersToRun && filtersToRun.length > 0 )
                {
                    DBoard.UI.setColumnToSortAndAscendingDescending(filtersToRun[0].defaultSortField, filtersToRun[0].defaultSortOrder );
                }

                if (doShowPageLoading)
                {
                    $rootScope.hidePageLoading();
                }
                else
                {
                    $scope.pageLoaded = YES;
                }

                $scope.$apply();

                if (callback != undefined)
                {
                    callback(null,null)
                }
            }

        );


    };

    $scope.doSetPendingOptionForSaveAndRunFilter = function doSetPendingOptionForSaveAndRunFilter( whichFilterTypeToRun, filter )
    {
        var pendingOption = INCLUDE_PENDED;
        if( whichFilterTypeToRun === RUN_MY_ASSIGNED )
        {
            pendingOption = $scope.currentPendedOption;
        }
        else
        {
            if( filter )
            {
                pendingOption = filter.pendedOption;
            }
        }

        $scope.doSetPendingOption( pendingOption );

    }

    $scope.resetSelectedBarInChart = function resetSelectedBarInChart()
    {
        var highCharBarName = getSessionItem( SELECTED_BAR_SESSION_KEY );
        var barNames;
        var seriesIndex;
        var dataIndex;

        if( highCharBarName )
        {
            barNames = $scope.buildListOfBarNames(highCharBarName);
            seriesIndex =  $scope.findDashboardChartSeriesIndex( barNames );
            if( seriesIndex != NOT_FOUND )
            {
                dataIndex = $scope.findDashboarChartDataIndex( seriesIndex, barNames );
                if( dataIndex != NOT_FOUND )
                {
                    dashboardChart.series[seriesIndex].data[dataIndex].firePointEvent('click', {ctrlKey: true});
                }
            }
        }

    }

    $scope.findDashboardChartSeriesIndex = function findDashboardChartSeriesIndex( barNames )
    {
        if( barNames.length == LENGTH_TO_INDICATE_INDEX_0 )
        {
            return 0;
        }

        var seriesIndex = NOT_FOUND;
        $.each(dashboardChart.series, function( index, series )
        {
            if( series.name == barNames[BAR_STATUS_NAME_INDEX] )
            {
                seriesIndex = index;
                return false;
            }
        } );

        return seriesIndex;

    }

    $scope.findDashboarChartDataIndex = function findDashboarChartDataIndex( seriesIndex, barNames )
    {
        var barName = barNames[0]
        if( barNames.length == 2 )
        {
            barName = barNames[1];
        }

        var dataIndex = NOT_FOUND;
        $.each(dashboardChart.series[seriesIndex].data, function( index, data )
        {
            if( data.name == barName )
            {
                dataIndex = index;
                return false
            }
        } );

        return dataIndex;

    }

    $scope.buildListOfBarNames = function buildListOfBarNames(highCharBarName)
    {
        var names = highCharBarName.split(':');
        var barChartNames = [];

        if( names.length == 1 )
        {
            barChartNames[0] = highCharBarName;
        }
        else
        {
            barChartNames[0] =  names[1];
            barChartNames[1] =  highCharBarName;
        }

        return barChartNames;
    }

    $scope.buildRunMyFilters = function buildRunMyFilters()
    {
        var myFiltersFiltersToRun = [];
        var selectedFilterNames = DBoard.UI.doGetSelectedFilters();
        angular.forEach(selectedFilterNames, function(selectedFilterName)
            {
                return angular.forEach($scope.filterList, function(filter)
                    {
                        if (selectedFilterName == filter.filterName)
                        {
                            filter.filterRanIndicatorMap[filter.filterName] = true;
                            myFiltersFiltersToRun.push(filter);
                            return false;
                        }
                    }
                );
            }
        );
        if (myFiltersFiltersToRun.length < 1 && $scope.defaultFilter)
        {
            $scope.defaultFilter.filterRanIndicatorMap[$scope.defaultFilter.filterName] = true;
            myFiltersFiltersToRun.push($scope.defaultFilter);
        }

        return myFiltersFiltersToRun;
    }
    $scope.areNoAssignFilteredSelected = function areNoAssignFilteredSelected(assignToList)
    {
        return assignToList.runCount < 1
    }

    $scope.selectChartToViewForRunMyFilters = function selectChartToViewForRunMyFilters(retainChartView, filtersToRun)
    {
        if(RA.UI.isNullorEmpty(retainChartView) || retainChartView == false)
        {

            if(filtersToRun.length <= 1)
            {
                $scope.chartViewSelection = filtersToRun[0].viewByOption ? filtersToRun[0].viewByOption : VIEW_BY_ACTIVITY;
            }
            else if(filtersToRun.length <= 4)
            {
                $scope.chartViewSelection = VIEW_BY_ACTIVITY;
            }
            else{
                $scope.chartViewSelection = VIEW_BY_TOTALS;
            }
        }

    }

    $scope.selectChartToViewRunForRunMyAssignedFilters = function selectChartToViewRunForRunMyAssignedFilters(retainChartView, filtersToRun)
    {
        if(RA.UI.isNullorEmpty(retainChartView) || retainChartView == false)
        {
            if($scope.assignToList.length == 0 || filtersToRun.length == 0)
            {
                $scope.chartViewSelection = VIEW_BY_ACTIVITY;
            }
            else if($scope.assignToList.length = 1)
            {
                $scope.chartViewSelection = filtersToRun[0].viewByOption ? filtersToRun[0].viewByOption : VIEW_BY_ACTIVITY;
            }
            else if(assignToList.length <= 4)
            {
                $scope.chartViewSelection = VIEW_BY_ACTIVITY;
            }
            else
            {
                $scope.chartViewSelection = VIEW_BY_TOTALS;
            }
        }
    }


    $scope.saveUnusedFiltersAsNotRunWhenAssignToRan = function( filterList, filtersToRun )
    {
        var filteredFilterList = [];

        $.each( filterList, function( index, filter)
        {
            filter.filterRanIndicatorMap[filter.filterName] = false;
            filteredFilterList.push( filter );
        }) ;

        var filterNameMap = {};

        $.each(filtersToRun, function(index, filter)
        {
            filterNameMap[filter.filterName] = filter.filterName;
        } );


        $.each($scope.assignedToFilter.assignedToList, function(index, assignedToHid)
        {
            var filterName = $scope.assignedToFilter.assignedToMap[assignedToHid];

            if( filterNameMap[filterName] == undefined || filterNameMap[filterName] == '' )
            {
                $scope.assignedToFilter.filterRanIndicatorMap[assignedToHid] = false;
            }
            else
            {
                $scope.assignedToFilter.filterRanIndicatorMap[assignedToHid] = true;
            }

        } );

        filteredFilterList.push( $scope.assignedToFilter );
        async.auto
        (
            {
                updateMultipleFilters: function(callback)
                {
                    Dashboard.updateMultipleFilters(filteredFilterList, function(result)
                    {
                        var data = RA.Service.handleServiceResult(result, $scope);
                        callback(null, data);
                    })
                }
            },
            function(err, results)
            {
            }
        );

        DBoard.UI.setFilterCheckboxes( filteredFilterList, false );
    };

    $scope.saveUnusedFiltersAsNotRun = function( filterList, filterResults )
    {
        var filteredFilterList = [];

        $.each( filterList, function( index, filter)
        {
            filteredFilterList.push( filter );
        }) ;

        $.each(filterResults, function(index, filter)
        {
            $scope.removeFilterItem(filteredFilterList, filter);
        } );


        $.each(filteredFilterList, function(index, filter)
        {
            filter.filterRanIndicatorMap[filter.filterName] = false;
        } );

        //reset all the assignTo Filters to not ran
        if($scope.assignedToFilter) {
            $.each($scope.assignedToFilter.assignedToList, function (index, assignedToHid) {
                if (assignedToHid.indexOf('@') === -1)
                    $scope.assignedToFilter.filterRanIndicatorMap[assignedToHid] = false;
            });

            filteredFilterList.push( $scope.assignedToFilter );
        }



        async.auto
        (
            {
                updateMultipleFilters: function(callback)
                {
                    Dashboard.updateMultipleFilters(filteredFilterList, function(result)
                    {
                        var data = RA.Service.handleServiceResult(result, $scope);
                        callback(null, data);
                    })
                }
            },
            function(err, results)
            {
            }
        );

        DBoard.UI.setFilterCheckboxes( filteredFilterList, false );
    };

    $scope.buildFilterNameListFromFilter = function( filters )
    {
        var filterNameList = [];
        $.each( filters, function( index, filter)
        {
            filterNameList.push( filter.filterName );
        }) ;

        return filterNameList;
    }
    $scope.doSortMyInboxFilterControlList = function( completeFilterList,  checkedFilterResults)
    {
        var completeFilterNameList = $scope.buildFilterNameListFromFilter( completeFilterList );

        var checkedFilterNameResults = $scope.buildFilterNameListFromFilter( checkedFilterResults );

        return $scope.doSortFilterControlList( completeFilterNameList,  checkedFilterNameResults, MY_INBOX_FILTER_NM );
    }
    $scope.doSortAssignedToFilterControlList = function( completeFilterList,  checkedFilterResults)
    {
        var completeFilterNameList = [];
        $.each( completeFilterList.assignedToList, function( index, hid )
        {
            completeFilterNameList.push(completeFilterList.assignedToMap[hid]);
        } );


        var checkedFilterNameResults = $scope.buildFilterNameListFromFilter( checkedFilterResults );

        return $scope.doSortFilterControlList( completeFilterNameList,  checkedFilterNameResults, LOGIN_USER );
    }

    $scope.doSortFilterControlList = function( completeFilterNameList,  checkedFilterNameResults, firstFilterName)
    {
        var uncheckedFilterNameList = [];
        $.each( completeFilterNameList, function( index, filterName)
        {
            if( filterName != firstFilterName )
            {
                uncheckedFilterNameList.push(filterName);
            }
        } );
        var checkedFilterNameList = [];

        $.each(checkedFilterNameResults, function(index, checkedFilterNameResult)
        {
            if( checkedFilterNameResult != firstFilterName )
            {
                checkedFilterNameList.push( checkedFilterNameResult );
            }

            $scope.removeFilterName(uncheckedFilterNameList, checkedFilterNameList);
        } );


        uncheckedFilterNameList.sort($scope.sortFilterNames);
        checkedFilterNameList.sort($scope.sortFilterNames);

        var sortedFilterNameList = [] ;
        $.each( checkedFilterNameList, function( index, checkedFilterName)
        {
            sortedFilterNameList.push(checkedFilterName);
        } );
        $.each( uncheckedFilterNameList, function( index, uncheckedFilterName)
        {
            sortedFilterNameList.push(uncheckedFilterName);
        }  );


        return sortedFilterNameList;

    }

    $scope.removeCharmFilter = function(filterName) {
        $('[name="' + filterName + '"]').prop('checked', false);
        if ($scope.latestRanFilterType != doGetRunFiltersKey() ) {
            if ($scope.latestRanFilterType == RUN_MY_FILTERS) {
                $('#myFiltersHeader').click();
            } else {
                $('#myAssignedToHeader').click();
            }
        }
        $scope.doRunMySelectedFiltersFromScript(null, DO_NOT_RETAIN_TABLE_FILTERS, false, RETAIN_CHART_VIEW);
    };

    $scope.removeFilterItem = function( filterList, valueToRemove )
    {
        var indexOfItemToRemove = -1;
        $.each(filterList, function(index, filter)
        {
            if( valueToRemove.filterName == filter.filterName )
            {
                indexOfItemToRemove = index;
            }
        } );

        if ( indexOfItemToRemove != -1)
        {
            filterList.splice(indexOfItemToRemove, 1);
        }
    };
    $scope.removeFilterName = function( filterNameList, valueNameToRemove )
    {
        var indexOfItemToRemove = -1;
        $.each(filterNameList, function(index, filterName)
        {
            if( valueNameToRemove == filterName )
            {
                indexOfItemToRemove = index;
            }
        } );

        if ( indexOfItemToRemove != -1)
        {
            filterNameList.splice(indexOfItemToRemove, 1);
        }
    };

    $scope.sortFilterNames = function( filterNameA, filterNameB)
    {

        if(filterNameA  < filterNameB)
        {
            return -1;
        }
        else if(filterNameA > filterNameB)
        {
            return 1;
        }

        return 0;
    }


    $scope.saveActivityDetails = function (callback)
    {
        var dataTable = $('#dashboardItemsTable').dataTable({"bRetrieve":true});
        RA.UI.doClearMessages($scope);
        var activities = [];
        var changeDetailsAdditionalFields = null;
        var underwriterHid = $scope.activityDetails.underwriterHid;

        if(underwriterHid){
            changeDetailsAdditionalFields = {'underwriterHid':underwriterHid};
        }

        if($scope.isSingle)
        {
            $scope.activityDetails.activityComments = null;
            activities.push($scope.activityDetails);
        } else if (!$scope.isSingle && $scope.hasReminders) {
            $('.dashboardCheck:checkbox:checked').each(function()
            {
                var dataTable = $('#dashboardItemsTable').dataTable({"bRetrieve":true});
                var rowIndex = dataTable.fnGetPosition($(this).closest('tr')[0]);
                var rowData = dataTable.fnGetData(rowIndex);
                var activityId = rowData[15];

                var actLocal = jQuery.extend(true, {}, $scope.activityDetails);
                actLocal.activityComments = null;
                actLocal.activityId = activityId;
                activities.push(actLocal);
            });
        } else {
            angular.forEach($scope.table, function(value, key)
            {
                if(value.isValid) {
                    var rowData = $filter('filter')(dataTable.fnGetData(), function(element, index, array) { return value.subId === element[13] })[0];
                    if (rowData) {
                        var activityId = rowData[15];
                        var submissionId = rowData[13];
                        var actLocal = jQuery.extend(true, {}, $scope.activityDetails);

                        actLocal.activityId = activityId;
                        actLocal.activityComments = null;
                        actLocal.sourceId = submissionId;
                        activities.push(actLocal);
                    }
                } else {
                    return true;
                }
            });
        }

        $rootScope.showPageLoading();

        $scope.validateClearableFields();
        Activity.saveActivityDetails(activities, $scope.clearedFieldsList, changeDetailsAdditionalFields, function(result)
        {
            var resultSaveActivityDetails = {
                status: result.data['ActivityController.saveActivityDetails'].status,
                data: RA.Service.handleServiceResult(result, $scope),
                messages: result.data['ActivityController.saveActivityDetails'].messages
            };
            result.status = resultSaveActivityDetails.status;
            result.messages = resultSaveActivityDetails.messages;

            if (result.status === true) {
                $scope.doToggleActivityDetailsModal();
                $scope.doRunMySelectedFiltersFromScript(null, RETAIN_TABLE_FILTERS, true, RETAIN_CHART_VIEW);
                $scope.$apply();
                if (callback) {
                    callback(activities);
                }
            }
            else
            {
                $rootScope.hidePageLoading();
            }
        });
        // This returns false to make sure gaig-modal does not change the ng-model to false, allowing our toggleActivityDetailsModal to do it.
        return false;
    };

    $scope.saveActivitiesAndClose = function()
    {
        RA.UI.doClearMessages($scope);
        var activities = [];
        if($scope.isSingle)
        {
            $scope.activityDetails.activityComments = null;
            activities.push($scope.activityDetails);
        }
        else
        {
            $('.dashboardCheck:checkbox:checked').each(function()
            {
                var dataTable = $('#dashboardItemsTable').dataTable({"bRetrieve":true});
                var rowIndex = dataTable.fnGetPosition($(this).closest('tr')[0]);
                var rowData = dataTable.fnGetData(rowIndex);
                var activityId = rowData[15];

                var actLocal = jQuery.extend(true, {}, $scope.activityDetails);
                actLocal.activityComments = null;
                actLocal.activityId = activityId;
                activities.push(actLocal);
            });
        }

        $rootScope.showPageLoading();

        Activity.saveAndCloseReminders(activities, function(result)
        {
            var data = RA.Service.handleServiceResult(result, $scope);

            if (result.status === true) {
                $scope.doToggleActivityDetailsModal();
                $scope.doRunMySelectedFiltersFromScript(null, RETAIN_TABLE_FILTERS, true, RETAIN_CHART_VIEW);
                $scope.$apply();
            }
        });
        return activities;

    }

    $scope.saveActivitiesAndUnlock = function()
    {
        var dataTable = $('#dashboardItemsTable').dataTable({"bRetrieve":true});
        RA.UI.doClearMessages($scope);
        var activities = [];
        var changeDetailsAdditionalFields = null;
        var underwriterHid = $scope.activityDetails.underwriterHid;

        if(underwriterHid){
            changeDetailsAdditionalFields = {'underwriterHid':underwriterHid}
        }

        if($scope.isSingle)
        {
            $scope.activityDetails.activityComments = null;
            activities.push($scope.activityDetails);
        }
        else
        {
            angular.forEach($scope.table, function(value, key)
            {
                var rowData = $filter('filter')(dataTable.fnGetData(), function(element, index, array) { return value.subId === element[13] })[0];
                if (rowData) {
                    var submissionId = rowData[13];
                    var activityId = rowData[15];

                    var actLocal = jQuery.extend(true, {}, $scope.activityDetails);
                    actLocal.activityId = activityId;
                    actLocal.activityComments = null;
                    actLocal.sourceId = submissionId;
                    activities.push(actLocal);
                }
            });
        }

        $timeout (function(){
            $("#dashboardItemsTable").dataTable().fnDraw();
        },3000);

        $rootScope.showPageLoading();

        $scope.validateClearableFields();
        Activity.saveAndUnlockActivityDetails(activities, $scope.clearedFieldsList, changeDetailsAdditionalFields,function(result)
        {
            var resultSaveActivityDetails = {
                status: result.data['ActivityController.saveAndUnlockActivityDetails'].status,
                data: RA.Service.handleServiceResult(result, $scope),
                messages: result.data['ActivityController.saveAndUnlockActivityDetails'].messages
            };
            result.status = resultSaveActivityDetails.status;
            result.messages = resultSaveActivityDetails.messages;

            if (result.status === true) {
                $scope.doToggleActivityDetailsModal();
                $scope.doRunMySelectedFiltersFromScript(null, RETAIN_TABLE_FILTERS, true, RETAIN_CHART_VIEW);
                $scope.$apply();
            } else {
                $rootScope.hidePageLoading();
            }
        });
        return activities;

    };

    $scope.saveDetailsAndChangeStatus = function(){
        var isSingle = $scope.isSingle;
        $scope.saveActivityDetails(function(activities) {
            if (isSingle) {
                $scope.doToggleTRNStatusModal([$scope.activityDetails]);
            } else {
                if (activities.length > 0) {
                    $scope.isSingle = false;
                    $scope.doToggleTRNStatusModal(activities);
                }
            }
        });
    };

    $scope.unpend = function()
    {
        $scope.activityDetails.pendingDate = RA.UI.doMakeCurrentDateMMDDYYYY(new Date());
    };

    $scope.doRunFiltersForCount = function(filterToRefresh, selectedHid, onPageLoad, event)
    {
        if (event) {
            event.preventDefault();
        }

        var filters = [];
        var singleRefresh = FALSE;
        $scope.filtersAreRunning = true;
        $("#runFilterButtonPeople").attr("disabled", true);


        if (filterToRefresh == null && $scope.filterList.length > 0)
        {
            filters = $scope.filterList.slice(0);
            if($scope.assignedToFilter)
                filters.push($scope.assignedToFilter);
        }
        else
        {
            filters.push(filterToRefresh);
            singleRefresh = TRUE;
        }

        if (singleRefresh == TRUE)
            DBoard.UI.doSetFilterRefreshPlaceholder(filterToRefresh);

        var filterFunctions = {};

        angular.forEach(filters, function(filter, i)
            {
                if(filter) {
                    delete filter.$$hashKey;

                    //local scoped list to hold filters to run.
                    //Using this list to extract assigned to people.
                    var filterList = [];

                    if (MY_ASSIGNED_TO_FILTER_NM == filter.filterName) {
                        //remove the my assign filter from the list of filters to run
                        filters.splice(i, 1);
                        angular.forEach(filter.assignedToMap, function (name, hid) {
                                if (hid.indexOf('@') > -1) {
                                    delete filter.assignedToMap[hid];
                                }
                                else if (RA.UI.isNullorEmpty(selectedHid) || selectedHid === hid) {
                                    //creating a filter for each user in the assigned to list
                                    var copyFilter = DBoard.Util.doCopyFilter(filter);
                                    copyFilter.filterName = name;
                                    copyFilter.assignedToList = [hid];
                                    copyFilter.assignedToMap[hid] = name;
                                    //push to closure filters list
                                    filters.push(copyFilter);

                                    //push to local filter list so that a function is created for the filter
                                    filterList.push(copyFilter);
                                }
                            }
                        );
                    }
                    else
                        filterList.push(filter);

                    //create a function for each filter in the list
                    angular.forEach(filterList, function (filter) {
                            filter.countOnly = true;
                            var filterFunction = function (callback) {
                                Dashboard.doRunFilterForCount(filter, function (result) {
                                    var data = RA.Service.handleServiceResult(result, $scope);
                                    callback(null, data);
                                });
                            };
                            if (!onPageLoad) {
                                DBoard.UI.doSetFilterRefreshPlaceholder(filter);
                            }
                            filterFunctions[filter.filterName] = filterFunction;
                        }
                    );
                }
            }
        );


        async.parallel
        (
            filterFunctions,
            function(err, results)
            {
                var filterResults = [];

                $.each(filters, function(i, filter)
                    {
                        if(filter) {
                            filter.countOnly = false;
                            filterResults.push(results[filter.filterName]);
                        }
                    }
                );

                $scope.currentFilterResultsCountOnly = filterResults;
                DBoard.UI.doSetResultTotalCount(filterResults);
                $scope.filtersAreRunning = false;
                doDetermineActivityButton();
                $scope.$apply();

                if (singleRefresh == TRUE)
                    $rootScope.hidePageLoading();
            }
        );
    };

    $scope.checkActivityTypes = function ()
    {
        $scope.disableTrnEffDateFieldOnly = false;
        var foundENDT = false;
        var foundCANC = false;
        var foundRMND = false;
        var foundREIN = false;
        var foundCNRW = false;
        var foundNONR = false;
        var foundNRRC = false;
        var foundCRCH = false;
        var foundRENW = false;
        var foundOTHR = false;
        var subTypes = [];
        var typeCount = 0;
        for (var i = 0; i < $scope.table.length; i++)
        {
            var obj = $scope.table[i];
            switch (obj.type)
            {
                case ACTIVITY_TYPE_ENDORSEMENT:
                    if(!foundENDT) typeCount++;
                    foundENDT = true;
                    break;
                case ACTIVITY_TYPE_CANCELLATION:
                    if(!foundCANC) typeCount++;
                    foundCANC = true;
                    subTypes.push(obj.subType);
                    break;
                case ACTIVITY_TYPE_REMINDER:
                    if(!foundRMND) typeCount++;
                    foundRMND = true;
                    $scope.disableTrnEffDateFieldOnly = true;
                    break;
                case ACTIVITY_TYPE_REINSTATEMENT:
                    if(!foundREIN) typeCount++;
                    foundREIN = true;
                    $scope.disableTrnEffDateFieldOnly = true;
                    break;
                case ACTIVITY_TYPE_NON_RENEWAL:
                    if(!foundNONR) typeCount++;
                    foundNONR = true;
                    $scope.disableTrnEffDateFieldOnly = true;
                    break;
                case ACTIVITY_TYPE_NON_RENEWAL_REASON_CHANGE:
                    if(!foundNRRC) typeCount++;
                    foundNRRC = true;
                    $scope.disableTrnEffDateFieldOnly = true;
                    break;
                case ACTIVITY_TYPE_CANCEL_REASON_CHANGE:
                    if(!foundCRCH) typeCount++;
                    foundCRCH = true;
                    $scope.disableTrnEffDateFieldOnly = true;
                    break;
                case ACTIVITY_TYPE_NEW_BUSINESS:
                    if(!foundCNRW) typeCount++;
                    foundCNRW = obj.subType == ACTIVITY_TYPE_NBS_REWRITE;
                    $scope.disableTrnEffDateFieldOnly = true;
                    break;
                case ACTIVITY_TYPE_RENEWAL:
                    var isRewrite = obj.subType == ACTIVITY_TYPE_REN_REWRITE;
                    if(!foundCNRW && isRewrite) typeCount++;
                    foundCNRW = isRewrite;

                    if(!foundRENW && !isRewrite) typeCount++;
                    foundRENW = !isRewrite;
                    $scope.disableTrnEffDateFieldOnly = true;
                    break;
                case ACTIVITY_TYPE_TEMPORARY_REINSTATEMENT:
                    $scope.disableTrnEffDateFieldOnly = true;
                    break;
                case ACTIVITY_TYPE_REVERSE_NON_RENEWAL:
                    $scope.disableTrnEffDateFieldOnly = true;
                    break;
                case ACTIVITY_TYPE_PREM_AUDIT:
                    $scope.disableTrnEffDateFieldOnly = true;
                    break;
                default:
                    if(!foundOTHR) typeCount++;
                    foundOTHR = true;
                    break;
            }

            // For UD, if transaction is previously worked then disable the transaction effective date field regardless of transaction type.
            if (obj.isWorked === "YES" && obj.isNonUD === "NO")
            {
                $scope.disableTrnEffDateFieldOnly = true;
            }
        }

        var oneType = typeCount == 1;
        $scope.hasReminders = foundRMND;
        $scope.endorsementOnly = foundENDT && oneType;
        $scope.cancellationOnly = foundCANC && oneType;
        $scope.reinstatementOnly = foundREIN && oneType;
        $scope.cancelRewriteOnly = foundCNRW && oneType;
        $scope.reminderOnly = foundRMND && oneType;
        $scope.nonRenewalOnly = foundNONR && oneType;
        $scope.nonRenewalReasonChangeOnly = foundNRRC && oneType;
        $scope.cancelReasonChangeOnly = foundCRCH && oneType;
        $scope.renewalOnly = foundRENW && oneType;

        var count = 0;
        if($scope.cancellationOnly)
        {
            var last = null;
            for(var i = 0; i < subTypes.length; i++)
            {
                var st = subTypes[i];
                count += !last || last != st ? 1 : 0;
                last = st;
            }
        }
        $scope.hasBothCancelTypes = count > 1;

        if($scope.reminderOnly)
        {
            $('#detailUnlock').hide();
        }
        else
        {
            $('#detailUnlock').show();
        }

        if(!foundRMND || ($scope.table.length > 1 && !$scope.reminderOnly))
        {
            $('#detailCloseReminder').hide();
        }
        else
        {
            $('#detailCloseReminder').show();
        }
    };

    $scope.doGatherMergedData = function(listOfFilters, filterName) {
        var mergedList = [];
        $.each(listOfFilters, function(index, filter)
        {

            switch (filterName)
            {
                case DATA_ASSIGN_TO:
                    if (filter.assignedToList != null) {
                        $.each(filter.assignedToList, function(index, assignedTo) {
                            mergedList.push(assignedTo);
                        });
                    }
                    break;
                case DATA_UNDERWRITER:
                    if (filter.underwriterList != null) {
                        $.each(filter.underwriterList, function(index, underwriter) {
                            mergedList.push(underwriter);
                        });
                    }
                    break;
                case DATA_PRODUCER_CODE:
                    if (filter.producerCodeList != null) {
                        $.each(filter.producerCodeList, function(index, producerCode) {
                            mergedList.push(producerCode);
                        });
                    }
                    break;
                case DATA_PROFIT_CENTER:
                    if (filter.profitCenterList != null) {
                        $.each(filter.profitCenterList, function(index, profitCenter) {
                            mergedList.push(profitCenter);
                        });
                    }
                    break;
                case DATA_TERRITORY:
                    if (filter.territoryList != null) {
                        $.each(filter.territoryList, function(index, territory) {
                            mergedList.push(territory);
                        });
                    }
                    break;
                case DATA_FIELD:
                    if (filter.fieldList != null) {
                        $.each(filter.fieldList, function(index, field) {
                            mergedList.push(field);
                        });
                    }
                    break;
                case DATA_STATES:
                    if (filter.stateList != null) {
                        $.each(filter.stateList, function(index, field) {
                            mergedList.push(field);
                        });
                    }
                    break;
            }
        });
        return mergedList;
    };

    $scope.doVerifyDates = function(listOfFilters, filterName) {
        var firstNeedByDateTo = listOfFilters[0].needByDateTo;
        var firstNeedByDateFrom = listOfFilters[0].needByDateFrom;
        var firstEffectiveDateTo = listOfFilters[0].effectiveDateTo;
        var firstEffectiveDateFrom = listOfFilters[0].effectiveDateFrom;
        var messages = "";

        $.each(listOfFilters, function(index, filter)
        {
            switch (filterName)
            {
                case DATA_NEED_BY_DATE_TO:
                    if (filter.needByDateTo != firstNeedByDateTo) {
                        messages = {"context":"Error","type":MESSAGE_ERROR,"text":"Can't determine Need By Date - To."};
                        break;
                    }
                    break;
                case DATA_NEED_BY_DATE_FROM:
                    if (filter.needByDateFrom != firstNeedByDateFrom) {
                        messages = {"context":"Error","type":MESSAGE_ERROR,"text":"Can't determine Need By Date - From."};
                        break;
                    }
                    break;
                case DATA_EFFECTIVE_DATE_TO:
                    if (filter.effectiveDateTo != firstEffectiveDateTo) {
                        messages = {"context":"Error","type":MESSAGE_ERROR,"text":"Can't determine Effective Date - To."};
                        break;
                    }
                    break;
                case DATA_EFFECTIVE_DATE_FROM:
                    if (filter.effectiveDateFrom != firstEffectiveDateFrom) {
                        messages = {"context":"Error","type":MESSAGE_ERROR,"text":"Can't determine Effective Date - From."};
                        break;
                    }
                    break;
            }
        });
        return messages;
    };

    $scope.doUnlockActivities = function(anchor)
    {
        var rowData = "";
        var listOfActivities = [];
        var i = 0;

        if (anchor != null) {
            var dataTable = $('#dashboardItemsTable').dataTable({"bRetrieve":true});
            var rowIndex = dataTable.fnGetPosition($(anchor).closest('tr')[0]);
            rowData = dataTable.fnGetData(rowIndex);
            var activityId = rowData[15];
            var submissionId = rowData[13];

            alert('1 activity was successfully unlocked.');

            var actDto = {"activityId": activityId, "sourceId": submissionId};
            listOfActivities.push(actDto);
        } else {
            $('.dashboardCheck:checkbox:checked').each(function()
            {
                var dataTable = $('#dashboardItemsTable').dataTable({"bRetrieve":true});
                var rowIndex = dataTable.fnGetPosition($(this).closest('tr')[0]);
                rowData = dataTable.fnGetData(rowIndex);
                var activityId = rowData[15];
                var submissionId = rowData[13];

                var actDto = {"activityId": activityId, "sourceId": submissionId};
                listOfActivities.push(actDto);

                var txt = rowData[2];
                var isLocked = (txt.indexOf("lock") >= 0);

                if (isLocked){
                    i++;
                }
            });

            if (i == 1){
                alert ('1 activity was successfully unlocked');
            }
            else{
                alert (i + ' activities were successfully unlocked.');
            }
        }

        Activity.doUnlockActivities(listOfActivities, function(result)
        {
            var data = RA.Service.handleServiceResult(result, $scope);

            if (result.status === true) {
                $scope.doRunMySelectedFiltersFromScript(null, RETAIN_TABLE_FILTERS, true, RETAIN_CHART_VIEW);
                $('#changeDetailsButton').attr('disabled',true);
                $('#setTRNStatusButton').attr('disabled',true);
                $('#unlockButton').attr('disabled',true);
                $scope.$apply();

            } else {
                $scope.pageLoaded = YES;
                $rootScope.hidePageLoading();
            }

        });
    };

    $scope.doToggleTimeoutModal = function()
    {
        $scope.isTimeoutOpen = !$scope.isTimeoutOpen;
    };

    $scope.toggleConfirmWorkModalDash = function ()
    {
        $scope.isConfirmWorkDash = !$scope.isConfirmWorkDash;
    };

    $scope.toggleConfirmOutOfSequenceModal = function()
    {
        $scope.isConfirmOutOfSequenceOpen = !$scope.isConfirmOutOfSequenceOpen;
    };
    $scope.toggleConfirmCommissionOutOfSequenceModal = function()
    {
        $scope.isConfirmCommissionOutOfSequenceOpen = !$scope.isConfirmCommissionOutOfSequenceOpen;
    };

    $scope.setConfirmWorkValueDash = function (val)
    {
        $scope.toggleConfirmWorkModalDash();
        if(val) {
            $scope.continueWorkActivityDash()
        }
        $scope.confirmApply.apply();
    };

    $scope.doToggleCopyFromFilter = function()
    {
        var filterToCopy = $scope.directiveModels.filterToCopyFrom;
        var filterToCopyObj = null;

        if (filterToCopy instanceof Object) {
            filterToCopyObj = filterToCopy;
        } else {
            filterToCopyObj = $.parseJSON(filterToCopy);
        }

        if (filterToCopyObj.filterName != null) {
            $scope.directiveModels.editFilter = DBoard.Util.doCopyFilter(filterToCopyObj);
            $scope.doSetEditFilter();
            $scope.directiveModels.filterToCopyFrom = EMPTY_STRING;
        }
    };

    $scope.resetClearableFields = function(){
        $scope.clearFields.assignmentReason = false;
        $scope.clearFields.premiumTier = false;
        $scope.clearFields.needByDate = false;
        $scope.clearFields.priority = false;
        $scope.clearedFields = [];
    };

    $scope.disableFields = function(){
        var data;
        var changeDetailsAdditionalFields = {'underwriter':'underwriter'};
        Activity.findDisabledFields(changeDetailsAdditionalFields, function (result) {
            data = RA.Service.handleServiceResult(result, $scope);
            $scope.disabledFields = data;
        });
    };

    $scope.doToggleActivityDetailsModal = function(modalTable)
    {
        $scope.showComments = false;
        $scope.resetClearableFields();
        $scope.disableFields();

        $scope.isActivityDetailsOpen = !$scope.isActivityDetailsOpen;
        if(!$scope.isActivityDetailsOpen)
        {
            $scope.isSingleInActivityDetails = false;
            $scope.isSingle = false;
            $scope.changeDetails = false;
            $scope.changeDetailsTable = null;
            RA.UI.doClearMessages($scope);
        }
        else if(!$scope.isSingle)
        {
            $scope.activityDetailsTitle = "Change Activity Details";
            $('#detailClose').hide();
            $scope.disableUpdate = false;
            $scope.showCommentsLink = false;
            $scope.showCommentsLabel ='Show All Comments';
            if ($scope.activityDetails.sourceId) {
                $scope.activityDetails = {"sourceId":$scope.activityDetails.sourceId};
            }
            $scope.resetActivityDetails();
            $scope.table = [];
            var rowData = "";
            var isAnyActivityValid = false;
            var isValid = false;
            if (modalTable) {
                var dataTable = $('#dashboardItemsTable').dataTable({"bRetrieve":true});
                angular.forEach(modalTable, function(value, key){
                    rowData = $filter('filter')(dataTable.fnGetData(),function(element, index, array) { return value.subId === element[SUBMISSION_ID_COLUMN_INDEX] })[0];
                    var policyId = "";
                    var policy = rowData[POLICY_COLUMN_INDEX];
                    var trnExpirationDate = rowData[HIDDEN_TRN_EXPIRATION_DATE];

                    var polTrnEffDt = rowData[HIDDEN_POL_TERM_EFF_DT];

                    var type = rowData[HIDDEN_COLUMN_USED_FOR_FILTERING_BY_ACTIVITY_CATEGORY_COLUMN_INDEX ];
                    var isWorked = rowData[HIDDEN_IS_WORKED];
                    var isNonUD = rowData[HIDDEN_IS_NON_UD];

                    var reason = rowData[ACTIVITY_REASON_COLUMN_INDEX];
                    if (reason == null) {
                        reason = EMPTY_STRING;
                    }
                    var statusColumn = rowData[TRN_STATUS_COLUMN_INDEX];
                    var status = statusColumn.replace(/<\/?[^>]+(>|$)/g, "");
                    var premium = rowData[TRANS_PREMIUM_COLUMN_INDEX];
                    var date = rowData[TRANS_EFFECTIVE_DATE_COLUMN_INDEX];
                    var subId = rowData[SUBMISSION_ID_COLUMN_INDEX];
                    var valid;
                    if( ([STATUS_ISSUED, STATUS_DECLINED, STATUS_WITHDRAWN, STATUS_LOST].indexOf(status) > -1) ||
                        (!RA.UI.isNullorEmpty(rowData[LOCKED_TO_HID_COLUMN_INDEX]) && rowData[LOCKED_TO_HID_COLUMN_INDEX] !== $scope.currentUser.createHid)	){
                        valid = 'dyn/images/redx.gif';
                        isAnyActivityValid = true;
                    }
                    else{
                        valid = 'dyn/images/greencheck.gif';
                        isValid = true;
                    }

                    $scope.table.push({"policy":policy, "trnExpirationDate":trnExpirationDate, "type":type, "subId":subId, "reason":reason, "date":date, "premium":premium, "status":status, "policyId":policyId, "valid":valid, "isValid":isValid, "isWorked":isWorked, "isNonUD":isNonUD, "polTrnEffDt": polTrnEffDt});
                });
            } else {
                $('.dashboardCheck:checkbox:checked').each(function()
                {
                    var dataTable = $('#dashboardItemsTable').dataTable({"bRetrieve":true});
                    var rowIndex = dataTable.fnGetPosition($(this).closest('tr')[0]);
                    rowData = dataTable.fnGetData(rowIndex);

                    var policyId = "";
                    var policy = $($($(this).closest('tr')).children()[POLICY_COLUMN_INDEX]).text();
                    var trnExpirationDate = rowData[HIDDEN_TRN_EXPIRATION_DATE];

                    var polTrnEffDt = rowData[HIDDEN_POL_TERM_EFF_DT];

                    var type = rowData[HIDDEN_COLUMN_USED_FOR_FILTERING_BY_ACTIVITY_CATEGORY_COLUMN_INDEX ];
                    var isWorked = rowData[HIDDEN_IS_WORKED];
                    var isNonUD = rowData[HIDDEN_IS_NON_UD];

                    var reason = rowData[ACTIVITY_REASON_COLUMN_INDEX];
                    if (reason == null) {
                        reason = EMPTY_STRING;
                    }
                    var status = $($($(this).closest('tr')).children()[TRN_STATUS_COLUMN_INDEX]).text();
                    var premium = $($($(this).closest('tr')).children()[TRANS_PREMIUM_COLUMN_INDEX]).text();
                    var date = $($($(this).closest('tr')).children()[TRANS_EFFECTIVE_DATE_COLUMN_INDEX]).text();
                    var subId = rowData[13];
                    var valid;
                    if( ([STATUS_ISSUED, STATUS_DECLINED, STATUS_WITHDRAWN, STATUS_LOST].indexOf(status) > -1) ||
                        (!RA.UI.isNullorEmpty(rowData[LOCKED_TO_HID_COLUMN_INDEX]) && rowData[LOCKED_TO_HID_COLUMN_INDEX] !== $scope.currentUser.createHid)	){
                        valid = 'dyn/images/redx.gif';
                        isAnyActivityValid = true;
                    }
                    else{
                        valid = 'dyn/images/greencheck.gif';
                        isValid = true;

                    }

                    if (!$scope.editAccess) {
                        $scope.activityDetailsTitle = "View Activity Details";
                        $scope.disableUpdate = true;
                        $scope.detailsButtons =
                            [
                                {
                                    "id":"detailClose",
                                    "label":"Close",
                                    "function":function(){$scope.doChangeDetailsCancel();},
                                    "class":"btn"
                                }
                            ];
                    }

                    $scope.table.push({"policy":policy, "trnExpirationDate":trnExpirationDate, "type":type, "subId":subId, "reason":reason, "date":date, "premium":premium, "status":status, "policyId":policyId, "index":rowIndex, "valid":valid, "isValid":isValid, "isWorked":isWorked, "isNonUD":isNonUD, "polTrnEffDt": polTrnEffDt});
                });
            }
            $scope.checkActivityTypes();
            if(isAnyActivityValid && $scope.editAccess){
                if($scope.table.length == 1 || !isValid){
                    alert('The activity you picked is invalid for this action');
                }
                else{
                    var choose = confirm(ACTIVITIES_LOCKED_CONFIRM);
                    if (choose)
                    {
                        return;
                    }
                }
                $scope.isActivityDetailsOpen = !$scope.isActivityDetailsOpen;
                return;
            }

            if($scope.table.length == 1)
            {
                $scope.isSingleInActivityDetails = true;
                $scope.showCommentsLink = true;
                var activityId = rowData[15];
                var submissionId = rowData[13];

                Activity.findActivityDetails({"activityId": activityId, "sourceId": submissionId}, function (result) {
                    $scope.activityDetails = RA.Service.handleServiceResult(result, $scope);
                    if ($scope.activityDetails) {
                        if ($scope.hasReminders) {
                            $scope.activityDetails.userComments = null;
                            $scope.activityComments = $scope.activityDetails.activityComments;
                            $scope.commentCount = 0;
                            for (var c = 0; c < $scope.activityComments.length; c++) {
                                if ($scope.activityComments[c].commentCategoryRefCode === 'USERCOMMNT') {
                                    $scope.commentCount++;
                                }
                                $scope.$apply();
                            }
                        } else {
                            Activity.findOriginalUserCommentsBySourceId($scope.activityDetails.sourceId, function (result) {
                                $scope.activityDetails.activityComments = RA.Service.handleServiceResult(result, $scope);
                                if ($scope.activityDetails) {
                                    $scope.activityDetails.userComments = null;
                                    $scope.activityComments = $scope.activityDetails.activityComments;
                                    $scope.commentCount = 0;
                                    for (var c = 0; c < $scope.activityComments.length; c++) {
                                        $scope.commentCount++;
                                    }
                                    $scope.$apply();
                                }
                            });
                        }
                        $scope.activityDetails.sourceId = submissionId;

                        if(submissionId) {
                            Activity.findUnderwriterHidBySourceId(submissionId, function (result) {
                                var underwriter = RA.Service.handleServiceResult(result, $scope);
                                $scope.activityDetails.underwriterHid = underwriter ? underwriter : null;
                                $scope.$apply();
                            });
                        }

                        snapshots[ACTIVITY_DETAILS_SNAPSHOT_KEY] = RA.UI.takeSnapshot($scope.activityDetails, $scope.preCallback());
                    }
                    else
                    {
                        $scope.resetActivityDetails();
                    }

                    $scope.pageLoaded = YES;
                    $scope.$apply();
                });
            }
        }
        else
        {
            $scope.isSingleInActivityDetails = true;
            snapshots[ACTIVITY_DETAILS_SNAPSHOT_KEY] = RA.UI.takeSnapshot($scope.activityDetails, $scope.preCallback());
            $scope.showCommentsLabel ='Show All Comments';
            $scope.showCommentsLink = true;
            $scope.checkActivityTypes();
        }

        if (!$scope.editAccess) {
            $scope.activityDetailsTitle = "View Activity Details";
            $scope.disableUpdate = true;
            $scope.detailsButtons =
                [
                    {
                        "id":"detailClose",
                        "label":"Close",
                        "function":function(){$scope.doChangeDetailsCancel();},
                        "class":"btn"
                    }
                ];
        }
    };

    $scope.resetActivityDetails = function(){
        if (!$scope.activityDetails) {
            $scope.activityDetails = {};
        }
        $scope.activityDetails.sourceId = EMPTY_STRING;
        $scope.activityDetails.activityId = EMPTY_STRING;
        $scope.activityDetails.assignToHid = EMPTY_STRING;
        $scope.activityDetails.assignmentReasonCode = EMPTY_STRING;
        $scope.activityDetails.referralStatusRefCode = EMPTY_STRING;
        $scope.activityDetails.pendingDate = EMPTY_STRING;
        $scope.activityDetails.premiumTierRefCode = EMPTY_STRING;
        $scope.activityDetails.priorityRefCode = EMPTY_STRING;
        $scope.activityDetails.needByDate = EMPTY_STRING;
        $scope.activityDetails.transactionEffectiveDate = EMPTY_STRING;
        $scope.activityDetails.activityReasonComments = EMPTY_STRING;
        $scope.activityDetails.userComments = EMPTY_STRING;
        $scope.activityDetails.endorsementTypeRefCode = EMPTY_STRING;
        $scope.activityDetails.endorsementSubTypeRefCode = EMPTY_STRING;
        $scope.activityDetails.reasonRefCode = EMPTY_STRING;
        $scope.activityDetails.reasonTypeCode = EMPTY_STRING;
        $scope.activityDetails.activityComments = {};
    };

    $scope.validateClearableFields = function(){
        if (true === $scope.clearFields.assignmentReason) {
            $scope.clearedFieldsList.push('assignmentReasonCode');
        }
        if (true === $scope.clearFields.premiumTier) {
            $scope.clearedFieldsList.push('premiumTierRefCode');
        }
        if (true === $scope.clearFields.priority) {
            $scope.clearedFieldsList.push('priorityRefCode');
        }
        if (true === $scope.clearFields.needByDate) {
            $scope.clearedFieldsList.push('needByDate');
        }
    };

    $scope.doClearCharms = function()
    {
        $scope.doUnCheckAllFiltersCheckboxes();
        $scope.doUnCheckAllMyAssignToCheckboxes();

        $scope.doRunMySelectedFilters(null, false, false, DO_NOT_RETAIN_CHART_VIEW , RUN_MY_FILTERS );
        DBoard.UI.doOpenSpecificFilterType(RUN_MY_FILTERS);

    }

    $scope.doUnCheckAllFiltersCheckboxes = function()
    {
        var list =  $('#myFilters input:checked')

        angular.forEach(list, function(filter) {
            filter.checked = false;
        });
    }
    $scope.doUnCheckAllMyAssignToCheckboxes = function()
    {
        var list =  $('#myAssignedTo input:checked')

        angular.forEach(list, function(filter) {
            filter.checked = false;
        });
    }

    $scope.doToggleShowComments = function()
    {
        $scope.showComments = !$scope.showComments;
        $scope.showCommentsLabel = $scope.showComments ? 'Hide Comments' : 'Show All Comments';
        if($scope.showComments){
            var commentId = "#commentSection";

            $('#changeActivityModal').find('.modal-body-refapp').animate({
                scrollTop: $(commentId).offset().top}, 100);
        }
    };

    var getDashboardItemsItem = function (item) {
        var dataTable = $('#dashboardItemsTable').dataTable({"bRetrieve":true});
        var rowIndex = dataTable.fnGetPosition($(item).closest('tr')[0]);
        var rowData = dataTable.fnGetData(rowIndex);
        var policy = $($($(item).closest('tr')).children()[9]).text();
        var type = rowData[HIDDEN_COLUMN_USED_FOR_FILTERING_BY_ACTIVITY_CATEGORY_COLUMN_INDEX ];
        var reason = rowData[14];
        if (reason == null) {
            reason = EMPTY_STRING;
        }
        var closestTrChildren = $($(item).closest('tr')).children();
        var lockChild = $(closestTrChildren[2]);
        var lockChildImage = lockChild.children('img');

        var lockHid = lockChildImage.attr('val');
        var lockName = lockChildImage.attr('title');
        var status = lockChild.text();
        var date = $(closestTrChildren[7]).text();
        var insuredName = $(closestTrChildren[8]).text();

        var subId = rowData[13];

        return {"policy":policy, "type":type, "subId":subId, "reason":reason, "date":date, "index":rowIndex, "status":status, "insuredName": insuredName, "lockHid": lockHid, "lockName": lockName}
    }


    $scope.doToggleTRNStatusModal = function(modalTable)
    {
        if (unRevisedDispositionStatusList)
        {
            $scope.dispositionStatusList = unRevisedDispositionStatusList;
        }
        $scope.disposition = {"recaptureIndicator":FALSE, "submissionId":$scope.disposition.submissionId};

        if($scope.isTRNStatusOpen)
        {
            if (!$scope.changeDetails) {
                $scope.isSingle = false;
            }
            $scope.reasonLabel = 'Reason';
            $scope.commentsLabel = 'Comments';
            $scope.disableRecapture = true;
            $scope.displayList = [];
            $scope.isTRNStatusOpen = !$scope.isTRNStatusOpen;
        }
        else
        {
            RA.UI.doClearMessages($scope);
            $rootScope.showPageLoading();
            if(!$scope.isSingle) {
                $scope.table = [];
                var isAnyActivityValid = false;
                var findSubmissionId = null;

                if(modalTable) {
                    angular.forEach(modalTable, function(value, key) {
                        $('.dashboardCheck:checkbox').each(function() {
                            var data = getDashboardItemsItem(this);
                            var dashboardData = $('#dashboardItemsTable').dataTable({"bRetrieve":true}).fnGetData(data.index)
                            if (value.sourceId === data.subId && value.activityId === dashboardData[15]) {
                                findSubmissionId = data.subId;
                                isAnyActivityValid = true;
                                $scope.table.push(data);
                            }
                        });
                    });
                    isAnyActivityValid = true;
                } else {
                    $('.dashboardCheck:checkbox:checked').each(function()
                    {
                        var data = getDashboardItemsItem(this);
                        findSubmissionId = data.subId;
                        isAnyActivityValid = true;
                        $scope.table.push(data);
                    });
                }

                if(!isAnyActivityValid){
                    if($scope.table.length == 1){
                        alert('The activity you picked is invalid for this action');
                    }
                    else{
                        alert('All activities you picked are invalid for this action');
                    }
                    $rootScope.hidePageLoading();
                    return;
                }
            } else {
                if (modalTable && modalTable[0]) {
                    var rowData = $filter('filter')($('#dashboardItemsTable')
                        .dataTable({"bRetrieve":true})
                        .fnGetData(),function(element, index, array) {
                            return modalTable[0].activityId === element[15]
                        }
                    )[0];
                    if (rowData) {
                        findSubmissionId = rowData[13];
                        $scope.table[0].subId = findSubmissionId;
                    }
                } else {
                    findSubmissionId = $scope.disposition.submissionId;
                }
            }

            snapshots[DISPOSITION_SNAPSHOT_KEY] = RA.UI.takeSnapshot($scope.disposition, $scope.preCallback());

            async.series(
                {
                    submission: function(callback)
                    {
                        Submission.findSubmission(findSubmissionId, function(result)
                        {
                            var data = RA.Service.handleServiceResult(result, $scope);
                            callback(null, data);
                        });
                    }
                },
                function(err, result)
                {
                    if (result.submission != null)
                    {
                        $scope.submission = result.submission;
                    }
                    $scope.isTRNStatusOpen = !$scope.isTRNStatusOpen;
                    $rootScope.hidePageLoading();
                }
            );

        }
        $scope.scrollModalTop("setStatusModal");
    };

    $scope.doToggleAddFilterModal = function(event)
    {
        if (angular.isDefined(event)) {
            event.preventDefault();
        }

        RA.UI.doClearMessages($scope);
        $scope.directiveModels.filterToCopyFrom = {};
        $scope.manageFilterMode = MANAGE_FILTER_NEW_MODE;

        DBoard.UI.doClearFilterModal($scope.manageFilterMode);
        $scope.selectedUnderwriterList = [];
        $scope.selectedRenewalUnderwriterList = [];
        $scope.selectedAssigneeList = [];
        $scope.selectedCSRList = [];
        $scope.selectedMarketingList = [];
        $scope.selectedDelegateList = [];
        $scope.selectedLossPreventionList = [];
        $scope.selectedAccountManagerList = [];
        $scope.selectedStateList = [];
        $scope.selectedPolicySymbolList = [];
        $scope.selectedAssignmentReasonList = [];
        $scope.selectedRegionList = [];

        $scope.directiveModels.editFilter = {'viewByOption': VIEW_BY_ACTIVITY, 'pendedOption':EXCLUDE_PENDED, 'defaultSortField': "trnEffectiveDate", 'defaultSortOrder': TRUE};

        $scope.territoryList = [];
        $scope.territoryList.push(NONE_OPTION);
        $scope.fieldList = [];
        $scope.fieldList.push(NONE_OPTION);
        $scope.producerSearchValue.value = EMPTY_STRING;

        snapshots[NEW_FILTER_SNAPSHOT_KEY] = RA.UI.takeSnapshot($scope.directiveModels, $scope.preCallback());
        $scope.validationMessages = $scope.saveFilterValidationMessages;
        $scope.saveFilterValidationMessages = [];
        $scope.scrollModalTop("addFilterModal");


        $scope.isAddFilterOpen = !$scope.isAddFilterOpen;


        $('#new-filter-availableProducerOptions option:selected').hover( function (e)
            {
                var a = $(this).val();
                alert(a);
            }
        );
    };

    $scope.doToggleManageFilterModal = function(event)
    {
        if (angular.isDefined(event)) {
            event.preventDefault();
        }

        RA.UI.doClearMessages($scope);
        $scope.manageFilterMode = MANAGE_FILTER_EDIT_MODE;

        DBoard.UI.doClearFilterModal($scope.manageFilterMode);
        $scope.selectedUnderwriterList = [];
        $scope.selectedRenewalUnderwriterList = [];
        $scope.selectedAssigneeList = [];
        $scope.selectedCSRList = [];
        $scope.selectedMarketingList = [];
        $scope.selectedDelegateList = [];
        $scope.selectedLossPreventionList = [];
        $scope.selectedAccountManagerList = [];
        $scope.selectedStateList = [];
        $scope.selectedRegionList = [];
        $scope.selectedPolicySymbolList = [];
        $scope.selectedAssignmentReasonList = [];
        $scope.directiveModels.editFilter = {};

        if ($scope.isManageFilterOpen)
        {
            $scope.territoryList = [];
            $scope.fieldList = [];
            $scope.producerSearchValue.value = EMPTY_STRING;
        }
        else
        {
            var selectedFilterNames = DBoard.UI.doGetSelectedFilters();

            //default the filter to edit to the first selected filter, if there is one
            if (selectedFilterNames != null && selectedFilterNames.length > 0)
            {
                var selectedFilterName = selectedFilterNames[0];

                angular.forEach($scope.filterList, function(filter)
                    {
                        if (selectedFilterName == filter.filterName)
                        {
                            $scope.directiveModels.editFilter = filter;
                            if(filter.defaultSortOrder == 'desc'){
                                $scope.directiveModels.editFilter.defaultSortOrder = FALSE;
                            }
                            else{
                                $scope.directiveModels.editFilter.defaultSortOrder = TRUE;
                            }
                            $scope.doSetEditFilter(selectedFilterNames);
                            return false;
                        }
                    }
                );
            }
            snapshots[MANAGE_FILTER_SNAPSHOT_KEY] = RA.UI.takeSnapshot($scope.directiveModels, $scope.preCallback());
            $scope.scrollModalTop("manageFilterModal");
        }

        $scope.isManageFilterOpen = !$scope.isManageFilterOpen;
    };

    $scope.doSetEditFilter = function(selectedFilterNames)
    {
        var editFilter = $scope.directiveModels.editFilter;

        $scope.selectedAssigneeList = $scope.doFindObjectInArray(editFilter.assignedToList, $scope.assigneeList);
        $scope.selectedUnderwriterList = $scope.doFindObjectInArray(editFilter.underwriterList, $scope.underwriterSelectList);
        $scope.selectedRenewalUnderwriterList = $scope.doFindObjectInArray(editFilter.renewalUnderwriterList, $scope.renewalUnderwriterSelectList);
        $scope.selectedMarketingList = $scope.doFindObjectInArray(editFilter.marketingList, $scope.businessDeveloperList );
        $scope.selectedCSRList = $scope.doFindObjectInArray(editFilter.csrList, $scope.csrList);
        $scope.selectedDelegateList = $scope.doFindObjectInArray(editFilter.delegateList, $scope.delegateList );
        $scope.selectedLossPreventionList = $scope.doFindObjectInArray(editFilter.lossPreventionList, $scope.lossPreventionList );
        $scope.selectedAccountManagerList = $scope.doFindObjectInArray(editFilter.accountManagerList, $scope.accountManagerList );
        $scope.selectedStateList = $scope.doFindObjectInArray(editFilter.stateList, $scope.stateSelectList, "itemCode");
        $scope.selectedRegionList = $scope.doFindObjectInArray(editFilter.regionList, $scope.regionList, 'value');
        $scope.selectedPolicySymbolList = $scope.doFindObjectInArray(editFilter.policySymbolList, $scope.policySymbolSelectList);
        $scope.selectedAssignmentReasonList = $scope.doFindObjectInArray(editFilter.assignmentReasonList, $scope.assignmentReasonList, "itemCode");

        DBoard.UI.doSetFilterSelectedProducerCodeOptions(editFilter.producerCodeList, editFilter.producerCodeMap, $scope.manageFilterMode);

        $scope.findProducerBusinessUnitForManageFilters(selectedFilterNames);

        $scope.updateTerritoryList();
        $scope.updateFieldList();
        //for functional consistency on save/recall
        RA.UI.removeNoneOption([editFilter.profitCenterList, editFilter.territoryList, editFilter.fieldList]);

        $scope.disableEnableFilterNameEditBox();
        $scope.directiveModels.editFilter.originalFilterName = $scope.directiveModels.editFilter.filterName;
        $scope.originalFilterName  = $scope.directiveModels.editFilter.filterName;
    };

    $scope.findProducerBusinessUnitForManageFilters = function(selectedFilterNames, opts)
    {
        opts = opts || {};
        if ($scope.directiveModels.editFilter.producerCodeList)
        {
            var producerCodes = $scope.directiveModels.editFilter.producerCodeList;

            if ((producerCodes.length > 1 || selectedFilterNames.length > 1) && $scope.businessUnitListForProducerLookUp.length > 1) {
                $scope.producerLookUpBuForFilter.value = EMPTY_STRING;
            } else if (producerCodes.length === 1 && selectedFilterNames.length === 1) {
                async.series(
                    [
                        function (callback) {
                            Search.findProducersDetails(EMPTY_STRING, producerCodes[0], EMPTY_STRING, null, function (result) {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(NO_ERRORS, data);
                            });
                        }
                    ],
                    function (err, results) {
                        var data = results[0];

                        $scope.producerLookUpBuForFilter.value = data.businessUnit;

                        if (opts.callback)
                            opts.callback(NO_ERRORS, data);
                    }
                );
            } else {
                $scope.producerLookUpBuForFilter.value = getSessionItem('businessUnit');
            }
        }
    };


    $scope.disableEnableFilterNameEditBox = function disableEnableFilterNameEditBox()
    {
        if( $scope.directiveModels.editFilter.filterName == MY_INBOX_FILTER_NAME )
        {
            $('#filterNameInput1').attr( 'disabled', true);
        }
        else
        {
            $('#filterNameInput1').attr( 'disabled', false);
        }
    }

    $scope.doAddAssignedTo = function()
    {
        var person = $.parseJSON($scope.assignedToPersonFromSelection);
        DBoard.UI.doAddAssignedFromSelection(person);

        var name = DBoard.UI.formatPersonName( person );
        var hid = person.hid;

        $scope.assignedToFilter.assignedToList.push(hid);
        $scope.assignedToFilter.assignedToMap[hid] = name;

        var index =  $scope.doFindPersonInPeopleList( $scope.assignToSelectList, person  );
        $scope.assignToSelectList.splice( index, 1);

        //reset to placeholder after selection
        $scope.assignedToPersonFromSelection = EMPTY_STRING;
        Dashboard.updateFilter($scope.assignedToFilter, function(result)
        {
            RA.Service.handleServiceResult(result, $scope);
        });
    };

    $scope.doFindPersonInPeopleList = function( peopleList, personToFind )
    {

        if (peopleList == null || peopleList.length ==0)
        {
            return -1;
        }
        var indexOfPersonToFind = -1;

        $.each(peopleList, function(index, person )
        {
            if( person.hid == personToFind.hid )
            {
                indexOfPersonToFind = index;
                return false;
            }
        });

        return indexOfPersonToFind;

    };

    $scope.doFindObjectInArray = function( listToFind, listToSearch, key) {
        if ('undefined' === typeof key ) key='hid'; // this ensures that if key is not passed, 'hid' will continue to be used as key to search on source list

        var itemListToReturn = [];
        if (listToFind == null || listToFind.length ==0) {
            return itemListToReturn;
        }

        $.each(listToFind, function(index, item) {
            var foundIt = false;
            $.each(listToSearch, function(index2, searchItem) {
                if (!foundIt) {
                    if (item == searchItem[key]) {
                        foundIt = true;
                        itemListToReturn.push(searchItem);
                    }
                }
            });
            if (!foundIt) {
                itemListToReturn.push(item);
            }
        });

        return itemListToReturn;
    }
// Need to go back and refactor the following functions to use one common function
    $scope.doAddAssigneeOption = function()
    {
        //binding to modal directive
        var assignee = $scope.directiveModels.assignedToPersonFromSelection;
        var assigneeObj = $.parseJSON(assignee);
        delete $scope.directiveModels.assignedToPersonFromSelection;

        // add only if it doesn't already exist
        var assigneeList = $scope.selectedAssigneeList;
        var foundIt = false;
        if (assigneeList != null) {
            $.each(assigneeList, function(index, assignee) {
                if (assignee.hid == assigneeObj.hid) {
                    foundIt = true;
                }
            });
            if (!foundIt) {
                $scope.selectedAssigneeList.push(assigneeObj);
            }
        } else {
            $scope.selectedAssigneeList = [];
            $scope.selectedAssigneeList.push(assigneeObj);
        }
    };

    $scope.doRemoveAssigneeOption = function(hid)
    {
        if (hid != null && hid != EMPTY_STRING) {
            var assigneeList = $scope.selectedAssigneeList;
            $.each(assigneeList, function(index, assignee) {
                if (assignee.hid && assignee.hid == hid) {
                    $scope.selectedAssigneeList.splice(index,1);
                }
            });
        }
    };

    $scope.doAddUnderwriterOption = function()
    {
        //binding to modal directive
        var underwriter = $scope.directiveModels.underwriterFromSelection;
        var underwriterObj = $.parseJSON(underwriter);
        delete $scope.directiveModels.underwriterFromSelection;

        // add only if it doesn't already exist
        var underwriterList = $scope.selectedUnderwriterList;
        var foundIt = false;
        if (underwriterList != null) {
            $.each(underwriterList, function(index, underwriter) {
                if (underwriter.hid == underwriterObj.hid) {
                    foundIt = true;
                }
            });
            if (!foundIt) {
                $scope.selectedUnderwriterList.push(underwriterObj);
            }
        } else {
            $scope.selectedUnderwriterList = [];
            $scope.selectedUnderwriterList.push(underwriterObj);
        }
    };

    $scope.doRemoveUnderwriterOption = function(hid)
    {
        if (hid != null && hid != EMPTY_STRING) {
            var underwriterList = $scope.selectedUnderwriterList;
            $.each(underwriterList, function(index, underwriter) {
                if (underwriter.hid == hid) {
                    $scope.selectedUnderwriterList.splice(index,1);
                }
            });
        }
    };

    $scope.doAddRenewalUnderwriterOption = function()
    {
        //binding to modal directive
        var underwriter = $scope.directiveModels.renewalUnderwriterFromSelection;
        var underwriterObj = $.parseJSON(underwriter);
        delete $scope.directiveModels.renewalUnderwriterFromSelection;

        // add only if it doesn't already exist
        var underwriterList = $scope.selectedRenewalUnderwriterList;
        var foundIt = false;
        if (underwriterList != null) {
            $.each(underwriterList, function(index, underwriter) {
                if (underwriter.hid == underwriterObj.hid) {
                    foundIt = true;
                }
            });
            if (!foundIt) {
                $scope.selectedRenewalUnderwriterList.push(underwriterObj);
            }
        } else {
            $scope.selectedRenewalUnderwriterList = [];
            $scope.selectedRenewalUnderwriterList.push(underwriterObj);
        }
    };

    $scope.doRemoveRenewalUnderwriterOption = function(hid)
    {
        if (hid != null && hid != EMPTY_STRING) {
            var underwriterList = $scope.selectedRenewalUnderwriterList;
            $.each(underwriterList, function(index, underwriter) {
                if (underwriter.hid == hid) {
                    $scope.selectedRenewalUnderwriterList.splice(index,1);
                }
            });
        }
    };

    $scope.doAddCSROption = function()
    {
        //binding to modal directive
        var csr = $scope.directiveModels.csrFromSelection;
        var csrObj = $.parseJSON(csr);
        delete $scope.directiveModels.csrFromSelection;

        // add only if it doesn't already exist
        var csrList = $scope.selectedCSRList;
        var foundIt = false;
        if (csrList != null) {
            $.each(csrList, function(index, csr) {
                if (csr.hid == csrObj.hid) {
                    foundIt = true;
                }
            });
            if (!foundIt) {
                $scope.selectedCSRList.push(csrObj);
            }
        } else {
            $scope.selectedCSRList = [];
            $scope.selectedCSRList.push(csrObj);
        }
    };

    $scope.doRemoveCSROption = function(hid)
    {
        if (hid != null && hid != EMPTY_STRING) {
            var csrList = $scope.selectedCSRList;
            $.each(csrList, function(index, csr) {
                if (csr.hid && csr.hid == hid) {
                    $scope.selectedCSRList.splice(index,1);
                }
            });
        }
    };

    $scope.doAddMarketingOption = function()
    {
        //binding to modal directive
        var marketing = $scope.directiveModels.marketingFromSelection;
        var marketingObj = $.parseJSON(marketing);
        delete $scope.directiveModels.marketingFromSelection;

        // add only if it doesn't already exist
        var marketingList = $scope.selectedMarketingList;
        var foundIt = false;
        if (marketingList != null) {
            $.each(marketingList, function(index, marketing) {
                if (marketing.hid == marketingObj.hid) {
                    foundIt = true;
                }
            });
            if (!foundIt) {
                $scope.selectedMarketingList.push(marketingObj);
            }
        } else {
            $scope.selectedMarketingList = [];
            $scope.selectedMarketingList.push(marketingObj);
        }
    };

    $scope.doRemoveMarketingOption = function(hid)
    {
        if (hid != null && hid != EMPTY_STRING) {
            var marketingList = $scope.selectedMarketingList;
            $.each(marketingList, function(index, marketing) {
                if (marketing.hid && marketing.hid == hid) {
                    $scope.selectedMarketingList.splice(index,1);
                }
            });
        }
    };

    $scope.doAddDelegateOption = function()
    {
        //binding to modal directive
        var delegate = $scope.directiveModels.delegateFromSelection;
        var delegateObj = $.parseJSON(delegate);
        delete $scope.directiveModels.delegateFromSelection;

        // add only if it doesn't already exist
        var delegateList = $scope.selectedDelegateList;
        var foundIt = false;
        if (delegateList != null) {
            $.each(delegateList, function(index, delegate) {
                if (delegate.hid == delegateObj.hid) {
                    foundIt = true;
                }
            });
            if (!foundIt) {
                $scope.selectedDelegateList.push(delegateObj);
            }
        } else {
            $scope.selectedDelegateList = [];
            $scope.selectedDelegateList.push(delegateObj);
        }
    };

    $scope.doRemoveDelegateOption = function(hid)
    {
        if (hid != null && hid != EMPTY_STRING) {
            var delegateList = $scope.selectedDelegateList;
            $.each(delegateList, function(index, delegate) {
                if (delegate.hid && delegate.hid == hid) {
                    $scope.selectedDelegateList.splice(index,1);
                }
            });
        }
    };

    $scope.doAddLossPreventionOption = function()
    {
        //binding to modal directive
        var lossPrevention = $scope.directiveModels.lossPreventionFromSelection;
        var lossPreventionObj = $.parseJSON(lossPrevention);
        delete $scope.directiveModels.lossPreventionFromSelection;

        // add only if it doesn't already exist
        var lossPreventionList = $scope.selectedLossPreventionList;
        var foundIt = false;
        if (lossPreventionList != null) {
            $.each(lossPreventionList, function(index, lossPrevention) {
                if (lossPrevention.hid == lossPreventionObj.hid) {
                    foundIt = true;
                }
            });
            if (!foundIt) {
                $scope.selectedLossPreventionList.push(lossPreventionObj);
            }
        } else {
            $scope.selectedLossPreventionList = [];
            $scope.selectedLossPreventionList.push(lossPreventionObj);
        }
    };

    $scope.doRemoveLossPreventionOption = function(hid)
    {
        if (hid != null && hid != EMPTY_STRING) {
            var lossPreventionList = $scope.selectedLossPreventionList;
            $.each(lossPreventionList, function(index, lossPrevention) {
                if (lossPrevention.hid && lossPrevention.hid == hid) {
                    $scope.selectedLossPreventionList.splice(index,1);
                }
            });
        }
    };

    $scope.doAddAccountManagerOption = function()
    {
        //binding to modal directive
        var accountManager = $scope.directiveModels.accountManagerFromSelection;
        var accountManagerObj = $.parseJSON(accountManager);
        delete $scope.directiveModels.accountManagerFromSelection;

        // add only if it doesn't already exist
        var accountManagerList = $scope.selectedAccountManagerList;
        var foundIt = false;
        if (accountManagerList != null) {
            $.each(accountManagerList, function(index, accountManager) {
                if (accountManager.hid == accountManagerObj.hid) {
                    foundIt = true;
                }
            });
            if (!foundIt) {
                $scope.selectedAccountManagerList.push(accountManagerObj);
            }
        } else {
            $scope.selectedAccountManagerList = [];
            $scope.selectedAccountManagerList.push(accountManagerObj);
        }
    };

    $scope.doRemoveAccountManagerOption = function(hid)
    {
        if (hid != null && hid != EMPTY_STRING) {
            var accountManagerList = $scope.selectedAccountManagerList;
            $.each(accountManagerList, function(index, accountManager) {
                if (accountManager.hid && accountManager.hid == hid) {
                    $scope.selectedAccountManagerList.splice(index,1);
                }
            });
        }
    };

    $scope.doAddRegionOption = function()
    {
        //binding to modal directive
        var region = $scope.directiveModels.regionFromSelection;
        var regionObj = $.parseJSON(region);
        delete $scope.directiveModels.regionFromSelection;

        // add only if it doesn't already exist
        var regionList = $scope.selectedRegionList;
        var foundIt = false;
        if (regionList != null) {
            $.each(regionList, function(index, region) {
                if (region.value === regionObj.hid) {
                    foundIt = true;
                }
            });
            if (!foundIt) {
                $scope.selectedRegionList.push(regionObj);
            }
        } else {
            $scope.selectedRegionList = [];
            $scope.selectedRegionList.push(regionObj);
        }
    };

    $scope.doRemoveRegionOption = function(regionValue)
    {
        if (regionValue != null && regionValue !== EMPTY_STRING) {
            var regionList = $scope.selectedRegionList;
            $.each(regionList, function(index, region) {
                if (region.value && region.value === regionValue) {
                    $scope.selectedRegionList.splice(index,1);
                }
            });
        }
    };

    $scope.doAddStateOption = function()
    {
        //binding to modal directive
        var state = $scope.directiveModels.stateFromSelection;
        var stateObj = $.parseJSON(state);
        delete $scope.directiveModels.stateFromSelection;

        // add only if it doesn't already exist
        var stateList = $scope.selectedStateList;

        var foundIt = false;
        if (stateList != null) {
            $.each(stateList, function(index, state) {
                if (state.itemCode == stateObj.itemCode) {
                    foundIt = true;
                }
            });
            if (!foundIt) {
                $scope.selectedStateList.push(stateObj);
            }
        } else {
            $scope.selectedStateList = [];
            $scope.selectedStateList.push(stateObj);
        }
    };

    $scope.doRemoveStateOption = function(itemCode)
    {
        if (itemCode != null && itemCode != EMPTY_STRING) {
            var stateList = $scope.selectedStateList;
            $.each(stateList, function(index, state) {
                if (state.itemCode == itemCode) {
                    $scope.selectedStateList.splice(index,1);
                }
            });
        }
    };


    $scope.doAddPolicySymbolOption = function()
    {
        //binding to modal directive
        var policySymbol = $scope.directiveModels.policySymbolFromSelection;
        var policySymbolObj = policySymbol;
        delete $scope.directiveModels.policySymbolFromSelection;

        // add only if it doesn't already exist
        var policySymbolList = $scope.selectedPolicySymbolList;

        var foundIt = false;
        if (policySymbolList != null) {
            $.each(policySymbolList, function(index, policySymbol) {
                if (policySymbol === policySymbolObj) {
                    foundIt = true;
                }
            });
            if (!foundIt) {
                $scope.selectedPolicySymbolList.push(policySymbolObj);
            }
        } else {
            $scope.selectedPolicySymbolList = [];
            $scope.selectedPolicySymbolList.push(policySymbolObj);
        }
    };

    $scope.doRemovePolicySymbolOption = function(value)
    {
        if (value !== null && value !== EMPTY_STRING) {
            var policySymbolList = $scope.selectedPolicySymbolList;
            $.each(policySymbolList, function(index, policySymbol) {
                if (policySymbol === value) {
                    $scope.selectedPolicySymbolList.splice(index,1);
                }
            });
        }
    };

    $scope.doAddAssignmentReasonOption = function()
    {
        //binding to modal directive
        var assignmentReason = $scope.directiveModels.assignmentReasonFromSelection;
        var assignmentReasonObj = $.parseJSON(assignmentReason);
        delete $scope.directiveModels.assignmentReasonFromSelection;

        // add only if it doesn't already exist
        var assignmentReasonList = $scope.selectedAssignmentReasonList;

        var foundIt = false;
        if (assignmentReasonList !== null) {
            assignmentReasonList.forEach(function(assignmentReason, index) {
                if (assignmentReason.itemCode === assignmentReasonObj.itemCode) {
                    foundIt = true;
                }
            });
            if (!foundIt) {
                $scope.selectedAssignmentReasonList.push(assignmentReasonObj);
            }
        } else {
            $scope.selectedAssignmentReasonList = [];
            $scope.selectedAssignmentReasonList.push(assignmentReasonObj);
        }
    };

    $scope.doRemoveAssignmentReasonOption = function(itemCode)
    {
        if (itemCode) {
            var assignmentReasonList = $scope.selectedAssignmentReasonList;
            assignmentReasonList.forEach(function(assignmentReason, index) {
                if (assignmentReason.itemCode === itemCode) {
                    $scope.selectedAssignmentReasonList.splice(index,1);
                }
            });
        }
    };

    $scope.doToggleChart = function() {
        $('#dashboard-pulldown-container').toggle("slow");
        DBoard.UI.doSetupChart($scope.currentFilterResults, $scope.currentChartView, false, $scope, $compile);
        $scope.resetSelectedBarInChart();
    }

    $scope.validatePendingDate = function()
    {
        $scope.disablePendingDate = $scope.activityDetails.pendingDate && new Date(RA.UI.doMakeDateMMDDYYYY($scope.activityDetails.pendingDate)) <= new Date();
    };

    doClosePopover = function(){
        $('#viewByButton').popover('destroy');
    }

    doChangeChartView = function(event){

        if($scope.currentChartView != $scope.chartViewSelection){


            $('#viewByButton').popover('destroy');
            var selectedFilters;

            if($scope.latestRanFilterType == RUN_MY_FILTERS){
                selectedFilters = DBoard.UI.doGetSelectedFilters();
            }
            else{
                selectedFilters = DBoard.UI.doGetSelectedAssignToList();
            }
            var maxSelections = 28;

            if($scope.chartViewSelection!= null && $scope.chartViewSelection == VIEW_BY_ACTIVITY){
                maxSelections = 4;
            }
            else if($scope.chartViewSelection!= null && $scope.chartViewSelection == VIEW_BY_ACTIVITY_STATUS){
                maxSelections = 1;
            }
            if(selectedFilters.length > maxSelections){

                event.stopPropagation();
                event.preventDefault();
                var viewByButton = $('#viewByButton');

                if($scope.chartViewSelection == VIEW_BY_ACTIVITY_STATUS){
                    var htmlContent = '<div class="pull-right"><img src="dyn/images/redx.gif" onclick="doClosePopover()"/></div><br/>';
                    htmlContent += '<b>Activity & Status chart can be viewed for only one filter.<br/>' +
                        'Select the filter to view. </b><br/><br/>';

                    for(var index in selectedFilters){
                        if(index == 0){
                            htmlContent += ' <input type="radio" checked style="vertical-align: top" name="viewByFilterSelection" value="'+selectedFilters[index]+
                                '" label="' + selectedFilters[index] + '"> '+selectedFilters[index]+'</input><br/>';
                        }
                        else{
                            htmlContent += ' <input type="radio" style="vertical-align: top" name="viewByFilterSelection" value="'+selectedFilters[index]+
                                '" label="' + selectedFilters[index] + '"> '+selectedFilters[index]+'</input><br/>';
                        }
                    }

                    htmlContent +='<button class="btn btn-tiny" onclick="doViewSelectedFilters(this, VIEW_BY_ACTIVITY_STATUS)">View Activity and Status</button>';
                    var options = {
                        html: true,
                        content: htmlContent,
                        trigger: 'manual',
                        placement: 'bottom',
                        container: viewByButton
                    };

                    $scope.chartViewSelection = $scope.currentChartView;
                    var popover = $('#viewByButton').popover(options);
                    $('#viewByButton').popover('show');
                    $scope.$apply();
                    return false;
                }
                else if($scope.chartViewSelection == VIEW_BY_ACTIVITY){
                    var htmlContent = '<div class="pull-right"><img src="dyn/images/redx.gif" onclick="doClosePopover()"/></div><br/>';
                    htmlContent += '<b>Activity chart can be viewed for only 4 filters.<br/>' +
                        'Select the filters to view. </b><br/><br/>';

                    htmlContent +='<div id="myPopoverFilters">';

                    for(var index in selectedFilters){
                        if(index < 4){
                            htmlContent += ' <input type="checkbox" onclick="doValidatePopoverFilterCount(VIEW_BY_ACTIVITY)" checked style="vertical-align: top" name="'+selectedFilters[index]+
                                '" value="' + selectedFilters[index]+ '"> '+selectedFilters[index]+'</input><br/>';
                        }
                        else{
                            htmlContent += ' <input type="checkbox" disabled onclick="doValidatePopoverFilterCount(VIEW_BY_ACTIVITY)" style="vertical-align: top" name="'+selectedFilters[index]+
                                '" value="'+selectedFilters[index]+ '"> '+selectedFilters[index]+'</input><br/>';
                        }
                    }

                    htmlContent +="</div>";

                    htmlContent +='<button class="btn btn-tiny" onclick="doViewSelectedFilters(this, VIEW_BY_ACTIVITY)">View Activity</button>';
                    var options = {
                        html: true,
                        content: htmlContent,
                        trigger: 'manual',
                        placement: 'bottom',
                        container: viewByButton
                    };

                    $scope.chartViewSelection = $scope.currentChartView;
                    var popover = $('#viewByButton').popover(options);
                    $('#viewByButton').popover('show');
                    $scope.$apply();
                    return false;
                }
            }

            $timeout(function() {
                doValidateFilterCount();
                $scope.doToggleChartView();
                $scope.doToggleSwitch();
                DBoard.UI.clearGlobalFilterOnTable();
                DBoard.UI.clearAllFiltersOnDataTable();
            },1000);

        }
        return true;
    };

    doValidatePopoverFilterCount = function(viewByType){

        if(viewByType == VIEW_BY_ACTIVITY){
            var checkedPopoverFilters = $("#myPopoverFilters input:checked");

            var popoverFilters = $('#myPopoverFilters input');
            if(checkedPopoverFilters.length >= 4){

                $.each(popoverFilters, function()
                {
                    if(this.checked == false){
                        this.disabled = true;
                    }
                });
            }
            else{
                $.each(popoverFilters, function()
                {
                    this.disabled = false;
                });
            }
        }
    };

    doViewSelectedFilters = function(event, chartView){

        $scope.setCurrentCharView(chartView);
        $scope.chartViewSelection = chartView;

        var selectedValues = [];

        if(chartView == VIEW_BY_ACTIVITY_STATUS){
            selectedValues.push($("input[name=viewByFilterSelection]:checked").val());
        }
        else{
            var popoverFilters = $("#myPopoverFilters input:checked");

            $.each(popoverFilters, function()
            {
                selectedValues.push($(this).attr('value'));
            });
        }

        $('#viewByButton').popover('destroy');

        var checkedFilters;
        if($scope.latestRanFilterType == RUN_MY_FILTERS){
            checkedFilters = DBoard.UI.doGetSelectedFilters();
        }
        else{
            checkedFilters = DBoard.UI.doGetSelectedAssignToList();
        }
        for(var i in checkedFilters){
            var unselectFilter = true;
            for(var j in selectedValues){
                if(selectedValues[j] == checkedFilters[i]){
                    unselectFilter = false;
                    break;
                }
            }
            if(unselectFilter == true){
                $('[name="' + checkedFilters[i] + '"]').prop('checked', false);
            }
        }

        $scope.doRunMySelectedFiltersFromScript(null, DO_NOT_RETAIN_TABLE_FILTERS, true, RETAIN_CHART_VIEW);

        doValidateFilterCount();
        $scope.doToggleSwitch();
        return true;
    };

    $scope.doValidateNewEffectiveDateRange = function()
    {
        var effectiveFromString = $scope.directiveModels.editFilter.effectiveDateFrom;
        var effectiveToString = $scope.directiveModels.editFilter.effectiveDateTo;

        if(effectiveFromString != undefined && effectiveFromString != null && effectiveToString != undefined && effectiveToString != null
            && (effectiveFromString != $scope.selectedNewEffectiveFromString || effectiveToString != $scope.selectedNewEffectiveToString)){
            if (effectiveFromString.length == 10 && effectiveToString.length == 10) {
                var effFromDate = new Date(effectiveFromString);
                var effToDate = new Date(effectiveToString);
                $scope.selectedNewEffectiveFromString = effectiveFromString;
                $scope.selectedNewEffectiveToString = effectiveToString;
                if (effFromDate > effToDate) {
                    alert(EFFECTIVE_FROM_GREATER_EQUAL_EFFECTIVE_TO);
                    return false;
                }
            }
        }
    };
    $scope.doValidateManageEffectiveDateRange = function()
    {
        var effectiveFromString = $scope.directiveModels.editFilter.effectiveDateFrom;
        var effectiveToString = $scope.directiveModels.editFilter.effectiveDateTo;

        if(effectiveFromString != undefined && effectiveFromString != null && effectiveToString != undefined && effectiveToString != null
            && (effectiveFromString != $scope.selectedManageEffectiveFromString || effectiveToString != $scope.selectedManageEffectiveToString)){
            if (effectiveFromString.length == 10 && effectiveToString.length == 10) {
                var effFromDate = new Date(effectiveFromString);
                var effToDate = new Date(effectiveToString);
                $scope.selectedManageEffectiveFromString = effectiveFromString;
                $scope.selectedManageEffectiveToString = effectiveToString;
                if (effFromDate > effToDate) {
                    alert(EFFECTIVE_FROM_GREATER_EQUAL_EFFECTIVE_TO);
                    return false;
                }
            }
        }
    };

    $scope.doValidateNewNeedByDateRange = function()
    {
        var needByFromString = $scope.directiveModels.editFilter.needByDateFrom;
        var needByToString = $scope.directiveModels.editFilter.needByDateTo;

        if(needByFromString != undefined && needByFromString != null && needByToString != undefined && needByToString != null
            && (needByFromString != $scope.selectedNewNeedByFromString || needByToString != $scope.selectedNewNeedByToString)){
            if (needByFromString.length == 10 && needByToString.length == 10) {
                var needFromDate = new Date(needByFromString);
                var needToDate = new Date(needByToString);
                $scope.selectedNewNeedByFromString = needByFromString;
                $scope.selectedNewNeedByToString = needByToString;
                if (needFromDate > needToDate) {
                    alert(NEED_BY_FROM_GREATER_EQUAL_EFFECTIVE_TO);
                    return false;
                }
            }
        }
    };

    $scope.doValidateManageNeedByDateRange = function()
    {
        var needByFromString = $scope.directiveModels.editFilter.needByDateFrom;
        var needByToString = $scope.directiveModels.editFilter.needByDateTo;

        if(needByFromString != undefined && needByFromString != null && needByToString != undefined && needByToString != null
            && (needByFromString != $scope.selectedManageNeedByFromString || needByToString != $scope.selectedManageNeedByToString)){
            if (needByFromString.length == 10 && needByToString.length == 10) {
                var needFromDate = new Date(needByFromString);
                var needToDate = new Date(needByToString);
                $scope.selectedManageNeedByFromString = needByFromString;
                $scope.selectedManageNeedByToString = needByToString;
                if (needFromDate > needToDate) {
                    alert(NEED_BY_FROM_GREATER_EQUAL_EFFECTIVE_TO);
                    return false;
                }
            }
        }
    };

    $scope.doToggleChartView = function()
    {
        if ($scope.currentChartView != $scope.chartViewSelection)
        {
            $scope.setCurrentCharView($scope.chartViewSelection);
            DBoard.UI.doSetupChart($scope.currentFilterResults, $scope.currentChartView, false, $scope, $compile);
        }
    };

    $scope.doTogglePendedOption = function()
    {

        if ($scope.currentPendedOption != $scope.pendedOptionSelection)
        {
            var pendedOptionSelection = $scope.pendedOptionSelection;
            $scope.currentPendedOption = pendedOptionSelection;
            if( doGetRunFiltersKey() == RUN_MY_ASSIGNED )
            {
                $scope.doSetPendingOption( pendedOptionSelection);
            }
        }
    };

    $scope.doSetPendingOption = function doSetPendingOption( pendedOption)
    {
        switch (pendedOption)
        {
            case EXCLUDE_PENDED:
                DBoard.UI.doFilterDataTable('false', PENDING_INDICATOR_COLUMN_INDEX);
                break;
            case INCLUDE_PENDED:
                DBoard.UI.doFilterDataTable('true|false', PENDING_INDICATOR_COLUMN_INDEX, USE_REGULAR_EXPRESSIONS);
                break;
            case ONLY_PENDED:
                DBoard.UI.doFilterDataTable('true', PENDING_INDICATOR_COLUMN_INDEX);
                break;
        }
    }

    $scope.doToggleSwitch = function()
    {
        if ($scope.latestRanFilterType == RUN_MY_FILTERS) {
        }

        return true;
    }

    $scope.removeRow = function(index, toggle, tableId)
    {
        var temp = [];
        var uncheck = $scope.table[index].index;
        for(var i = 0; i < $scope.table.length; i++)
        {
            if(i == index) continue;

            temp.push($scope.table[i]);
        }
        $scope.table = temp;

        if($scope.table.length == 0)
        {
            toggle.apply();
        }

        var dataTable = $('#' + tableId).dataTable({"bRetrieve":true});
        var row = dataTable.fnGetNodes(uncheck);

        var input = $(row).find("input:checkbox").first();
        if(input.length > 0)
        {
            $(input).prop('checked', false);
        }
    };

    $scope.scrollModalTop = function(modalName)
    {
        $('#' + modalName).find('.modal-body-refapp').animate({
            "scrollTop": 0
        }, 200);
    };

    $scope.findProducers = function()
    {
        var producerSearchString = $scope.producerSearchValue.value;
        var producerLookUpBu = $scope.producerLookUpBuForFilter.value;
        var producerName = EMPTY_STRING;
        var producerCode = EMPTY_STRING;

        $rootScope.showPageLoading();
        RA.UI.doClearMessages($scope);

        if (producerSearchString === undefined ||  null === producerSearchString || '' === producerSearchString)
        {
            alert(AGENCY_PRODUCER_REQUIRED_MESSAGE);
            $rootScope.hidePageLoading();
            return;
        }
        else if (RA.Controller.isAllDigits(producerSearchString))
        {
            if (3 > producerSearchString.length)
            {
                alert(PRODUCER_3_DIGITS_MESSAGE);
                $rootScope.hidePageLoading();
                return;
            }
            else
                producerCode = producerSearchString;
        }
        else
            producerName = producerSearchString;

        async.parallel(
            {
                producerResults: function(callback)
                {
                    Search.findProducersListWithBu(producerName, producerCode, EMPTY_STRING, EMPTY_STRING, PRODUCER_APPOINTED, producerLookUpBu, function(result)
                        {
                            var data = RA.Service.handleServiceResult(result, $scope);
                            callback(null, data);
                        }
                    );
                }
            },
            function(err, results)
            {
                var producerResults = results.producerResults;
                if (producerResults != null) {
                    DBoard.UI.doAddProducerOptions(producerResults, $scope.manageFilterMode);
                } else {
                    DBoard.UI.doAddProducerOptions([], $scope.manageFilterMode);
                }
                $rootScope.hidePageLoading();
            }
        );
    };

    $scope.onManageProfitCenterListChange = function onManageProfitCenterListChange()
    {
        $scope.directiveModels.editFilter.territoryList = [];
        $scope.directiveModels.editFilter.fieldList = [];
        $scope.updateTerritoryList();

    }

    $scope.onTerritoryListChange = function onManageProfitCenterListChange()
    {
        $scope.directiveModels.editFilter.fieldList = [];
        $scope.updateFieldList();

    }

    $scope.updateTerritoryList = function()
    {
        var selectedProfitCenterList = $scope.directiveModels.editFilter.profitCenterList;
        var territoryList = [];
        $scope.territoryList = [];
        $scope.fieldList = [];
        $scope.fieldList.push(NONE_OPTION);
        territoryList.push(NONE_OPTION);

        if (selectedProfitCenterList != null)
        {
            for (var index in $scope.producerHierarchyList)
            {
                for (var pcIndex in selectedProfitCenterList) {
                    if (index == selectedProfitCenterList[pcIndex])
                    {
                        var selectedTerritory = $scope.producerHierarchyList[index];

                        for (var index2 in selectedTerritory) {
                            if(index2.indexOf('@') === -1 )
                            {
                                var territoryFound = false;
                                for (var index3 in territoryList){
                                    if(index3.indexOf('@') === -1 )
                                    {
                                        if(territoryList[index3] == index2){
                                            territoryFound = true;
                                        }
                                    }
                                }
                                if(territoryFound == false){
                                    territoryList.push(index2);
                                    $scope.fieldList.sort();
                                }
                            }
                        }
                    }
                }
            }
            $scope.territoryList = territoryList;
        }
        // For IE
        var gaigMain = $('.gaig-main');
        var territoryListElement = gaigMain.find('select');
        if ($.browser.msie) {
            $scope.$on("territoryListDone", function() {
                territoryListElement.append("<option></option>");
                territoryListElement.find("option:last-child").remove();
            });
            $scope.$watch(function() {
                return territoryListElement.children().length;
            }, function(newVal) {
                territoryListElement.append("<option></option>");
                territoryListElement.find("option:last-child").remove();
            });
        }
    };

    $scope.updateFieldList = function()
    {
        var selectedProfitCenterList = $scope.directiveModels.editFilter.profitCenterList;
        var selectedTerritoryList = $scope.directiveModels.editFilter.territoryList;
        $scope.fieldList = [];
        $scope.fieldList.push(NONE_OPTION);
        if (selectedProfitCenterList != null && selectedProfitCenterList.length > 0)
        {
            for (var index in $scope.producerHierarchyList)
            {
                for (var pcIndex in selectedProfitCenterList)
                {
                    if (index == selectedProfitCenterList[pcIndex])
                    {
                        var territoryList = $scope.producerHierarchyList[index];
                        for (var index2 in territoryList)
                        {
                            for (var tIndex in selectedTerritoryList)
                            {
                                if(tIndex.indexOf('@') === -1 )
                                {
                                    if (index2 == selectedTerritoryList[tIndex])
                                    {
                                        for (var foundFieldIndex in territoryList[index2]) {
                                            if(foundFieldIndex.indexOf('@') === -1 )
                                            {

                                                var fieldFound = false;
                                                for(var index3 in $scope.fieldList){
                                                    if(index3.indexOf('@') === -1 )
                                                    {
                                                        if($scope.fieldList[index3] == territoryList[index2][foundFieldIndex]){
                                                            fieldFound = true;
                                                        }
                                                    }
                                                }
                                                if(fieldFound == false){
                                                    $scope.fieldList.push(territoryList[index2][foundFieldIndex]);
                                                    $scope.fieldList.sort();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        // For IE
        var gaigMain = $('.gaig-main');
        var fieldListElement = gaigMain.find('select');
        if ($.browser.msie) {
            $scope.$on("fieldListDone", function() {
                fieldListElement.append("<option></option>");
                fieldListElement.find("option:last-child").remove();
            });
            $scope.$watch(function() {
                return fieldListElement.children().length;
            }, function(newVal) {
                fieldListElement.append("<option></option>");
                fieldListElement.find("option:last-child").remove();
            });
        }
    };

    $scope.doMoveSelectedProducersRight = function()
    {
        DBoard.UI.doMoveProducersRight(true, $scope.manageFilterMode);
    };

    $scope.doMoveSelectedProducersLeft = function()
    {
        DBoard.UI.doMoveProducersLeft(true, $scope.manageFilterMode);
    };

    $scope.doMoveAllProducersLeft = function()
    {
        DBoard.UI.doMoveProducersLeft(false, $scope.manageFilterMode);
    };

    $scope.doMoveAllProducersRight = function()
    {
        DBoard.UI.doMoveProducersRight(false, $scope.manageFilterMode);
    };

    $scope.removeNoneFromList = function removeNoneFromList( filter )
    {
        $scope.directiveModels.editFilter.territoryList = $scope.removeValueOfNoneFromList( $scope.directiveModels.editFilter.territoryList );
        $scope.directiveModels.editFilter.fieldList = $scope.removeValueOfNoneFromList( $scope.directiveModels.editFilter.fieldList );
        $scope.directiveModels.editFilter.profitCenterList = $scope.removeValueOfNoneFromList( $scope.directiveModels.editFilter.profitCenterList );
    }

    $scope.removeValueOfNoneFromList = function removeValueOfNoneFromList( list )
    {
        var filteredList = [];
        angular.forEach(list, function(value)
        {
            if( value != '(none)')
            {
                filteredList.push( value );
            }
        });

        return filteredList;
    }
    $scope.validateEffectiveFromDateMustBeEqualOrLessThanToDate = function validateEffectiveFromDateMustBeEqualOrLessThanToDate()
    {
        var effectiveFromString = $scope.directiveModels.editFilter.effectiveDateFrom;
        var effectiveToString = $scope.directiveModels.editFilter.effectiveDateTo;
        if(effectiveFromString != undefined && effectiveFromString != null && effectiveToString != undefined && effectiveToString != null){
            if (effectiveFromString.length == 10 && effectiveToString.length == 10)
            {
                var effFromDate = new Date(effectiveFromString);
                var effToDate = new Date(effectiveToString);
                $scope.selectedManageEffectiveFromString = effectiveFromString;
                $scope.selectedManageEffectiveToString = effectiveToString;
                if (effFromDate > effToDate) {
                    alert(EFFECTIVE_FROM_GREATER_EQUAL_EFFECTIVE_TO);
                    return false;
                }
            }
        }
        return true;
    }
    $scope.saveAndRunFilter = function()
    {

        if( !$scope.validateEffectiveFromDateMustBeEqualOrLessThanToDate() )
        {
            return false;
        }

        var filter = $scope.directiveModels.editFilter;
        $scope.removeNoneFromList( filter );

        $scope.charmsList = [];

        RA.UI.removeNoneOption([filter.profitCenterList, filter.territoryList, filter.fieldList]);

        var charmsItem = {"label": filter.filterName, "onRemove": function() { $scope.removeCharmFilter(filter.filterName);}};
        $scope.charmsList.push(charmsItem);
        $rootScope.charms.charmsList = $scope.charmsList;

        async.auto(
            {
                saveFilter: function(callback)
                {
                    var r =  $scope.saveFilter(callback, INBOX_FILTER_TYPE );
                    var s = r;
                },
                // need to find the filters to bring back the saved filter
                findFilters:['saveFilter', function(callback)
                {
                    $scope.findAllFilters(callback, FALSE);
                }],
                filterResults: ['findFilters', function(callback)
                {
                    $rootScope.showPageLoading();

                    // need to iterate through the found filters list to find the newly saved filter
                    var matchFound = false;
                    angular.forEach($scope.filterList, function(newFilter)
                    {
                        var filterName = filter.filterName;

                        if(!matchFound)
                        {
                            if(filterName === newFilter.filterName)
                            {
                                filter = newFilter;
                                matchFound = true;
                            }
                        }
                    });
                    // deleting the hashkey and setting the max number of filters to return (otherwise will return 0)
                    delete filter.$$hashKey;
                    filter.rowLimit = MAX_NUMBER_OF_ROWS_TO_DISPLAY;

                    Dashboard.doRunFilter(filter, function(result)
                    {
                        RA.UI.doClearMessages($scope);
                        var data = RA.Service.handleServiceResult(result, $scope);
                        var isValid = RA.Service.isValidResult(result);
                        if(isValid && data) {
                            callback(null, data);
                        }
                        else
                        {
                            $scope.displayErrorMessages = true;
                            $scope.errorMessages = $scope.errorMessages || [];
                        }
                    });
                }]
            },
            function(err,results)
            {
                var filterResults = [results.filterResults];

                $scope.currentFilterResults = filterResults;
                $scope.currentResultsTotalCount = DBoard.UI.doCurrentResultsTotalCount(filterResults);

                $scope.chartViewSelection = filter.viewByOption == null ? VIEW_BY_ACTIVITY : filter.viewByOption;
                $scope.setCurrentCharView($scope.chartViewSelection );
                $scope.pendedOptionSelection = filter.pendedOption == null ? EXCLUDE_PENDED : filter.pendedOption;

                DBoard.UI.doSetupChart(filterResults, $scope.currentChartView, false, $scope, $compile);
                DBoard.UI.doSetUpDataTable($rootScope, $scope, false, $compile, $filter);
                doDashboardCheck();
                DBoard.UI.doSetResultTotalCount(filterResults);
                DBoard.UI.doLastFilterRanCheckBox([filter]);


                var sortedCompleteFilterNameListMinusMyInBoxFilterName = $scope.doSortMyInboxFilterControlList( $scope.filterList, filterResults);

                DBoard.UI.reorderFilterList( sortedCompleteFilterNameListMinusMyInBoxFilterName,$scope.myInboxFilter.filterName );

                $scope.saveUnusedFiltersAsNotRun( $scope.filterList, filterResults );

                DBoard.UI.setColumnToSortAndAscendingDescending(filter.defaultSortField, filter.defaultSortOrder );
                $scope.addMessageForFilterCountsOver1000( filterResults );

                $rootScope.hidePageLoading();
            }
        );
    };

    $scope.saveFilterAndClearCurrentResults = function(callback)
    {
        if( !$scope.validateEffectiveFromDateMustBeEqualOrLessThanToDate() )
        {
            return false;
        }

        var filter = $scope.directiveModels.editFilter;
        $scope.removeNoneFromList( filter );
        $scope.removeNoneFromList( filter );
        async.auto(
            {
                saveFilter: function(callback)
                {
                    $scope.saveFilter(callback, INBOX_FILTER_TYPE );
                }
            },
            function(err,results)
            {
                var filterResults = [];

                $scope.currentFilterResults = [];
                $scope.currentResultsTotalCount = 0

                DBoard.UI.doSetupChart(filterResults, $scope.currentChartView, false, $scope, $compile);
                DBoard.UI.doSetUpDataTable($rootScope, $scope, null, $compile, $filter);
                DBoard.UI.doSetResultTotalCount(filterResults);
                DBoard.UI.doLastFilterRanCheckBox([filter]);

                var filterNameList = $scope.buildFilterNameListFromFilter( $scope.filterList );
                var sortedCompleteFilterNameListMinusMyInBoxFilterList = $scope.doSortFilterControlList( filterNameList, filterResults);
                DBoard.UI.reorderFilterList( sortedCompleteFilterNameListMinusMyInBoxFilterList,$scope.myInboxFilter.filterName   );
                $scope.saveUnusedFiltersAsNotRun( $scope.filterList, filterResults );

                DBoard.UI.setColumnToSortAndAscendingDescending(DEFAULT_SORT_COLUMN_NAME,DEFAULT_SORT_ORDER );


                $scope.charmsList = [];
                $rootScope.charms.charmsList = $scope.charmsList;
                RA.Messages.removeInfoMessage( $scope, MAX_NUMBER_OF_ROWS_TO_DISPLAY + MORE_THAN_1000_FILTER_RESULTS_EXIST );
                $rootScope.hidePageLoading();
            }
        );

    }
    $scope.addMessageForFilterCountsOver1000 = function addMessageForFilterCountsOver1000( filters )
    {

        var messageParameters = "";
        var first = true;
        RA.Messages.removeInfoMessage( $scope, MAX_NUMBER_OF_ROWS_TO_DISPLAY + MORE_THAN_1000_FILTER_RESULTS_EXIST );
        if( filters )
        {
            var filterOverMaxToDisplay = $scope.whichActualTotalResultsAreGreaterThanMaxToDisplay( filters );
            if( filterOverMaxToDisplay.length )
            {
                if( filters.length === 1 )
                {
                    RA.Messages.addInfoMessage( $scope, MAX_NUMBER_OF_ROWS_TO_DISPLAY + MORE_THAN_1000_FILTER_RESULTS_EXIST );
                }
                else
                {

                    var mutliFiltersOver1000Message = MAX_NUMBER_OF_ROWS_TO_DISPLAY + MORE_THAN_1000_FILTER_RESULTS_FOR_MULTI_FILTERS_EXIST1;

                    angular.forEach(filterOverMaxToDisplay, function( filterName )
                    {
                        if(!first )
                        {
                            messageParameters += ', ';
                        }

                        first = false;
                        messageParameters += filterName;
                    });

                    mutliFiltersOver1000Message +=  messageParameters;
                    mutliFiltersOver1000Message  += MORE_THAN_1000_FILTER_RESULTS_FOR_MULTI_FILTERS_EXIST2;
                    RA.Messages.addInfoMessage( $scope, mutliFiltersOver1000Message );

                }
            }
        }
    }

    $scope.whichActualTotalResultsAreGreaterThanMaxToDisplay = function whichActualTotalResultsAreGreaterThanMaxToDisplay( filters )
    {
        var totalCount = 0;
        var filterNamesOverMaxNumberToDisplay = [];
        angular.forEach(filters, function( filter )
        {
            if( filter.totalCount >= MAX_NUMBER_OF_ROWS_TO_DISPLAY )
            {
                filterNamesOverMaxNumberToDisplay.push( filter.filterName );
            }
        });

        return filterNamesOverMaxNumberToDisplay;
    }


    $scope.validateFilterName = function validateFilterName()
    {
        if( !$scope.validateFilterNameIsSelectedAndNotBlank() )
        {
            return false;
        }

        if( !$scope.validateFilterNameForAlreadyExisting() )
        {
            return false;
        }
        return true;

    }


    $scope.validateFilterNameIsSelectedAndNotBlank = function validateFilterNameIsSelectedAndNotBlank()
    {
        var editFilter = $scope.directiveModels.editFilter;
        var manageFilterMode = $scope.manageFilterMode;

        if (editFilter.filterName == null || editFilter.filterName == EMPTY_STRING)
        {
            var msg = "";
            if (MANAGE_FILTER_NEW_MODE == manageFilterMode)
            {
                msg = FILTER_REQUIRED_MESSAGE;
            }
            else
            {
                msg = FILTER_SELECTION_REQUIRED;
            }
            alert(msg);
            $rootScope.hidePageLoading();
            return false;
        }

        if (MANAGE_FILTER_EDIT_MODE == manageFilterMode &&
            ( editFilter.newFilterName == null || editFilter.newFilterName == EMPTY_STRING) )
        {
            var msg = "";
            msg = FILTER_REQUIRED_MESSAGE;
            alert(msg);
            $rootScope.hidePageLoading();
            return false;
        }
        return true;
    }
    $scope.validateFilterNameForAlreadyExisting = function  validateFilterNameForAlreadyExisting()
    {
        var editFilter = $scope.directiveModels.editFilter;
        var filterList = $scope.filterList;
        var manageFilterMode = $scope.manageFilterMode;

        var newFilterName = editFilter.filterName;
        if (MANAGE_FILTER_NEW_MODE != manageFilterMode)
        {
            if( newFilterName == editFilter.newFilterName )
            {
                return true;
            }
            newFilterName = editFilter.newFilterName;
        }

        var nameFound = FALSE;


        $.each(filterList, function(index, filter)
        {
            if (filter.filterName == newFilterName)
            {
                nameFound = TRUE;
            }
        });

        if (nameFound == TRUE)
        {
            alert(FILTER_NAME_EXISTS);
            $rootScope.hidePageLoading();
            return false;
        }

        return true;

    }

    $scope.saveFilter = function(callback, filterType)
    {
        $rootScope.showPageLoading();

        var manageFilterMode = $scope.manageFilterMode;

        var editFilter = $scope.directiveModels.editFilter;

        if( !$scope.validateFilterName() )
        {
            return false;
        }

        if (MANAGE_FILTER_EDIT_MODE == manageFilterMode)
        {
            editFilter.filterName = editFilter.newFilterName;
        }

        if (editFilter.defaultSortField != undefined)
            editFilter.defaultSortField = $scope.directiveModels.editFilter.defaultSortField;

        if($scope.directiveModels.editFilter.defaultSortOrder == TRUE){
            editFilter.defaultSortOrder = 'asc';
        }
        else{
            editFilter.defaultSortOrder = 'desc';
        }

        // fix for new parsing
        if (editFilter.effectiveDateFrom == EMPTY_STRING)
            editFilter.effectiveDateFrom = null;
        if (editFilter.effectiveDateTo == EMPTY_STRING)
            editFilter.effectiveDateTo = null;
        if (editFilter.needByDateFrom == EMPTY_STRING)
            editFilter.needByDateFrom = null;
        if (editFilter.needByDateTo == EMPTY_STRING)
            editFilter.needByDateTo = null;

        // set the assignee list
        if ($scope.selectedAssigneeList != null && $scope.selectedAssigneeList.length > 0) {
            var assigneeList = [];
            $.each($scope.selectedAssigneeList, function(index, assignee)
            {
                assigneeList.push(assignee.hid)
            });
            editFilter.assignedToList = assigneeList;
        } else {
            editFilter.assignedToList = null;
        }


        // set the underwriter list
        if ($scope.selectedUnderwriterList != null && $scope.selectedUnderwriterList.length > 0) {
            var underwriterList = [];
            $.each($scope.selectedUnderwriterList, function(index, underwriter)
            {
                underwriterList.push(underwriter.hid)
            });
            editFilter.underwriterList = underwriterList;
        } else {
            editFilter.underwriterList = null;
        }

        // set the renewal underwriter list
        if ($scope.selectedRenewalUnderwriterList != null && $scope.selectedRenewalUnderwriterList.length > 0) {
            var underwriterList = [];
            $.each($scope.selectedRenewalUnderwriterList, function(index, underwriter)
            {
                underwriterList.push(underwriter.hid)
            });
            editFilter.renewalUnderwriterList = underwriterList;
        } else {
            editFilter.renewalUnderwriterList = null;
        }

        // set the csr list
        if ($scope.selectedCSRList != null && $scope.selectedCSRList.length > 0) {
            var csrList = [];
            $.each($scope.selectedCSRList, function(index, csr)
            {
                csrList.push(csr.hid)
            });
            editFilter.csrList = csrList;
        } else {
            editFilter.csrList = null;
        }

        // set the marketing list
        if ($scope.selectedMarketingList != null && $scope.selectedMarketingList.length > 0) {
            var underwriterList = [];
            $.each($scope.selectedMarketingList, function(index, underwriter)
            {
                underwriterList.push(underwriter.hid)
            });
            editFilter.marketingList = underwriterList;
        } else {
            editFilter.marketingList = null;
        }

        // set the delegate list
        if ($scope.selectedDelegateList != null && $scope.selectedDelegateList.length > 0) {
            var underwriterList = [];
            $.each($scope.selectedDelegateList, function(index, underwriter)
            {
                underwriterList.push(underwriter.hid)
            });
            editFilter.delegateList = underwriterList;
        } else {
            editFilter.delegateList = null;
        }

        // set the loss prevention list
        if ($scope.selectedLossPreventionList != null && $scope.selectedLossPreventionList.length > 0) {
            var underwriterList = [];
            $.each($scope.selectedLossPreventionList, function(index, underwriter)
            {
                underwriterList.push(underwriter.hid)
            });
            editFilter.lossPreventionList = underwriterList;
        } else {
            editFilter.lossPreventionList = null;
        }

        // set the account manager list
        if ($scope.selectedAccountManagerList != null && $scope.selectedAccountManagerList.length > 0) {
            var underwriterList = [];
            $.each($scope.selectedAccountManagerList, function(index, underwriter)
            {
                underwriterList.push(underwriter.hid)
            });
            editFilter.accountManagerList = underwriterList;
        } else {
            editFilter.accountManagerList = null;
        }

        if ($scope.selectedPolicySymbolList != null && $scope.selectedPolicySymbolList.length > 0) {
            var policySymbolList = [];
            $.each($scope.selectedPolicySymbolList, function(index, policySymbol)
            {
                policySymbolList.push(policySymbol)
            });
            editFilter.policySymbolList = policySymbolList;
        } else {
            editFilter.policySymbolList = null;
        }

        if ($scope.selectedStateList != null && $scope.selectedStateList.length > 0) {
            var stateList = [];
            $.each($scope.selectedStateList, function(index, state)
            {
                stateList.push(state.itemCode)
            });
            editFilter.stateList = stateList;
        } else {
            editFilter.stateList = null;
        }

        if ($scope.selectedRegionList != null && $scope.selectedRegionList.length > 0) {
            var regionList = [];
            $.each($scope.selectedRegionList, function(index, region)
            {
                regionList.push(region.value)
            });
            editFilter.regionList = regionList;
        } else {
            editFilter.regionList = null;
        }

        if ($scope.selectedAssignmentReasonList !== null && $scope.selectedAssignmentReasonList.length > 0) {
            editFilter.assignmentReasonList = $scope.selectedAssignmentReasonList.map(function(assignmentReason){
                return assignmentReason.itemCode;
            });
        }

        //break the selected producers into a map of code:name, and an array of just the codes
        var selectedProducers = DBoard.UI.doGetSelectedProducerOptions(manageFilterMode);
        editFilter.producerCodeMap = selectedProducers;
        editFilter.producerCodeList = [];

        angular.forEach(editFilter.producerCodeMap, function(name, code)
            {
                editFilter.producerCodeList.push(code);
            }
        );

        editFilter.filterType  = filterType;

        var saveFilterFunction;

        // verify at least one filter criteria was selected .. waiting on decision
        if (!$scope.validateFilterHasCriteria(editFilter))
        {
            return false;
        }

        if (MANAGE_FILTER_NEW_MODE == manageFilterMode)
        {
            RA.Service.cleanMyObject(editFilter);
            saveFilterFunction = function(callback)
            {
                var lists = ['assignedToList', 'fieldList', 'producerCodeList', 'profitCenter', 'territoryList', 'underwriterList', 'renewalUnderwriterList', 'csrList', 'marketingList', 'delegateList', 'lossPreventionList', 'accountManagerList', 'stateList', 'regionList', 'policySymbolList'];
                var maps = ['assignedToMap', 'producerCodeMap', 'underwriterMap', 'renewalUnderwriterMap', 'csrMap', 'marketingMap', 'delegateMap', 'lossPreventionMap', 'accountManagerMap'];
                for(var i = 0; i < lists.length; i++)
                {
                    var list = lists[i];
                    if(editFilter[list])
                    {
                        editFilter[list]['@type'] = 'java.util.ArrayList';
                    }
                }

                for(var i2 = 0; i2 < maps.length; i2++)
                {
                    var map = maps[i2];
                    if(editFilter[map])
                    {
                        editFilter[map]['@type'] = 'java.util.LinkedHashMap';
                    }
                }
                Dashboard.saveFilter(editFilter, function(result)
                {
                    var data = RA.Service.handleServiceResult(result, $scope);
                    callback(null, data);
                });
            };
        }
        else
        {
            RA.Service.cleanMyObject(editFilter);
            saveFilterFunction = function(callback)
            {
                Dashboard.updateFilter(editFilter, function(result)
                {
                    var data = RA.Service.handleServiceResult(result, $scope);
                    callback(null, data);
                });
            };
        }

        async.auto(
            {
                saveFilter:saveFilterFunction,
                findFilters:['saveFilter', function(callback)
                {
                    $scope.findAllFilters(callback, FALSE);
                }]
            },
            function(err, results)
            {
                if(err){
                    callback(err, null);
                    return;
                }
                $rootScope.hidePageLoading();
                $scope.doRunFiltersForCount(null, null, true);

                if (callback != undefined)
                    callback(null,null);
            }
        );

        if (MANAGE_FILTER_NEW_MODE == $scope.manageFilterMode)
            $scope.doToggleAddFilterModal();
        else
            $scope.doToggleManageFilterModal();

    };

    $scope.validateFilterHasCriteria = function validateFilterHasCriteria(filterToValidate)
    {
        var criteriaFound = false;

        if (filterToValidate) {
            if (filterToValidate.effectiveDateFrom && filterToValidate.effectiveDateFrom != EMPTY_STRING)
                return true;
            if (filterToValidate.effectiveDateTo && filterToValidate.effectiveDateTo != EMPTY_STRING)
                return true;
            if (filterToValidate.fieldList && filterToValidate.fieldList.length > 0)
                return true;
            if (filterToValidate.profitCenterList && filterToValidate.profitCenterList.length > 0)
                return true;
            if (filterToValidate.territoryList && filterToValidate.territoryList.length > 0)
                return true;
            if (filterToValidate.needByDateFrom && filterToValidate.needByDateFrom != EMPTY_STRING)
                return true;
            if (filterToValidate.needByDateTo && filterToValidate.needByDateTo != EMPTY_STRING)
                return true;
            if (filterToValidate.assignedToList && filterToValidate.assignedToList.length > 0)
                return true;
            if (filterToValidate.producerCodeList && filterToValidate.producerCodeList.length > 0)
                return true;
            if (filterToValidate.underwriterList && filterToValidate.underwriterList.length > 0)
                return true;
            if (filterToValidate.renewalUnderwriterList && filterToValidate.renewalUnderwriterList.length > 0)
                return true;
            if (filterToValidate.csrList && filterToValidate.csrList.length > 0)
                return true;
            if (filterToValidate.marketingList && filterToValidate.marketingList.length > 0)
                return true;
            if (filterToValidate.delegateList && filterToValidate.delegateList.length > 0)
                return true;
            if (filterToValidate.lossPreventionList && filterToValidate.lossPreventionList.length > 0)
                return true;
            if (filterToValidate.accountManagerList && filterToValidate.accountManagerList.length > 0)
                return true;
            if (filterToValidate.stateList && filterToValidate.stateList.length > 0)
                return true;
            if (filterToValidate.policySymbolList && filterToValidate.policySymbolList.length > 0)
                return true;
            if (filterToValidate.regionList && filterToValidate.regionList.length > 0)
                return true;
            if (filterToValidate.assignmentReasonList && filterToValidate.assignmentReasonList.length > 0)
                return true;
        }

        // if we made it here, there's an issue
        alert("You must select at least one filter criteria in order to save a dashboard filter.");
        $rootScope.hidePageLoading();
        return criteriaFound;
    };

    $scope.setTrnStatusReturn = function(status) {
        /// this is the return point for the setTrnStatus modal
        if (status.cancelled)  {
            $scope.doSetTrnStatusCancel();
            return;
        }
        else if (status.resultStatus === true) {
            $scope.doToggleTRNStatusModal();
            var callback = null;
            if ($scope.changeDetailsTable) {
                callback = function()
                {
                    doChangeDetailsAll($scope.changeDetailsTable);
                }
            }
            $scope.doRunMySelectedFiltersFromScript(callback, RETAIN_TABLE_FILTERS, true, RETAIN_CHART_VIEW);
            angular.forEach(status.result, function(result) {
                RA.UI.doDisplayUIMessages(result, $scope);
            });
        }
        else
        {
            $rootScope.hidePageLoading();
            $scope.scrollModalTop("setStatusModal");
        }
    }

    $scope.doSetTrnStatusCancel = function()
    {
        $scope.cancelFunction(DISPOSITION_SNAPSHOT_KEY, $scope.disposition, null, $scope.doToggleTRNStatusModal);
    };


    $scope.doSaveFilterCancel = function()
    {
        $scope.cancelFunction(NEW_FILTER_SNAPSHOT_KEY, $scope.directiveModels, $scope.preCallback, $scope.doToggleAddFilterModal);
    };

    $scope.saveFilterModalButtons =
        [
            {
                'label':'Save and Run',
                'function':function(){$scope.saveAndRunFilter()},
                'class':'btn btn-primary',
                'id':'addSaveAndRun'
            },
            {
                'label':'Save',
                'function':function(){$scope.saveFilterAndClearCurrentResults()},
                'class':'btn',
                'id':'addSave'
            },
            {
                'label':'Cancel',
                'function':function(){$scope.doSaveFilterCancel();},
                'class':'btn',
                'id':'addCancel'
            }
        ];

    $scope.doManageFilterCancel = function()
    {
        $scope.cancelFunction(MANAGE_FILTER_SNAPSHOT_KEY, $scope.directiveModels, null, $scope.doToggleManageFilterModal);
    }
    $scope.saveManageModalButtons =
        [
            {
                'label':'Save and Run',
                'function':function(){$scope.saveAndRunFilter()},
                'class':'btn btn-primary',
                'id':'manageSaveAndRun'
            },
            {
                'label':'Save',
                'function':function(){$scope.saveFilterAndClearCurrentResults()},
                'class':'btn',
                'id':'manageSave'
            },
            {
                'label':'Cancel',
                'function':function(){$scope.doManageFilterCancel();},
                'class':'btn',
                'id':'manageCancel'
            }
        ];


    $scope.chartViewTypeList =
        [
            {
                'value':VIEW_BY_ACTIVITY,
                'label':'Activity'
            },
            {
                'value':VIEW_BY_ACTIVITY_STATUS,
                'label':'Activity & Status'
            },
            {
                'value':VIEW_BY_TOTALS,
                'label':'Totals'
            }
        ];

    $scope.pendedOptionList =
        [
            {
                'value':EXCLUDE_PENDED,
                'label':'Exclude',
                'id':'excludePended'
            },
            {
                'value':INCLUDE_PENDED,
                'label':'Include',
                'id':'includePended'
            },
            {
                'value':ONLY_PENDED,
                'label':'Only',
                'id':'onlyPended'
            }
        ];

    $scope.closeViewHistoryModal = function ()
    {
        $scope.isViewHistoryOpen = false;
    };



    /**
     * Global function not attached to $scope, but needs to use it
     * @param action
     * @param data
     */

    openViewHistory = function ()
    {
        $scope.isViewHistoryOpen = true;
    };

    doGetRunFiltersKey = function()
    {

        if( $scope.shouldAssignListBeDisplayed() )
        {
            return RUN_MY_ASSIGNED;
        }

        return RUN_MY_FILTERS;
    };

    $scope.continueWorkActivityDash = function () {
        $scope.pageLoaded = YES;
        $rootScope.confirmTransaction($scope.submissionId, function(submissionId){
            $scope.workActivity(submissionId);
        });
    };

    doHandleMenuAction = function(anchor, action, data)
    {
        $scope.pageLoaded = null;
        RA.UI.doClearMessages($scope);

        $scope.contextMenuAnchor = anchor;
        var dataTable = $('#dashboardItemsTable').dataTable({"bRetrieve":true});
        var rowIndex = dataTable.fnGetPosition($(anchor).closest('tr')[0]);
        var rowData = dataTable.fnGetData(rowIndex);

        var activityId = rowData[15];
        $scope.policyInfo = $($($(anchor).closest('tr')).children()[9]).text();
        var polSplit = $scope.policyInfo.split(' ');
        var policySymbol = polSplit[0];
        var policyNumber = polSplit[1];
        var policyMod = polSplit[2];

        var submissionId = rowData[13];
        var trnExpirationDate = rowData[HIDDEN_TRN_EXPIRATION_DATE];
        var type = rowData[HIDDEN_COLUMN_USED_FOR_FILTERING_BY_ACTIVITY_CATEGORY_COLUMN_INDEX ];
        var isWorked = rowData[HIDDEN_IS_WORKED];
        var isNonUD = rowData[HIDDEN_IS_NON_UD];
        var polTrnEffDate = rowData[HIDDEN_POL_TERM_EFF_DT];

        var reason = rowData[14];
        if (reason == null) {
            reason = EMPTY_STRING;
        }
        var status = $($($(anchor).closest('tr')).children()[2]).text();
        var date = $($($(anchor).closest('tr')).children()[7]).text();
        var premium = $($($(anchor).closest('tr')).children()[11]).text();
        var statusColumn = $($($(anchor).closest('tr')).children()[2]).html();
        var startIndex = statusColumn.indexOf('<img val=') + 10;
        var endIndex = statusColumn.indexOf('"', startIndex);
        var lockedHid = statusColumn.substring(startIndex, endIndex);
        //Remove Selected Quoted Id which was added in Quote List if it exist
        RA.Session.removeSelectedQuoteId();
        var allPrevSubmissionsIssued = true;
        switch (action)
        {
            case VIEW_SUBMISSION:
                RA.Session.addViewOnlyMode($rootScope.currentUser.createHid == lockedHid ? NO : YES);
                RA.Session.addViewOnlyModeCustNo(YES);
                RA.Session.addSubmissionIdSearch(data + '');
                RA.Session.addCurrentUserHid($scope.currentUser.createHid);
                RA.Session.addSessionMode (SESSION_SUBMISSION_MODE);
                $scope.applyLayout('submission');
                $scope.pageLoaded = YES;
                break;
            case WORK_SUBMISSION:
                $scope.submissionId = data;
                RA.Session.addViewOnlyModeCustNo(NO);
                allPrevSubmissionsIssued = true;
                if(type===ACTIVITY_TYPE_RENEWAL){
                    var isFirstTime = false;
                    Submission.isFirstTimeWorking(submissionId, function(res){
                        isFirstTime = RA.Service.handleServiceResult(res, $scope);
                        if(isFirstTime) {
                            Submission.hasPrevActiveNotIssuedPolicy(policySymbol, policyNumber, policyMod, function (result) {
                                allPrevSubmissionsIssued = RA.Service.handleServiceResult(result, $scope);
                                if(allPrevSubmissionsIssued){
                                    $scope.continueWorkActivityDash();
                                }
                                else{
                                    $scope.toggleConfirmWorkModalDash();
                                    $scope.pageLoaded = YES;
                                    $scope.$apply();
                                }
                            });
                        }
                        else{
                            $scope.continueWorkActivityDash();
                        }
                    });
                }
                else {
                    $scope.continueWorkActivityDash();
                }
                break;
            case CHANGE_DETAIL:
                $scope.activityDetailsTitle = "Change Activity Details";
                $scope.disableUpdate = false;
                $('#detailSave').show();
                $('#detailCloseReminder').show();
                $('#saveDetailsAndChangeTRNStatus').show();
                $('#detailUnlock').show();
                $('#detailCancel').show();
                RA.UI.doClearMessages($scope);
                $scope.pageLoaded = NO;
                $scope.isSingle = true;
                $scope.table = [];
                $scope.table.push({"policy":$scope.policyInfo, "trnExpirationDate":trnExpirationDate, "type":type, "reason":reason, "date":date, "premium":premium, "status":status,  "index":rowIndex, "isWorked":isWorked, "isNonUD":isNonUD, "polTrnEffDt": polTrnEffDate});
                $scope.checkActivityTypes();
                var row = $scope.table[0];
                var invalid = (row.status === "Issued" || row.status === "Declined" || row.status === "Withdrawn" || row.status === "Lost");
                row.valid = (invalid) ? 'dyn/images/redx.gif' : 'dyn/images/greencheck.gif';

                Activity.findActivityDetails({"activityId": activityId, "sourceId": submissionId}, function (result) {
                    $scope.activityDetails = RA.Service.handleServiceResult(result, $scope);
                    if ($scope.activityDetails) {
                        if ($scope.hasReminders) {
                            $scope.activityDetails.userComments = null;
                            $scope.activityComments = $scope.activityDetails.activityComments;
                            $scope.commentCount = 0;
                            for (var c = 0; c < $scope.activityComments.length; c++) {
                                if ($scope.activityComments[c].commentCategoryRefCode === 'USERCOMMNT') {
                                    $scope.commentCount++;
                                }
                            }
                            $scope.$apply();
                        } else {
                            Activity.findOriginalUserCommentsBySourceId($scope.activityDetails.sourceId, function (result) {
                                $scope.activityDetails.activityComments = RA.Service.handleServiceResult(result, $scope);
                                if ($scope.activityDetails) {
                                    $scope.activityDetails.userComments = null;
                                    $scope.activityComments = $scope.activityDetails.activityComments;
                                    $scope.commentCount = 0;
                                    for (var c = 0; c < $scope.activityComments.length; c++) {
                                        $scope.commentCount++;
                                    }
                                    $scope.$apply();
                                }
                            });
                        }

                        if(submissionId) {
                            Activity.findUnderwriterHidBySourceId(submissionId, function (result) {
                                var underwriter = RA.Service.handleServiceResult(result, $scope);
                                $scope.activityDetails.underwriterHid = underwriter ? underwriter : null;
                                $scope.$apply();
                            });
                        }
                        $scope.activityDetails.sourceId = submissionId;
                        $scope.doToggleActivityDetailsModal();
                    }
                    else
                    {
                        //commenting out line below. . . the following will cause null console error
                        //$scope.activityDetails.activityId = activityId;
                        $scope.doToggleActivityDetailsModal();
                    }
                    $scope.pageLoaded = YES;
                    snapshots[ACTIVITY_DETAILS_SNAPSHOT_KEY] = RA.UI.takeSnapshot($scope.activityDetails);
                    $scope.$apply();
                    if (type == 'Reminder')
                    {
                        $('#detailUnlock').hide();
                    }
                    $('#detailClose').hide();
                });
                break;

            case VIEW_DETAIL:
                $scope.activityDetailsTitle = "View Activity Details";
                $scope.disableUpdate = true;

                RA.UI.doClearMessages($scope);
                $scope.pageLoaded = NO;
                $scope.isSingle = true;
                $scope.table = [];
                $scope.table.push({"policy":$scope.policyInfo, "type":type, "reason":reason, "date":date, "premium":premium, "status":status, "index":rowIndex});

                var row = $scope.table[0];
                var invalid = (row.status === "Issued" || row.status === "Declined" || row.status === "Withdrawn" || row.status === "Lost" ||
                    (!RA.UI.isNullorEmpty(rowData[16]) && rowData[16] != $scope.currentUser.createHid));
                row.valid = (invalid) ? 'dyn/images/redx.gif' : 'dyn/images/greencheck.gif';

                Activity.findActivityDetails({"activityId":activityId, "sourceId":submissionId}, function(result)
                {
                    $scope.activityDetails = RA.Service.handleServiceResult(result, $scope);
                    if($scope.activityDetails)
                    {
                        $scope.activityComments = $scope.activityDetails.activityComments;
                        $scope.commentCount = 0;
                        for(var c = 0; c < $scope.activityComments.length; c++)
                        {
                            if($scope.activityComments[c].commentCategoryRefCode == 'USERCOMMNT')
                            {
                                $scope.commentCount++;
                            }
                        }
                        $scope.activityDetails.sourceId = submissionId;
                        $scope.doToggleActivityDetailsModal();
                    }
                    else
                    {
                        $scope.activityDetails.activityId = activityId;
                        $scope.doToggleActivityDetailsModal();
                    }
                    $scope.pageLoaded = YES;
                    $scope.$apply();
                    $('#detailSave').hide();
                    $('#detailCloseReminder').hide();
                    $('#saveDetailsAndChangeTRNStatus').hide();
                    $('#detailUnlock').hide();
                    $('#detailCancel').hide();
                    $('#detailClose').show();
                });
                break;
            case SET_TRANSACTION_STATUS:
                var data = getDashboardItemsItem(anchor);
                $scope.isSingle = true;
                $scope.table = [];
                $scope.table.push(data);
                $scope.disposition.submissionId = submissionId;

                $scope.doToggleTRNStatusModal();
                snapshots[DISPOSITION_SNAPSHOT_KEY] = RA.UI.takeSnapshot($scope.disposition);
                $scope.pageLoaded = YES;
                break;
            case UNLOCK:
                $scope.doUnlockActivities(anchor);
                break;
            case VIEW_SUPPORTING_DOCUMENTS:
                RA.Controller.viewDocumentsMyfile($scope.myFileLink, 'SubmissionID=' + submissionId);
                $scope.pageLoaded = YES;
                break;
            case VIEW_POLICY_DOCUMENTS:
                RA.Controller.viewDocumentsMyfile($scope.myFileLink, 'PolicyNumber=' + policyNumber + '&Symbol=' + policySymbol + '&MOD=' + policyMod);
                $scope.pageLoaded = YES;
                break;
            case VIEW_HISTORY:
                async.auto
                (
                    {
                        comments: function (callback)
                        {
                            if (type == 'Reminder')
                            {
                                Activity.findAuditCommentsForReminder(activityId, function (result)
                                {
                                    callback(null, RA.Service.handleServiceResult(result, $scope));
                                });
                            }
                            else
                            {
                                Activity.findAuditComments(submissionId, function (result)
                                {
                                    callback(null, RA.Service.handleServiceResult(result, $scope));
                                });
                            }
                        }
                    }, function (err, results)
                    {
                        $scope.auditComments = results.comments;
                        openViewHistory();
                        $scope.pageLoaded = YES;
                        $scope.$apply();
                    }
                );
                break;
        }
    };

    doDashboardCheck = function()
    {
        var disableCheck = $('.dashboardCheck:checkbox:checked').length == 0 ? true : false;
        var isReminderRowChecked = false;
        var doesNotHaveEditAccess = !$scope.editAccess;

        $('#changeDetailsButton').attr('disabled', disableCheck);

        // determine unlock button .. only enable if one of the rows checked in currently locked
        $scope.noOfLockedRowsChecked = 0;
        var numberOfCheckedCheckedBoxes = 0;
        var lockedHid = EMPTY_STRING;
        $('.dashboardCheck:checkbox:checked').each(function()
        {
            numberOfCheckedCheckedBoxes++;
            var dataTable = $('#dashboardItemsTable').dataTable({"bRetrieve":true});
            var rowIndex = dataTable.fnGetPosition($(this).closest('tr')[0]);
            var rowData = dataTable.fnGetData(rowIndex);
            var lockedToHid = rowData[LOCKED_TO_HID_COLUMN_INDEX];
            lockedHid = lockedToHid;
            if(!RA.UI.isNullorEmpty(lockedToHid)){
                $scope.noOfLockedRowsChecked++;
            }
            var activityCategoryValue = rowData[activityCategoryIndex];
            if(activityCategoryValue.indexOf('Reminder') > -1)
            {
                isReminderRowChecked = true;
            }
        });

        var lockedToMe = $rootScope.currentUser.createHid === lockedHid;
        var lockedToSomebodyElse = lockedHid !== null && lockedHid !== EMPTY_STRING && !lockedToMe;

        $scope.setUnlockButton(lockedToMe);
        $scope.setTRNStatusButton(numberOfCheckedCheckedBoxes, lockedToSomebodyElse, doesNotHaveEditAccess, isReminderRowChecked);
    };

    $scope.setUnlockButton = function(lockedToMe)
    {
        var shouldDisable = true;
        var greaterThan0Selected = $scope.noOfLockedRowsChecked > 0;
        var hasUnlockAccess = $scope.unlockAccess || lockedToMe;

        if (greaterThan0Selected && hasUnlockAccess && $scope.editAccess)
        {
            shouldDisable = false;
        }

        $('#unlockButton').attr('disabled', shouldDisable);
    };

    $scope.setTRNStatusButton = function (numberOfCheckedCheckedBoxes, lockedToSomebodyElse, doesNotHaveEditAccess, isReminderRowChecked)
    {
        var noneSelected = numberOfCheckedCheckedBoxes === 0;
        var oneSelected = numberOfCheckedCheckedBoxes === 1;
        var oneSelectedAndLockedToSomebodyElse = oneSelected && lockedToSomebodyElse;
        var shouldDisable = noneSelected || isReminderRowChecked || doesNotHaveEditAccess || oneSelectedAndLockedToSomebodyElse;

        $('#setTRNStatusButton').attr('disabled', shouldDisable);
    };

    doLinkManageActivities = function(index)
    {
        DBoard.UI.doLinkManageActivities(sessionData[index], $scope);
    };

    doCheckSelectedAssignedTo = function (id)
    {
        var viewByType = $scope.chartViewSelection;
        var selectedFilters = DBoard.UI.doGetSelectedAssignToList();

        if (selectedFilters) {
            var selectedFiltersCount = selectedFilters.length;

            if((viewByType == VIEW_BY_ACTIVITY && selectedFiltersCount < 4 ) ||
                (viewByType == VIEW_BY_ACTIVITY_STATUS && selectedFiltersCount < 1) ||
                (viewByType == VIEW_BY_TOTALS && selectedFiltersCount < 28)) {
                $('#' + id).prop('checked', true);
            }
        } else {
            //do nothing
        }
    };

    doDeleteFilter = function(filterName, hid, assignedToName)
    {
        if (filterName != undefined)
        {
            var filterNameForConfirm = assignedToName != undefined ? assignedToName : filterName;

            if(confirm(FILTER_DELETE_CONFIRM1 + filterNameForConfirm + FILTER_DELETE_CONFIRM2))
            {
                var filterList = $scope.filterList;
                var filterToDelete;
                var myFunction;
                var completionFunction;

                DBoard.UI.showFilterLoading();

                if (hid != undefined)
                {
                    //removing the hid from the filter rather than deleting the filter
                    var filter = $scope.assignedToFilter;
                    delete filter.assignedToMap[hid];

                    $.each(filter.assignedToList, function(i, myHid)
                    {
                        if (hid == myHid)
                        {
                            filter.assignedToList.splice(i,1);
                            return false;
                        }
                    });

                    filter.originalFilterName = filter.filterName;

                    //create fuction that will do the update
                    myFunction =
                    {
                        filterFunction: function(callback)
                        {

                            Dashboard.updateFilter(filter, function(result)
                            {
                                RA.Service.handleServiceResult(result, $scope);
                                callback(null,null)
                            });
                        }
                    };

                    completionFunction = function(err, results)
                    {
                        // clear out the list of people filters and create it again
                        $('#myAssignedScrollingArea').text(EMPTY_STRING);
                        DBoard.UI.doRenderFilterList(null, null, $scope.assignedToFilter);

                        async.auto
                        (
                            {
                                filters: function(callback)
                                {
                                    $scope.findAssignToFilters(callback);
                                },

                                assignToList: function(callback)
                                {
                                    Presentation.findAssignToList(function(result)
                                    {
                                        var data = RA.Service.handleServiceResult(result, $scope);
                                        $scope.assignToSelectList = data;
                                        $scope.assigneeList = data;
                                        callback(null, data);
                                    });
                                }
                            },
                            function(err, results)
                            {
                                removeAssignedFromAssignToSelectList( );

                                DBoard.UI.doSetResultTotalCount($scope.currentFilterResultsCountOnly);
                                $("#runFilterButtonPeople").attr("disabled", true);

                                $scope.currentFilterResults = [];

                                DBoard.UI.doSetupChart($scope.currentFilterResults, $scope.currentChartView, false, $scope, $compile);
                                DBoard.UI.doSetUpDataTable($rootScope, $scope, false, $compile, $filter);
                                $scope.charmsList = [];
                                $rootScope.charms.charmsList = $scope.charmsList;
                                doDashboardCheck();
                                $scope.$apply();
                                DBoard.UI.hideFilterLoading();
                            }
                        );


                    }
                }
                else
                {
                    //processing when hid is undefined
                    //deleting a filter in this case
                    //find the filter to be deleted
                    $.each(filterList, function(i, filter)
                        {
                            if (filterName == filter.filterName)
                            {
                                //remove the filter from scope
                                $scope.filterList.splice(i, 1);
                                RA.Service.cleanMyObject(filter);

                                RA.Service.cleanMyObject(filter);
                                //create the function to delete it on the server
                                myFunction =
                                {
                                    filterFunction: function(callback)
                                    {
                                        Dashboard.deleteFilter(filter, function(result)
                                        {
                                            RA.Service.handleServiceResult(result, $scope);
                                            callback(null, null);
                                        });
                                    }
                                }

                                completionFunction = function(err,results)
                                {
                                    DBoard.UI.doRenderFilterList($scope.filterList, $scope.myInboxFilter, null);
                                    $scope.doRunFiltersForCount();
                                    var selectedFilterResults = [];
                                    var tempCharmsList = [];
                                    for(var index in $scope.currentFilterResults){
                                        if(filterName != $scope.currentFilterResults[index].filterName){
                                            selectedFilterResults.push($scope.currentFilterResults[index]);
                                        }
                                    }
                                    for(var index in $scope.charmsList){
                                        if($scope.charmsList[index].label != filterName){
                                            tempCharmsList.push($scope.charmsList[index]);
                                        }
                                    }
                                    $scope.currentFilterResults = selectedFilterResults;

                                    DBoard.UI.doSetupChart(selectedFilterResults, $scope.currentChartView, false, $scope, $compile);
                                    DBoard.UI.doSetUpDataTable($rootScope, $scope, false, $compile, $filter);
                                    $scope.charmsList = tempCharmsList;
                                    $rootScope.charms.charmsList = $scope.charmsList;
                                    doDashboardCheck();
                                    $scope.$apply();
                                    DBoard.UI.hideFilterLoading();
                                };

                                return false;
                            }
                        }
                    );
                }

                //execute the function to update/delete the filter
                if (myFunction != undefined)
                {
                    async.parallel(myFunction, completionFunction);
                }
            }
        }
    };

    doEnableSaveCurrentViewLink = function (doToggle)
    {
        if (doToggle == null) {
            $scope.doToggleSwitch();
        } else {

        }
    }

    doRefreshFilter = function(filterName, hid, name)
    {
        if (filterName != undefined)
        {
            var filterList = $scope.filterList;
            var filterToRefresh;

            if(MY_ASSIGNED_TO_FILTER_NM == filterName){
                filterToRefresh = $scope.assignedToFilter;
            }
            else{
                $.each(filterList, function(i, filter)
                    {
                        if (filterName == filter.filterName)
                        {
                            filterToRefresh = filter;
                            return false;
                        }
                    }
                );
            }
            $scope.doRunFiltersForCount(filterToRefresh, hid, false);
        }
    };

    doDetermineActivityButton = function()
    {
        if ($scope.filtersAreRunning) {
            $("#runFilterButtonPeople").attr("disabled", true);
            return;
        }

        var assignToList = DBoard.UI.doGetAssignToList();

        if (assignToList.runCount < 1)
        {
            $("#runFilterButtonPeople").attr("disabled", true);
        } else {
            $("#runFilterButtonPeople").attr("disabled", false);
        }
    }

    doValidateFilterCount = function(){

        var selectedFilters = DBoard.UI.doGetSelectedFilters();
        var maxSelections = 28;

        if($scope.chartViewSelection!= null && $scope.chartViewSelection == VIEW_BY_ACTIVITY){
            maxSelections = 4;
        }
        else if($scope.chartViewSelection!= null && $scope.chartViewSelection == VIEW_BY_ACTIVITY_STATUS){
            maxSelections = 1;
        }

        if(selectedFilters != null && selectedFilters.length >= maxSelections){

            var tempFilters = $('#myFilters input');

            $.each(tempFilters, function()
            {
                if(this.checked == false){
                    this.disabled = true;
                }
            });
        }

        else if(selectedFilters != null && selectedFilters.length < maxSelections){

            var tempFilters = $('#myFilters input');

            $.each(tempFilters, function()
            {
                this.disabled = false;
            });
        }

        doValidateAssignToCount();

        return true;
    };

    doValidateAssignToCount = function(){

        var selectedAssignToList = DBoard.UI.doGetSelectedAssignToList();
        var maxSelections = 28;

        if($scope.chartViewSelection!= null && $scope.chartViewSelection == VIEW_BY_ACTIVITY){
            maxSelections = 4;
        }
        else if($scope.chartViewSelection!= null && $scope.chartViewSelection == VIEW_BY_ACTIVITY_STATUS){
            maxSelections = 1;
        }

        if(selectedAssignToList != null && selectedAssignToList.length >= maxSelections){

            var assignToFilters = $('#myAssignedScrollingArea input');

            $.each(assignToFilters, function()
            {
                if(this.checked == false){
                    this.disabled = true;
                }
            });
        }
        else if(selectedAssignToList != null && selectedAssignToList.length < maxSelections){

            var assignToFilters = $('#myAssignedScrollingArea input');

            $.each(assignToFilters, function()
            {
                this.disabled = false;
            });
        }
        return true;
    }

    doChangeDetailsAll = function(modalTable)
    {
        if (modalTable) {
            RA.UI.doClearMessages($scope);
            $scope.doToggleActivityDetailsModal(modalTable);
            if(!$scope.$$phase) {
                $scope.$apply();
            }
        } else {
            //don't make call if disabled - Added check for Chrome issue
            if( $('#changeDetailsButton').attr('disabled') != 'disabled' )
            {
                RA.UI.doClearMessages($scope);
                $scope.doToggleActivityDetailsModal();
                if(!$scope.$$phase) {
                    $scope.$apply();
                }
            }
        }
    };

    doSetPendedOption = function(pendedOptionValue)
    {
        $scope.pendedOptionSelection = pendedOptionValue;
        setSessionItem(PEOPLE_PENDED_OPTION_SESSION_KEY,  pendedOptionValue);
    };

    doSetTrnStatus = function()
    {
        //don't make call if disabled - Added check for Chrome issue
        if( $('#setTRNStatusButton').attr('disabled') != 'disabled')
        {
            $scope.doToggleTRNStatusModal();
            if(!$scope.$$phase) {
                $scope.$apply();
            }
        }
    };

    doTogglePendedOptionDash = function()
    {
        $scope.doTogglePendedOption();
    };

    doUnlock = function(anchor)
    {
        //don't make call if disabled - Added check for Chrome issue
        if( $('#unlockButton').attr('disabled') != 'disabled')
        {
            RA.UI.doClearMessages($scope);
            $scope.doUnlockActivities(anchor);
        }
    };

    $scope.setCurrentCharView = function setCurrentCharView( newCurrentCharView )
    {
        setSessionItem(CURRENT_CHART_VIEW, newCurrentCharView );
        $scope.currentChartView = newCurrentCharView;
    }

    doEnableDisablePendingButtons = function doEnableDisablePendingButtons()
    {
        DBoard.UI.doEnableDisablePendingButtons($scope.extractFilterNamesFromAssignedToFilter());
    }

    $scope.extractFilterNamesFromAssignedToFilter  = function extractFilterNamesFromAssignedToFilter()
    {
        var filterName;
        var assignedToFilterNames = [];
        if( $scope.assignedToFilter )
        {
            angular.forEach($scope.assignedToFilter.assignedToList, function( hid )
            {
                filterName = $scope.assignedToFilter.assignedToMap[hid];
                if( filterName )
                {
                    assignedToFilterNames.push( filterName );
                }
            });

        }
        return assignedToFilterNames;
    }

}
DashboardController.$inject = ['$scope', '$rootScope', 'Dashboard', 'Activity', 'Navigation', 'Presentation', 'Search', 'Submission', '$timeout', '$compile', 'Logging', '$filter'];

function DBoard(){}
DBoard.Util = function(){};
DBoard.UI = function(){};

DBoard.Util.doProcessAssignToList = function(assignToFilter, assignToList)
{
    var newAssignHidList = [];
    var newAssignMap = {};
    var oldAssignMap = assignToFilter.assignedToMap;
    var copiedFiltersToRun = [];

    //get the hid for the user, keyed to name "Me"
    //"Me" should always be at the top of the list
    $.each(oldAssignMap, function(hid, name)
        {
            if (! oldAssignMap.hasOwnProperty(hid))
                return true;

            if (name == LOGIN_USER)
            {
                newAssignHidList.push(hid);
                newAssignMap[hid] = name;
                return false;
            }
        }
    );

    $.each(assignToList, function(i, assignTo)
        {
            if (! assignTo.hasOwnProperty('hid'))
                return true;

            var hid = assignTo.hid;
            var name = assignTo.name;

            //Me has already been added
            if (assignTo.name != LOGIN_USER)
            {
                newAssignHidList.push(hid);
                newAssignMap[hid] = name;
            }

            if (assignTo.doRun)
            {
                var copyFilter = DBoard.Util.doCopyFilter(assignToFilter);
                copyFilter.assignedToList = [hid];
                copyFilter.assignedToMap = {};
                copyFilter.assignedToMap[hid] = name;
                copyFilter.filterName = name;
                copiedFiltersToRun.push(copyFilter);
            }
        }
    );

    //set new assign list to assign filter
    //keeps the UI updated with selected assign to users
    assignToFilter.assignedToList = newAssignHidList;
    assignToFilter.assignedToMap = newAssignMap;

    return copiedFiltersToRun;
};

DBoard.Util.doCopyFilter = function(filterToCopy)
{
    var copyFilter = $.extend({}, filterToCopy);
    return copyFilter;
};

DBoard.Util.doExtractDefaultFilter = function(filters)
{
    var defaultFilter = null;

    $.each(filters, function(index, filter)
    {
        if (filter.defaultFilter)
        {
            defaultFilter = filter;
            return false;
        }
    });

    return defaultFilter;
};

DBoard.Util.doExtractMyInboxFilter = function(filters)
{
    var myInboxFilter = null;

    $.each(filters, function(index, filter)
    {
        if (MY_INBOX_FILTER_NM == filter.filterName)
        {
            myInboxFilter = filter;
            return false;
        }
    });

    return myInboxFilter;
};


DBoard.Util.doExtractAssignedToFilter = function(filters)
{
    var assignedToFilter = null;

    $.each(filters, function(index, filter)
    {
        if (filter.filterName == 'My Assigned To')
        {
            assignedToFilter = filter;
            filters.splice(index, 1);
            return false;
        }
    });

    return assignedToFilter;
};

DBoard.Util.doExtractAssignedToFilterList = function(filter)
{
    var hidList = filter.assignedToMap;
    var assignedToFilterList = {};

    $.each(hidList, function(hid, name)
    {
        assignedToFilterList[hid] = name;
    });

    return assignedToFilterList;
};

DBoard.UI.doSetupChart = function(filterResults, viewMode, retainTableFilters, $scope, $compile)
{
    var activityCountData = DBoard.UI.doResultsActivityCount(filterResults);
    var activiteStatusCount;
    var seriesData = [];
    var chartCategories = [];

    //reset trans type/status filtering
    if (retainTableFilters != true && $.fn.DataTable.fnIsDataTable(document.getElementById('dashboardItemsTable')))
    {
        DBoard.UI.doFilterDataTable('', ACTIVITY_CATEGORY_COLUMN_INDEX, false);
        DBoard.UI.doFilterDataTable('', TRN_STATUS_COLUMN_INDEX, false);
        DBoard.UI.doFilterDataTable('', FILTER_NAME_COLUMN_INDEX, false);
    }

    //color: ACTIVITY_BAR_COLOR
    switch(viewMode)
    {
        case VIEW_BY_ACTIVITY:
            currentChartView = VIEW_BY_ACTIVITY;
            seriesData.push(
                {
                    allowPointSelect: false,
                    name:'Activity Count',
                    data:
                        [
                            {name:NBS, y:activityCountData.NBS.Total},
                            {name:REN, y:activityCountData.REN.Total},
                            {name:ENDT, y:activityCountData.ENDT.Total},
                            {name:CANC, y:activityCountData.CANC.Total},
                            {name:REIN, y:activityCountData.REIN.Total},
                            {name:NRI, y:activityCountData.NRI.Total},
                            {name:OTHER, y:activityCountData.OTHER.Total}
                        ],
                    color:   ACTIVITY_BAR_COLOR

                }
            );

            chartCategories =
                [
                    'New Business (' + activityCountData.NBS.Total + ')',
                    'Renewal (' + activityCountData.REN.Total + ')',
                    'Endorsement (' + activityCountData.ENDT.Total + ')',
                    'Cancellation (' + activityCountData.CANC.Total + ')',
                    'Reinstatement (' + activityCountData.REIN.Total + ')',
                    'Non-Renewal (' + activityCountData.NRI.Total + ')',
                    'Other (' + activityCountData.OTHER.Total + ')'
                ];

            break;
        case VIEW_BY_ACTIVITY_STATUS:
            currentChartView = VIEW_BY_ACTIVITY_STATUS;
            $.each(STATUS_LIST, function(statusKey, statusValue)
                {
                    var myData = [];
                    activiteStatusCount = 0;
                    $.each(ACTIVITY_TYPE_LIST, function(typeKey, typeValue)
                        {
                            var count = activityCountData[typeKey][statusKey];
                            if (count == undefined)
                            {
                                myData.push({name:typeValue + ':' + statusValue, y:0});
                            }
                            else
                            {
                                myData.push({name:typeValue + ':' + statusValue, y:count});
                                activiteStatusCount += count;
                            }


                        }
                    );

                    seriesData.push({allowPointSelect: false,name:statusValue + '(' + activiteStatusCount+ ')', data:myData});
                }
            );

            chartCategories =
                [
                    'New Business (' + activityCountData.NBS.Total + ')',
                    'Renewal (' + activityCountData.REN.Total + ')',
                    'Endorsement (' + activityCountData.ENDT.Total + ')',
                    'Cancellation (' + activityCountData.CANC.Total + ')',
                    'Reinstatement (' + activityCountData.REIN.Total + ')',
                    'Non-Renewal (' + activityCountData.NRI.Total + ')',
                    'Other (' + activityCountData.OTHER.Total + ')'
                ];

            break;
        case VIEW_BY_TOTALS:
            currentChartView = VIEW_BY_TOTALS;
            var myData = [];
            $.each(filterResults, function(i, result)
                {
                    myData.push({ name:result.filterName, y:result.totalCount});
                    chartCategories.push(result.filterName + ' (' + result.totalCount+')');
                }
            );
            seriesData.push({allowPointSelect: false,name:'Total',data:myData});
            break;
    }

    RA.Session.removeDashboardViewByName();


    function sizeChartArea() {
        var topArea = $('.topArea');
        var chartArea = $('.chartArea');
        var filterArea = $('.filterArea');
        var chartAreaHeader = $('.chartAreaHeader');
        var chartAreaHeaderBackground = $('.chartAreaHeaderBackground');

        chartArea.width(topArea.width() - filterArea.outerWidth() - 4);

        chartAreaHeader.show();
        chartAreaHeaderBackground.show();
    }

    sizeChartArea();
    $(window).resize(function() {
        sizeChartArea();
    });

    dashboardChart = new Highcharts.Chart(
        {
            chart:
            {
                renderTo: 'chartContainer',
                type: 'column',
                height: 376,
                borderRadius: 0,
                borderWidth: 1,
                borderColor: '#999999'
            },
            title:
            {
                text:''
            },
            xAxis:
            {
                categories: chartCategories
            },
            credits:
            {
                enabled:false
            },
            yAxis:
            {

                minTickInterval:1,
                title:
                {
                    text:''
                }
            },
            series:seriesData,
            plotOptions:
            {
                column:
                {
                    cursor: 'pointer',
                    events:
                    {
                        legendItemClick : function(e){
                            return false;
                        }
                    },
                    animation: false,
                    point:
                    {
                        events:
                        {
                            click: function(event)
                            {

                                var INDEX_FOR_ACTIVITY_CATEGORY_DATA = 0;
                                var CLEAR_FILTER_VALUE = "";

                                //split occurs when on the "Activity & Status" chart. Name of bar is "activity category":"TRN Status"
                                //example "New Business:Open"
                                var filterTokens = this.name.split(':');

                                var clearFilters = shouldFiltersBeCleared( this.name );

                                //this manually selects the bar clicked on. This prevents multiple
                                //bars being selected at once. Make sure "allowPointSelect" is set to false
                                //for all the graphs
                                this.select(!this.selected, false);


                                //set or clears the filters on the Data Table
                                if(currentChartView == VIEW_BY_TOTALS)
                                {
                                    setOrClearFilterOnDataTableWhenViewByTotalsChartIsSelected( clearFilters, this.name );
                                }
                                else
                                {
                                    $.each(filterTokens, function(tokenIndex, token)
                                        {
                                            setOrClearFilterOnDataTableUsingTokenValueAsFilterValue( token, clearFilters, tokenIndex )

                                        }
                                    );
                                }

                                setOrRemoveClickedOnBarFromSession( clearFilters , this.name );

                                var dashboardItemsTable = $('#dashboardItemsTable').dataTable();

                                //start of declaration of private functions

                                function setOrRemoveClickedOnBarFromSession( clearFilters , name )
                                {
                                    if( clearFilters )
                                    {
                                        setSessionItem(SELECTED_BAR_SESSION_KEY, RESET_VALUE_FOR_SELECTED_BAR );
                                    }
                                    else
                                    {
                                        setSessionItem(SELECTED_BAR_SESSION_KEY, name );
                                    }
                                }

                                function setOrClearFilterOnDataTableWhenViewByTotalsChartIsSelected( clearFilters, name )
                                {
                                    if( clearFilters )
                                    {
                                        DBoard.UI.doFilterDataTable( CLEAR_FILTER_VALUE, FILTER_NAME_COLUMN_INDEX, DO_NOT_USE_REGULAR_EXPRESSIONS);
                                    }
                                    else
                                    {
                                        DBoard.UI.doFilterDataTable(name, FILTER_NAME_COLUMN_INDEX, DO_NOT_USE_REGULAR_EXPRESSIONS);
                                    }
                                }
                                function isTheBarClickedOnEqualToThePreviousClickedOne( name, previousFilterTokens )
                                {
                                    return name == previousFilterTokens;
                                }

                                function clearFilterForColumn( columnIndex, tokenIndex )
                                {
                                    if( tokenIndex == INDEX_FOR_ACTIVITY_CATEGORY_DATA )
                                    {
                                        DBoard.UI.doFilterDataTable( CLEAR_FILTER_VALUE, HIDDEN_COLUMN_USED_FOR_FILTERING_BY_ACTIVITY_CATEGORY_COLUMN_INDEX, DO_NOT_USE_REGULAR_EXPRESSIONS);
                                    }
                                    else
                                    {
                                        DBoard.UI.doFilterDataTable( CLEAR_FILTER_VALUE, columnIndex, DO_NOT_USE_REGULAR_EXPRESSIONS);
                                    }
                                }

                                function setFilterWhenSelectingOtherInBarChart( columnIndex, tokenIndex )
                                {
                                    if( tokenIndex == INDEX_FOR_ACTIVITY_CATEGORY_DATA )
                                    {
                                        DBoard.UI.doFilterDataTable( FILTER_REGEX_FOR_OTHER,
                                            HIDDEN_COLUMN_USED_FOR_FILTERING_BY_ACTIVITY_CATEGORY_COLUMN_INDEX,
                                            USE_REGULAR_EXPRESSIONS);
                                    }
                                    else
                                    {
                                        DBoard.UI.doFilterDataTable(FILTER_REGEX_FOR_OTHER, columnIndex, USE_REGULAR_EXPRESSIONS);
                                    }
                                }

                                function isTokenForFilteringDataTableByActivityCategory( tokenIndex )
                                {
                                    return tokenIndex == INDEX_FOR_ACTIVITY_CATEGORY_DATA;
                                }
                                function wasOtherSelectedInBarChart( token )
                                {
                                    return token == OTHER;
                                }


                                function setOrClearFilterOnDataTableUsingTokenValueAsFilterValue( token, clearFilters, tokenIndex )
                                {
                                    var columnIndex = tokenIndex + 1;
                                    if( clearFilters )
                                    {
                                        clearFilterForColumn( columnIndex, tokenIndex )
                                    }
                                    else if ( wasOtherSelectedInBarChart( token ) )
                                    {
                                        setFilterWhenSelectingOtherInBarChart( columnIndex, tokenIndex )
                                    }
                                    else if ( isTokenForFilteringDataTableByActivityCategory( tokenIndex) )
                                    {
                                        var regularExpressionForToken = '^' + token +'$';
                                        //due to issue with DataTable we are sorting the Activity Category via a hidden column
                                        DBoard.UI.doFilterDataTable( regularExpressionForToken,
                                            HIDDEN_COLUMN_USED_FOR_FILTERING_BY_ACTIVITY_CATEGORY_COLUMN_INDEX,
                                            USE_REGULAR_EXPRESSIONS);
                                    }
                                    else
                                    {
                                        DBoard.UI.doFilterDataTable(token, columnIndex, DO_NOT_USE_REGULAR_EXPRESSIONS);
                                    }

                                }

                                function shouldFiltersBeCleared( name  )
                                {
                                    var previousFilterTokens = RA.Session.getDashboardViewByName();
                                    if( isTheBarClickedOnEqualToThePreviousClickedOne( name, previousFilterTokens ) )
                                    {
                                        RA.Session.removeDashboardViewByName();
                                        return true;
                                    }

                                    RA.Session.addDashboardViewByName( name );
                                    return false

                                }
                                //end of declaration of private functions

                            }
                        }
                    }
                }
            }
        }

    );
};

// Assign Column Value based upon Key
DBoard.UI.assignColumnValues = function assignColumnValues(key, value)
{
    if(key === 'activityCategory') {
        COL_ACTIVITY_CATEGORY = value;
    }
    if(key === 'transactionStatusRefCode') {
        COL_TRN_STATUS = value;
    }
    if(key === 'assignedToName') {
        COL_ASSIGNED_TO = value;
    }
    if(key === 'bu1') {
        COL_BU_SPECIFIC_1 = value;
    }
    if(key === 'bu2') {
        COL_BU_SPECIFIC_2 = value;
    }
    if(key === 'needByDate') {
        COL_NEED_BY = value;
    }
    if(key === 'trnEffectiveDate') {
        COL_TRANS_EFFECTIVE_DATE = value;
    }
    if(key === 'insuredName') {
        COL_INSURED_NAME = value;
    }
    if(key === 'policy') {
        COL_POLICY = value;
    }
    if(key === 'producerName') {
        COL_PRODUCER_NAME = value;
    }
    if(key === 'transactionPremium') {
        COL_TRANS_PREMIUM = value;
    }
    if(key === 'assignedDate') {
        COL_ASSIGNED_DATE = value;
    }
    if(key === 'pendingDate') {
        COL_PENDING_DATE = value;
    }

};

DBoard.UI.findSortOrderParameters = function findSortOrderParameters(filterResults)
{
    var sort_column_index = DEFAULT_SORT_COLUMN_INDEX;
    var default_sort_order = 'asc';


    var savedSortInformation  = JSON.parse( getSessionItem(DATA_TABLE_STATE_SESSION_KEY));
    if( savedSortInformation != null &&
        savedSortInformation.aaSorting != null && savedSortInformation.aaSorting.length > 0 )
    {
        sort_column_index = savedSortInformation.aaSorting[0][0];
        default_sort_order = savedSortInformation.aaSorting[0][1];

    }
    else if( filterResults != null  && filterResults.length > 0)
    {
        sort_column_index  = SORTABLE_COLUMN_NAME_INDEX_MAP[filterResults[0].defaultSortField];
        if(filterResults[0].defaultSortOrder == 'asc' || filterResults[0].defaultSortOrder == 'desc')
        {
            default_sort_order = filterResults[0].defaultSortOrder;
        }
    }

    var returnValues = {};
    returnValues[SORT_COLUMN_INDEX_KEY] = sort_column_index;
    returnValues[SORT_ORDER_KEY] = default_sort_order;
    return returnValues;
}

DBoard.UI.doesActivityIdExistInList = function(submissionId, submissionList)
{
    return (submissionList.indexOf(submissionId) >= 0) ? true: false;
};

DBoard.UI.doSetUpDataTable = function($rootScope, $scope, retainTableFilters, $compile, $filter)
{
    var aaData = [];
    var currentUser = $scope.currentUser;
    var filterResults = $scope.currentFilterResults;

    var sortParameters = DBoard.UI.findSortOrderParameters(filterResults);
    var sortColumnIndex = sortParameters[SORT_COLUMN_INDEX_KEY];
    var default_sort_order = sortParameters[SORT_ORDER_KEY];
    var listOfUniqueActivityIds = [];
    var foundADuplicateActivityId = false;
    var pendingDateExist = false;
    var submissionAndActivityId = EMPTY_STRING;

    var overdueInd = '<span class="label label-important" title="Overdue">O</span>&nbsp;';
    var claimsExistInd = '<span class="label label-success" title="Claims Exist">CE</span>&nbsp;';
    var rushInd = '<span class="label label-warning" title="Rush">R</span>&nbsp;';
    var previouslyPendedInd = '<span class="label label-info" title="Previously Pended">PP</span>&nbsp;';

    if( filterResults != null )
    {
        $.each(filterResults, function(i) {
                var dashboardItems = filterResults[i].dashboardItems;

                if (dashboardItems != 'undefined' && dashboardItems != null)
                {
                    var dropDownMenu = "";
                    var submissionId = "";
                    var bu1 = "";
                    var bu2 = "";
                    $.each(dashboardItems, function(k, item)
                    {

                        // determine if the row already exists in the list ... If it does, don't add it again, and instead trigger
                        // a duplicate submission error message.
                        submissionAndActivityId = item.activityId + "--" + item.submissionId; // had to add the -- otherwise would have added the numbers
                        if (DBoard.UI.doesActivityIdExistInList(submissionAndActivityId, listOfUniqueActivityIds )) {
                            foundADuplicateActivityId = true;
                        } else {
                            listOfUniqueActivityIds.push(submissionAndActivityId);

                            var isLocked = item.lockedToHid && item.lockedToHid != currentUser.createHid;
                            if( ( item.pendingDate !='undefined' && item.pendingDate != null )  )
                            {
                                pendingDateExist = true;
                            }

                            var checkHTML = '<input id="cb' + item.submissionId + '_' + item.activityId + '" class="dashboardCheck" onClick="doDashboardCheck()" type="checkbox" value="' + item.submissionId + '"/>';
                            var dropDown =
                                '<div class="checkdrop">' +
                                    checkHTML +
                                    '<div class="btn-group">' +
                                    '<div class="gaig-jquery-context-menu">' +
                                    '<a href="#">' +
                                    '<i class="icon icon-twisty-down"></i>' +
                                    '</a>';
                            dropDownMenu = '<ul>';

                            // if it's a reminder, disable the WORK/VIEW links
                            if (item.activityCategory  == ACTIVITY_TYPE_REMINDER) {
                                dropDownMenu +=  '<li class="disabled">Work Submission...</li>';
                                dropDownMenu +=  '<li class="disabled">View Submission...</li>';
                            }
                            else if(isLocked || !$scope.editAccess)
                            {
                                dropDownMenu +=  '<li class="disabled">Work Submission...</li>';
                                dropDownMenu += '<li><a href="#" onclick="doHandleMenuAction(this, ' + VIEW_SUBMISSION + ', ' + item.submissionId + ')" data-dtName="viewSubmissionDashboard">View Submission...</a></li>';
                            }
                            else
                            {
                                dropDownMenu += '<li><a href="#"  onclick="doHandleMenuAction(this, ' + WORK_SUBMISSION + ', ' + item.submissionId + ')" data-dtName="workSubmissionDashboard">Work Submission...</a></li>';
                                dropDownMenu += '<li><a href="#"  onclick="doHandleMenuAction(this, ' + VIEW_SUBMISSION + ', ' + item.submissionId + ')" data-dtName="viewSubmissionDashboard">View Submission...</a></li>';
                            }

                            if (item.policyData != null)
                            {
                                if(!sessionData)
                                {
                                    sessionData = [];
                                }
                                var policyData = item.policyData.split("|");
                                var polTrnEffDt = policyData[0];
                                var trnExpirationDate = policyData[1];
                                var polSymbol = item.policy.split(' ')[0];
                                var polMod = item.policy.split(' ')[2];
                                var polVersion = item.policy.split (' ')[3];
                                var sessionVars = RA.Session.buildSelectedPolicyObject( policyData[0], policyData[1], policyData[3], policyData[2], policyData[4], polMod, polSymbol, polVersion);

                                sessionData[item.submissionId] = sessionVars;
                                var customerNumber = policyData[2];
                            }
                            dropDownMenu += '<li><a href="#"  onclick="RA.Session.removeQuoteId();RA.Session.removeSelectedQuoteId();doLinkManageActivities(\'' + item.submissionId + '\');">Manage Activities...</a></li>';

                            dropDownMenu += isLocked || !$scope.editAccess ? '<li><a href="#"  onclick="doHandleMenuAction(this, ' + VIEW_DETAIL + ', ' + item.submissionId + ')">View Details...</a></li>' :
                                '<li><a href="#" onclick="doHandleMenuAction(this, ' + CHANGE_DETAIL + ', ' + item.activityId + ')">Change Details...</a></li>';

                            if (item.activityCategory == ACTIVITY_TYPE_REMINDER || isLocked || !$scope.editAccess)
                            {
                                dropDownMenu +=
                                    '<li class="disabled">Set Transaction Status...</li>';
                            }
                            else
                            {
                                dropDownMenu +=
                                    '<li><a href="#"  onclick="doHandleMenuAction(this, ' + SET_TRANSACTION_STATUS + ', ' + item.activityId + ')">Set Transaction Status...</a></li>';
                            }
                            var enableUnlock = false;
                            if (($scope.unlockAccess || item.lockedToHid == currentUser.createHid) && $scope.editAccess) {
                                enableUnlock = true;
                            }
                            dropDownMenu += enableUnlock ? '<li><a href="#"  onclick="doHandleMenuAction(this, ' + UNLOCK + ')">Unlock</a></li>' :
                                '<li class="disabled">Unlock</li>';

                            dropDownMenu +=
                                '<li><a href="#"  onclick="doHandleMenuAction(this, ' + VIEW_SUPPORTING_DOCUMENTS + ', ' + item.submissionId + ')">View Supporting Documents</a></li>';

                            var policyNumber = item.policy;

                            if (policyNumber != null) {
                                policyNumber = policyNumber.split(' ')[1];
                            }

                            if (policyNumber != null && policyNumber != EMPTY_STRING) {
                                // this menu option should only be enabled if a policy exist
                                dropDownMenu +=  '<li><a href="#"  onclick="doHandleMenuAction(this, ' + VIEW_POLICY_DOCUMENTS + ', ' + item.policyNumber + ')">View Policy Documents...</a></li>';
                            } else {
                                dropDownMenu +=  '<li class="disabled">View Policy Documents...</li>';
                            }

                            dropDownMenu += '<li><a href="#" onclick="doHandleMenuAction(this, ' + VIEW_HISTORY + ')">View History...</a></li>';

                            dropDownMenu += '</ul>';
                            var dropDownMenuEnding = '</div></div>';

                            var trnStatusField = item.trnStatus;

                            if(!RA.UI.isNullorEmpty(item.lockedToHid))
                            {
                                var lockedToOther = false;
                                if (item.lockedToHid != currentUser.createHid){
                                    lockedToOther = true;
                                }
                                if ($scope.unlockAccess || !lockedToOther) {
                                    trnStatusField = trnStatusField + NEWLINE_TAG +'<img val="' + item.lockedToHid + '" title="' + item.lockedToName + '"src="dyn/images/lockGreen.png" onClick="doUnlock(this)"/>';
                                } else {
                                    trnStatusField = trnStatusField + NEWLINE_TAG +'<img val="' + item.lockedToHid + '" title="' + item.lockedToName + '"src="dyn/images/lockBlack.png" onClick="doUnlock(this)"/>';
                                }
                            }

                            // Convert Transaction Premium to Money Format
                            var formattedPremium;
                            var text = item.trnPremium;
                            if (text !== null && text !== EMPTY_STRING)
                            {
                                formattedPremium = text;
                            }
                            else
                            {
                                formattedPremium = EMPTY_STRING;
                            }

                            //TODO use constants
                            if(item.lockedToHid == null || item.lockedToHid == currentUser.createHid  ){
                                var activityCategory = item.activityCategory;
                            }else{
                                var activityCategory = item.activityCategory;
                            }
                            var subType = item.transactionSubTypeRefCode;
                            if(subType === ACTIVITY_TYPE_REWRITE){
                                var transactionSubType = ' / ' + subType;
                                activityCategory += transactionSubType;
                            }
                            var transType = item.transactionTypeRefCode;
                            if(transType === "CANC" && item.isCancelRewrite === "YES") {
                                activityCategory += " / Rewrite";
                            }

                            var desc = item.activityDesc == null ? '' : item.activityDesc;
                            if (desc != EMPTY_STRING) {
                                activityCategory += '&nbsp;&nbsp;<img title="' + desc + '"src="dyn/images/info.jpeg" />';
                            }

                            var showOverdueInd = item.overdueIndicator == null ? false : item.overdueIndicator;
                            var showPrevPendingInd = item.prevPendedIndicator == null ? false : item.prevPendedIndicator;
                            var showRushInd = item.rushIndicator == null ? false : item.rushIndicator;
                            var showClaimsExistInd = item.claimsExistIndicator == null ? false : item.claimsExistIndicator;

                            var html = '<br/>';

                            if (showOverdueInd) {
                                html += '<div class="dashboardIconSingleLetterO">' + overdueInd + "</div>";
                            } else{
                                html += '<div class="dashboardIconSingleLetterO"></div>';
                            }
                            if (showRushInd) {
                                html += '<div class="dashboardIconSingleLetter">' + rushInd + "</div>";
                            } else {
                                html += '<div class="dashboardIconSingleLetter"></div>';
                            }
                            if (showClaimsExistInd) {
                                html += '<div class="dashboardIconDoubleLetter">' + claimsExistInd + "</div>";
                            } else {
                                html += '<div class="dashboardIconDoubleLetter"></div>';
                            }

                            activityCategory += html;

                            var policyColumn;
                            if (item.isNonUD === "NO") {
                                policyColumn = '<img class="sourceSystemCube">' + item.policy;
                            } else {
                                policyColumn = item.policy
                            }

                            var dropDownMenuTotal = dropDown + dropDownMenu + dropDownMenuEnding;

                            if (item.activityCategory == ACTIVITY_TYPE_REMINDER) {
                                submissionId = EMPTY_STRING;
                                activityCategory = item.activityCategory;
                                // Add Informational Icon for Reminder Explanation
                                var desc = item.activityDesc == null ? '' : item.activityDesc;
                                if (desc != EMPTY_STRING) {
                                    activityCategory += '&nbsp;&nbsp;<img title="' + desc + '"src="dyn/images/info.jpeg" />';
                                }
                            } else {
                                submissionId = item.submissionId;
                            }
                            if (showPrevPendingInd) {
                                activityCategory += '<div class="dashboardIconDoubleLetter">' + previouslyPendedInd + "</div>";
                            } else {
                                activityCategory += '<div class="dashboardIconDoubleLetter"></div>';
                            }

                            // BU Specific Column Fields added bu1 and bu2
                            // For Base Ref App (RABU), these fields contain submissionId and customerNumber

                            // Check to Ensure bu specific fields exist
                            if ('bu1' in item) {
                                if(item.bu1 === NONE_OPTION)
                                    item.bu1 = "";
                                bu1 = item.bu1;
                            }
                            else {
                                HIDE_BU1_SPECIFIC_COLUMN = true;
                            }
                            // Check to Ensure bu specific field exist
                            if ('bu2' in item) {
                                if(item.bu2 === NONE_OPTION)
                                    item.bu2 = "";
                                bu2 = item.bu2;
                            }
                            else {
                                HIDE_BU2_SPECIFIC_COLUMN	= true;
                            }

                            // if changing the order of these columns, please update the SORTABLE_COLUMN_NAME_INDEX_MAP
                            var row =
                                [
                                    dropDownMenuTotal,
                                    activityCategory,
                                    trnStatusField,
                                    item.assignedToName,
                                    bu1,
                                    bu2,
                                    DBoard.UI.doFormatDate(item.needByDate),
                                    DBoard.UI.doFormatDate(item.trnEffectiveDate, activityCategory),
                                    DBoard.UI.doGetInsuredName(item),
                                    policyColumn,
                                    item.producerName,
                                    OPEN_SPAN_RIGHT_TAG + $filter(CURRENCY)(formattedPremium)+ CLOSE_SPAN_TAG,
                                    DBoard.UI.doFormatDate(item.assignedDate),
                                    item.submissionId,
                                    item.activityDesc,
                                    item.activityId,
                                    item.lockedToHid,
                                    item.pendingIndicator,
                                    item.overdueIndicator,
                                    item.rushIndicator,
                                    item.claimsExistIndicator,
                                    item.prevPendedIndicator,
                                    DBoard.UI.doFormatDate(item.pendingDate),
                                    filterResults[i].filterName,
                                    item.activityCategory,
                                    DBoard.UI.doFormatDate(trnExpirationDate),
                                    item.isWorked,
                                    item.isNonUD,
                                    polTrnEffDt
                                ];

                            aaData.push(row);
                        }
                    });
                }
            }
        );


        if (foundADuplicateActivityId) {
            $scope.infoMessages.push({"text":DUPLICATES_REMOVED_MESSAGE, "heading": DUPLICATES_REMOVED_HEADING});
        }
    }

    try {
        if ( (!$.fn.DataTable.fnIsDataTable(document.getElementById('dashboardItemsTable'))))
        {
            var aoColumns =
                [
                    {'sTitle':''},
                    {'sTitle':COL_ACTIVITY_CATEGORY, 'sWidth':'11.5%'},//'sType': 'string'},
                    {'sTitle':COL_TRN_STATUS,'sWidth':'7.5%'},
                    {'sTitle':COL_ASSIGNED_TO, 'sWidth':'7%'},
                    {'sTitle':COL_BU_SPECIFIC_1, 'sWidth':'8%'},//submissionId
                    {'sTitle':COL_BU_SPECIFIC_2, 'sWidth':'8%'}, //customerNumber
                    {'sTitle':COL_NEED_BY, 'sWidth':'8%'},
                    {'sTitle':COL_TRANS_EFFECTIVE_DATE, 'sWidth':'8%'},
                    {'sTitle':COL_INSURED_NAME, 'sWidth':'8%'},
                    {'sTitle':COL_POLICY, 'sWidth':'6.5%'},
                    {'sTitle':COL_PRODUCER_NAME, 'sWidth':'10.5%'},
                    {'sTitle':COL_TRANS_PREMIUM,'sClass':'alignRight','sWidth':'8.5%'},
                    {'sTitle':COL_ASSIGNED_DATE, 'sWidth':'8.5%'},
                    {'sTitle':'Submission id'},		// col 13 - hidden
                    {'sTitle':'Activity Reason'},	// col 14 - hidden
                    {'sTitle':'Activity ID'},	// col 15 - hidden
                    {'sTitle':'Locked to HID'},	// col 16 -  hidden
                    {'sTitle':'Pending Indicator'}, // col 17 - hidden
                    {'sTitle':'Overdue Indicator'}, // col 18 - hidden
                    {'sTitle':'Rush Indicator'}, // col 19 - hidden
                    {'sTitle':'Claims Exist Indicator'}, // col 20 - hidden
                    {'sTitle':'Previously Pended Indicator'}, //col 21 - hidden
                    {'sTitle':COL_PENDING_DATE},
                    {'sTitle':'filter Name'},
                    {'sTitle':'activity category hidden column for filtering'},//col 24 - hidden,
                    {'sTitle':'Trn Expiration'} // col 25 - hidden

                ];
            // If Either BU Specific Field is Hidden, Adjust Width
            if (HIDE_BU1_SPECIFIC_COLUMN || HIDE_BU2_SPECIFIC_COLUMN)
                aoColumns[0] = {'sTitle':'','sWidth':'8%'};

            var aTargetArray = [SUBMISSION_ID_COLUMN_INDEX,
                ACTIVITY_REASON_COLUMN_INDEX,
                LOCKED_TO_HID_COLUMN_INDEX,
                PENDING_INDICATOR_COLUMN_INDEX,
                OVERDUE_INDICATOR_COLUMN_INDEX,
                ACTIVITY_ID_COLUMN_INDEX,
                RUSH_INDICATOR_COLUMN_INDEX,
                CLAIMS_EXIST_INDICATOR_COLUMN_INDEX,
                PREVIOUS_PENDING_INDICATOR_COLUMN_INDEX,
                PENDING_DATE_COLUMN_INDEX,
                FILTER_NAME_COLUMN_INDEX,
                HIDDEN_COLUMN_USED_FOR_FILTERING_BY_ACTIVITY_CATEGORY_COLUMN_INDEX];
            // Hide BU Special Field Column for BU's with no BU Specific Columns
            if (HIDE_BU1_SPECIFIC_COLUMN)
                aTargetArray.push(BU1_SPECIFIC_COLUMN_INDEX);
            if (HIDE_BU2_SPECIFIC_COLUMN)
                aTargetArray.push(BU2_SPECIFIC_COLUMN_INDEX);

            $.fn.dataTableExt.oPagination.input = {
                "fnInit": function ( oSettings, nPaging, fnCallbackDraw )
                {
                    var nPagingGroup = document.createElement( 'div' );
                    var nFirst = document.createElement( 'span' );
                    var nPrevious = document.createElement( 'span' );
                    var nNext = document.createElement( 'span' );
                    var nLast = document.createElement( 'span' );
                    var nInput = document.createElement( 'input' );
                    var nPage = document.createElement( 'span' );
                    var nOf = document.createElement( 'span' );

                    nFirst.innerHTML = oSettings.oLanguage.oPaginate.sFirst;
                    nPrevious.innerHTML = oSettings.oLanguage.oPaginate.sPrevious;
                    nNext.innerHTML = oSettings.oLanguage.oPaginate.sNext;
                    nLast.innerHTML = oSettings.oLanguage.oPaginate.sLast;

                    nPagingGroup.className = "paging-group";
                    nFirst.className = "paginate_button first";
                    nPrevious.className = "paginate_button previous btn";
                    nNext.className="paginate_button next btn";
                    nLast.className = "paginate_button last";
                    nOf.className = "paginate_of";
                    nPage.className = "paginate_page";

                    if ( oSettings.sTableId !== '' )
                    {
                        nPaging.setAttribute( 'id', oSettings.sTableId+'_paginate' );
                        nPrevious.setAttribute( 'id', oSettings.sTableId+'_previous' );
                        nPrevious.setAttribute( 'id', oSettings.sTableId+'_previous' );
                        nNext.setAttribute( 'id', oSettings.sTableId+'_next' );
                        nLast.setAttribute( 'id', oSettings.sTableId+'_last' );
                    }

                    nInput.type = "text";
                    nInput.className = "input-xmini";
                    nPage.innerHTML = "Page ";

                    nPaging.appendChild( nPagingGroup );
                    nPagingGroup.appendChild( nPrevious );
                    nPagingGroup.appendChild( nNext );
                    nPagingGroup.appendChild( nInput );
                    nPagingGroup.appendChild( nOf );

                    $(nFirst).click( function () {
                        oSettings.oApi._fnPageChange( oSettings, "first" );
                        fnCallbackDraw( oSettings );
                    } );

                    $(nPrevious).click( function() {
                        oSettings.oApi._fnPageChange( oSettings, "previous" );
                        fnCallbackDraw( oSettings );
                    });

                    $(nNext).click( function() {
                        oSettings.oApi._fnPageChange( oSettings, "next" );
                        fnCallbackDraw( oSettings );
                    });

                    $(nLast).click( function() {
                        oSettings.oApi._fnPageChange( oSettings, "last" );
                        fnCallbackDraw( oSettings );
                    } );

                    $(nInput).keyup( function (e) {

                        if ( e.which == 38 || e.which == 39 )
                        {
                            this.value++;
                        }
                        else if ( (e.which == 37 || e.which == 40) && this.value > 1 )
                        {
                            this.value--;
                        }

                        if ( this.value == "" || this.value.match(/[^0-9]/) || this.value == 0 )
                        {
                            /* Nothing entered or non-numeric character */
                            return;
                        }

                        var iNewStart = oSettings._iDisplayLength * (this.value - 1);
                        if ( iNewStart > oSettings.fnRecordsDisplay() )
                        {
                            /* Display overrun */
                            oSettings._iDisplayStart = (Math.ceil((oSettings.fnRecordsDisplay()-1) /
                                oSettings._iDisplayLength)-1) * oSettings._iDisplayLength;
                            fnCallbackDraw( oSettings );
                            return;
                        }

                        oSettings._iDisplayStart = iNewStart;
                        fnCallbackDraw( oSettings );
                    } );

                    /* Take the brutal approach to cancelling text selection */
                    $('span', nPaging).bind( 'mousedown', function () { return false; } );
                    $('span', nPaging).bind( 'selectstart', function () { return false; } );
                },


                "fnUpdate": function ( oSettings, fnCallbackDraw )
                {
                    if ( !oSettings.aanFeatures.p )
                    {
                        return;
                    }
                    var iPages = Math.ceil((oSettings.fnRecordsDisplay()) / oSettings._iDisplayLength);
                    var iCurrentPage = Math.ceil(oSettings._iDisplayStart / oSettings._iDisplayLength) + 1;

                    if (iPages === 1) {
                        $('.paging-group .previous').attr('disabled',true);
                        $('.paging-group .next').attr('disabled',true);
                    }
                    else if ((iCurrentPage === 1) && iPages > 1) {
                        $('.paging-group .previous').attr('disabled',true);
                        $('.paging-group .next').attr('disabled',false);
                    }
                    else if (iCurrentPage == iPages) {
                        $('.paging-group .previous').attr('disabled',false);
                        $('.paging-group .next').attr('disabled',true);
                    }
                    else {
                        $('.paging-group .previous').attr('disabled',false);
                        $('.paging-group .next').attr('disabled',false);
                    }

                    /* Loop over each instance of the pager */
                    var an = oSettings.aanFeatures.p;
                    for ( var i=0, iLen=an.length ; i<iLen ; i++ )
                    {
                        var spans = $(an[i]).find("span");
                        var inputs = an[i].getElementsByTagName('input');
                        spans.get(2).innerHTML = "of "+iPages + " pages"
                        inputs[0].value = iCurrentPage;
                    }
                }
            };

            var dashboardRowCountOptions = $scope.rowCount.options;
            var pageSizeDefault = parseInt($scope.rowCount.pageSizeDefault);

            var dashboardItemsTable = $('#dashboardItemsTable').dataTable(
                {
                    'aaData': aaData,
                    'bSortClasses': false,
                    //'bStateSave': true,
                    'iDisplayLength' : pageSizeDefault,
                    'aLengthMenu': [dashboardRowCountOptions, dashboardRowCountOptions],
                    'iCookieDuration': EIGHT_HOURS,
                    'aoColumns': aoColumns,
                    'oLanguage': { "sInfo": "&nbsp; Showing _START_ to _END_ of _TOTAL_ Record(s) &nbsp;" , "sInfoEmpty": "&nbsp;&nbsp;0 Records" ,  "sInfoFiltered": "&nbsp;" , "sSearch": "&nbsp;", "sLengthMenu": "Show&nbsp;&nbsp;_MENU_"},
                    'sDom': '<"dashboardFilter"<"dashboardFilterControls"fi>><"dashboardPaging"lp>rtS<"dashboardPagingBottom"lp>',
                    'bDeferRender': true,
                    //'iDisplayLength': -1,
                    'aaSorting': [[sortColumnIndex, default_sort_order]],
                    'fnDrawCallback': function (oSettings) {
                        var excludeButton = $('#excludeButton');
                        if (excludeButton.hasClass("active")){
                            DBoard.UI.doShowHidePendedDateColumn (PENDING_DATE_COLUMN_INDEX, false);
                            $('td.infoRowDashboardeven').attr('colspan', '13');
                            $('td.infoRowDashboardodd').attr('colspan', '13');
                        }

                        $(".gaig-jquery-context-menu").gaigJqueryContextMenu();
                    },
                    'fnStateSave': function (oSettings, oData) {
                        setSessionItem(DATA_TABLE_STATE_SESSION_KEY, JSON.stringify(oData));
                    },
                    'fnStateLoad': function (oSettings) {
                        return JSON.parse(getSessionItem(DATA_TABLE_STATE_SESSION_KEY));
                    },
                    'aoColumnDefs':
                        [
                            {'bSortable':false, 'aTargets':[DROPDOWN_MENU_COLUMN_INDEX]},
                            { "bSearchable": false, "aTargets": [ DROPDOWN_MENU_COLUMN_INDEX,ACTIVITY_CATEGORY_COLUMN_INDEX ] },
                            {'sType':'date', 'aTargets':[NEED_BY_COLUMN_INDEX,ASSIGNED_DATE_COLUMN_INDEX,PENDING_DATE_COLUMN_INDEX]},
                            {'sType':'html', 'aTargets':[ACTIVITY_ID_COLUMN_INDEX]},
                            {'aTargets': aTargetArray, 'bVisible':false}
                        ],
                    //'bPaginate': false,
                    'bAutoWidth': false,
                    "sPaginationType": "input"
                });

            var filterTimer = null,
                filterControl = $('input', dashboardItemsTable.fnSettings().aanFeatures.f);


            filterControl.unbind('keyup').bind('keyup', function() {
                if (filterTimer !== null) {
                    window.clearTimeout(filterTimer);
                }

                filterTimer = setTimeout(function() {
                    dashboardItemsTable.fnFilter(filterControl.val());
                }, 250);
            });

            DBoard.UI.doShowHidePendedDateColumn(HIDDEN_TRN_EXPIRATION_DATE, false);

            //IE 10 X button on input fields
            var filterInput = $('.dataTables_filter input');
            filterInput.bind("mouseup", function(e) {
                var $input = $(this), oldValue = $input.val();

                setTimeout(function() {
                    var newValue = $input.val();

                    if (newValue == "") {
                        var dashboardItemsTable = new RA.UI.TableReader(
                            'dashboardItemsTable', '', []);
                        var dashboardDataTable = dashboardItemsTable.toDataTable();
                        dashboardDataTable.fnFilter(newValue);
                    }
                }, 1);
            });

            $('.dataTables_filter input').attr("placeholder", "search table...");

            $('.dataTables_scrollHead').on('click', function(e) {
                var myTarget = e.target ? e.target : e.srcElement;
                latestSortColumn = myTarget.innerText;
                if (latestSortColumn != null && latestSortColumn != EMPTY_STRING) {
                    doEnableSaveCurrentViewLink();
                }
            });

            if (sortColumnIndex != null && retainTableFilters != true)
            {
                dashboardItemsTable.fnSort([[sortColumnIndex,default_sort_order]]);
            }
            if( retainTableFilters != true )
            {
                DBoard.UI.clearAllFiltersOnDataTable();
            }

            jQuery.fn.dataTableExt.oSort['string-asc']  = function(cellValue1,cellValue2)
            {
                cellValue1 = DBoard.UI.removeAnchorTagFromString( cellValue1 );
                cellValue2 = DBoard.UI.removeAnchorTagFromString( cellValue2 );

                return ((cellValue1 < cellValue2) ? -1 : ((cellValue1 > cellValue2) ?  1 : 0));
            };

            jQuery.fn.dataTableExt.oSort['string-desc'] = function(cellValue1,cellValue2)
            {

                cellValue1 = DBoard.UI.removeAnchorTagFromString( cellValue1 );
                cellValue2 = DBoard.UI.removeAnchorTagFromString( cellValue2 );

                return ((cellValue1 < cellValue2) ?  1 : ((cellValue1 > cellValue2) ? -1 : 0));
            };


        }
        else
        {
            var dashboardItemsTable = $('#dashboardItemsTable').dataTable();

            // Store which activities were checked
            var checkedSubs = [];

            angular.forEach(dashboardItemsTable, function(value, key) {
                $('.dashboardCheck:checkbox:checked').each(function() {

                    var dataTable = $('#dashboardItemsTable').dataTable({"bRetrieve":true});
                    var rowIndex = dataTable.fnGetPosition($(this).closest('tr')[0]);
                    var data = dataTable.fnGetData(rowIndex);
                    checkedSubs.push({subId:data[13],actId:data[15]});
                });
            });

            dashboardItemsTable.fnClearTable();


            if(retainTableFilters != true)
            {
                DBoard.UI.clearAllFiltersOnDataTable();
            }

            dashboardItemsTable.fnAddData(aaData);

            // Re-check previously selected activities
            for (var i= 0,len=checkedSubs.length; i<len; i++)
            {
                var subId = checkedSubs[i].subId;
                var actId = checkedSubs[i].actId;

                $("#cb" + subId + '_' + actId).click();
            }

            doEnableSaveCurrentViewLink(false);
            if( pendingDateExist)
            {
                dashboardItemsTable.fnSetColumnVis( PENDING_DATE_COLUMN_INDEX, true, true );
            }
            else
            {
                dashboardItemsTable.fnSetColumnVis( PENDING_DATE_COLUMN_INDEX, false, true );
            }
            if (sortColumnIndex != null && retainTableFilters != true)
            {
                dashboardItemsTable.fnSort([[sortColumnIndex,default_sort_order]]);
            }
        }

    }
    catch (err) {
        var errorMessage = "Error loading data into the dashboard table. Method: DBoard.UI.doSetUpDataTable";
        var logFunction= function logInfoFunction(callback)
        {
            Logging.logMyInfo($scope.currentUser.createHid, errorMessage, "", function (result)
            {
                var data = RA.Service.handleServiceResult(result, scope);
            });
        };
        RA.UI.displayGenericErrorMessage($rootScope, $scope, err, logFunction);
    }

    var tableFilter = $('.dashboardFilter');
    var buttonSection = tableFilter.find('#buttonSection');

    if(DBoard.UI.doesButtonSectionNeedToBeCreate( tableFilter ) )
    {
        var tableTopper ='<div class="gaig-table-topper"><div class="pull-left"><h3 class="table-title">Activities</h3></div>'
        var buttonBackground = '<div class="gaig-table-info">'
        var buttonRowDiv = '<div id="buttonSection" class="pull-left">';
        var changeDetailsButton = $scope.editAccess ? '<a id="changeDetailsButton"  class="btn dashboardButtons" type="submit" ng-click="doChangeDetailsAll()" >Change Details...</a>'
            : '<a id="changeDetailsButton"  class="btn dashboardButtons" type="submit" ng-click="doChangeDetailsAll()">View Details...</a>';
        var setTrnStatusButton = '<a id="setTRNStatusButton"  class="btn dashboardButtons" type="submit" onclick="doSetTrnStatus()" >Set TRN Status...</a>';
        var unlockButton = '<a id="unlockButton" class="btn dashboardButtons" type="submit" ng-click="doUnlock()" >Unlock</a>';
        var buttonRow = tableTopper  + CLOSE_DIV_TAG + buttonBackground + buttonRowDiv + changeDetailsButton + setTrnStatusButton + unlockButton + CLOSE_DIV_TAG;

        tableFilter.append(buttonRow);

        $('#changeDetailsButton').click(function(){ doChangeDetailsAll(); });
        $('#unlockButton').click(function(){ doUnlock(); });

        $('#changeDetailsButton').attr('disabled',true);
        $('#setTRNStatusButton').attr('disabled',true);
        $('#unlockButton').attr('disabled',true);

        $('#excludeButton').click(function()
        {
            if( !($('#excludeButton').attr('disabled') ) )
            {
                $('#excludeButton').addClass("active");
                $('#includeButton').removeClass("active");
                $('#onlyButton').removeClass("active");
                doSetPendedOption(EXCLUDE_PENDED);
                doTogglePendedOptionDash();
                if( doGetRunFiltersKey() == RUN_MY_ASSIGNED )
                {
                    DBoard.UI.doShowHidePendedDateColumn (PENDING_DATE_COLUMN_INDEX, false);
                    var colspanEven = $('td.infoRowDashboardeven').attr('colspan', '13');
                    var colspanOdd = $('td.infoRowDashboardodd').attr('colspan', '13');
                }
            }
        });

        $('#includeButton').click(function()
        {
            if( !($('#includeButton').attr('disabled') ) )
            {
                $('#excludeButton').removeClass("active");
                $('#includeButton').addClass("active");
                $('#onlyButton').removeClass("active");
                doSetPendedOption(INCLUDE_PENDED);
                doTogglePendedOptionDash();
                if( doGetRunFiltersKey() == RUN_MY_ASSIGNED )
                {
                    DBoard.UI.doShowHidePendedDateColumn (PENDING_DATE_COLUMN_INDEX, true);
                    var colspanEven = $('td.infoRowDashboardeven').attr('colspan', '14');
                    var colspanOdd = $('td.infoRowDashboardodd').attr('colspan', '14');
                }
            }
        });

        $('#onlyButton').click(function() {
            if( !($('#onlyButton').attr('disabled') ) )
            {

                $('#excludeButton').removeClass("active");
                $('#includeButton').removeClass("active");
                $('#onlyButton').addClass("active");
                doSetPendedOption(ONLY_PENDED);
                doTogglePendedOptionDash();
                if( doGetRunFiltersKey() == RUN_MY_ASSIGNED )
                {
                    DBoard.UI.doShowHidePendedDateColumn (PENDING_DATE_COLUMN_INDEX, true);
                    var colspanEven = $('td.infoRowDashboardeven').attr('colspan', '14');
                    var colspanOdd = $('td.infoRowDashboardodd').attr('colspan', '14');
                }
            }
        });

    }

};

DBoard.UI.doesButtonSectionNeedToBeCreate = function doesButtonSectionNeedToBeCreate(tableFilter)
{
    var buttonSection = tableFilter.find('#buttonSection');
    return buttonSection == null || buttonSection.length <= 0;
}

DBoard.UI.doesStringContainAnchorTag = function doesStringContainAnchorTag( value )
{
    if( value == null || value == undefined )
    {
        return false;
    }
    if( value.indexOf( BEGINING_ANCHOR_TAG_KEY ) != -1)
    {
        return true;
    }

    return false;
}
DBoard.UI.removeAnchorTagFromString = function removeAnchorTagFromString( value )
{

    if( DBoard.UI.doesStringContainAnchorTag( value ) )
    {
        var startingIndex = value.indexOf( ENDING_OF_BEGINING_ANCHOR_TAG_KEY ) + ENDING_OF_BEGINING_ANCHOR_TAG_KEY.length;
        var endingIndex =  value.indexOf( ENDING_ANCHOR_TAG_KEY );

        return  value.substring( startingIndex, endingIndex );
    }

    return value;
}

DBoard.UI.doAddSecondRowToTable = function doAddSecondRowToTable()
{
    var overdueInd = '<span class="label label-important" title="Overdue">O</span>&nbsp;';
    var claimsExistInd = '<span class="label label-success" title="Claims Exist">CE</span>&nbsp;';
    var rushInd = '<span class="label label-warning" title="Rush">R</span>&nbsp;';
    var previouslyPendedInd = '<span class="label label-info" title="Previously Pended">PP</span>&nbsp;';
    var dashboardItemsTable = $('#dashboardItemsTable').dataTable();
    $($('#dashboardItemsTable').dataTable()._fnGetTrNodes()).each(function()
    {
        var position = dashboardItemsTable.fnGetPosition(this);
        var data = position ? dashboardItemsTable.fnGetData(position) : [];
        var desc = data[ACTIVITY_REASON_COLUMN_INDEX] == null ? '' : data[ACTIVITY_REASON_COLUMN_INDEX];
        var showOverdueInd = data[OVERDUE_INDICATOR_COLUMN_INDEX] == null ? false : data[OVERDUE_INDICATOR_COLUMN_INDEX];
        var showPrevPendingInd = data[PREVIOUS_PENDING_INDICATOR_COLUMN_INDEX] == null ? false : data[PREVIOUS_PENDING_INDICATOR_COLUMN_INDEX];
        var showRushInd = data[RUSH_INDICATOR_COLUMN_INDEX] == null ? false : data[RUSH_INDICATOR_COLUMN_INDEX];
        var showClaimsExistInd = data[CLAIMS_EXIST_INDICATOR_COLUMN_INDEX] == null ? false : data[CLAIMS_EXIST_INDICATOR_COLUMN_INDEX];

        var myclass = $(this).attr('class');

        var html = '<div><div class="dashboardDetailsSpacer1">&nbsp;</div><div class="dashboardDetailsSpacer2">';

        if (showOverdueInd) {
            html += '<div class="dashboardIconSingleLetterO">' + overdueInd + "</div>";
        } else{
            html += '<div class="dashboardIconSingleLetterO"></div>';
        }
        if (showRushInd) {
            html += '<div class="dashboardIconSingleLetter">' + rushInd + "</div>";
        } else {
            html += '<div class="dashboardIconSingleLetter"></div>';
        }
        if (showClaimsExistInd) {
            html += '<div class="dashboardIconDoubleLetter">' + claimsExistInd + "</div>";
        } else {
            html += '<div class="dashboardIconDoubleLetter"></div>';
        }
        if (showPrevPendingInd) {
            html += '<div class="dashboardIconDoubleLetter">' + previouslyPendedInd + "</div>";
        } else {
            html += '<div class="dashboardIconDoubleLetter"></div>';
        }

        html += '</div><div class="dashboardDetails" title="' + desc + '"><b>Explanation/Description:</b>&nbsp;';
        html += desc;
        html += '</div></div>';

        var rowClass = 'infoRowDashboard' + myclass;
        dashboardItemsTable.fnOpen(this, html, rowClass);
    });
}

DBoard.UI.clearAllFiltersOnDataTable = function clearAllFiltersOnDataTable()
{

    var dashboardItemsTable = $('#dashboardItemsTable').dataTable();

    var iCol;
    var oSettings = dashboardItemsTable.fnSettings();
    for(iCol = 0; iCol < oSettings.aoPreSearchCols.length; iCol++) {
        oSettings.aoPreSearchCols[ iCol ].sSearch = '';
    }
    dashboardItemsTable.fnDraw();

    /****
     dashboardItemsTable.fnFilter('',ACTIVITY_CATEGORY_COLUMN_INDEX);
     dashboardItemsTable.fnFilter('',TRN_STATUS_COLUMN_INDEX);
     dashboardItemsTable.fnFilter('',ASSIGNED_TO_COLUMN_INDEX);
     dashboardItemsTable.fnFilter('',BU1_SPECIFIC_COLUMN_INDEX);
     dashboardItemsTable.fnFilter('',BU2_SPECIFIC_COLUMN_INDEX);
     dashboardItemsTable.fnFilter('',NEED_BY_COLUMN_INDEX);
     dashboardItemsTable.fnFilter('',TRANS_EFFECTIVE_DATE_COLUMN_INDEX);
     dashboardItemsTable.fnFilter('',INSURED_NAME_COLUMN_INDEX);
     dashboardItemsTable.fnFilter('',POLICY_COLUMN_INDEX);
     dashboardItemsTable.fnFilter('',PRODUCER_NAME_COLUMN_INDEX);
     dashboardItemsTable.fnFilter('',TRANS_PREMIUM_COLUMN_INDEX);
     dashboardItemsTable.fnFilter('',ASSIGNED_DATE_COLUMN_INDEX);
     dashboardItemsTable.fnFilter('',SUBMISSION_ID_COLUMN_INDEX);
     dashboardItemsTable.fnFilter('',ACTIVITY_REASON_COLUMN_INDEX);
     dashboardItemsTable.fnFilter('',ACTIVITY_ID_COLUMN_INDEX);
     dashboardItemsTable.fnFilter('',LOCKED_TO_HID_COLUMN_INDEX);
     dashboardItemsTable.fnFilter('',PENDING_INDICATOR_COLUMN_INDEX);
     dashboardItemsTable.fnFilter('',OVERDUE_INDICATOR_COLUMN_INDEX);
     dashboardItemsTable.fnFilter('',RUSH_INDICATOR_COLUMN_INDEX);
     dashboardItemsTable.fnFilter('',CLAIMS_EXIST_INDICATOR_COLUMN_INDEX);
     dashboardItemsTable.fnFilter('',PREVIOUS_PENDING_INDICATOR_COLUMN_INDEX);
     dashboardItemsTable.fnFilter('',PENDING_DATE_COLUMN_INDEX);
     dashboardItemsTable.fnFilter('',FILTER_NAME_COLUMN_INDEX);
     dashboardItemsTable.fnFilter('',HIDDEN_COLUMN_USED_FOR_FILTERING_BY_ACTIVITY_CATEGORY_COLUMN_INDEX);
     ****/
}

DBoard.UI.doShowHidePendedDateColumn = function ( iCol, showHide )
{
    var oTable = $('#dashboardItemsTable').dataTable();

    var bVis = oTable.fnSettings().aoColumns[iCol].bVisible;
    oTable.fnSetColumnVis( iCol, showHide );
}

DBoard.UI.doShowHidePendedDateColumn = function ( iCol, showHide )
{
    var oTable = $('#dashboardItemsTable').dataTable();

    var bVis = oTable.fnSettings().aoColumns[iCol].bVisible;
    oTable.fnSetColumnVis( iCol, showHide );
}

DBoard.UI.doFilterDataTable = function(filterString, index, useRegEx)
{
    if (useRegEx == undefined)
        useRegEx = false;

    var dboardTable = $('#dashboardItemsTable').dataTable();
    dboardTable.fnFilter(filterString, index, useRegEx, true, false, true);
};

DBoard.UI.doSetResultTotalCount = function(filterResults)
{
    $.each(filterResults, function(index, results)
    {
        if (results) {
            var totalCount = results.totalCount > 999 ? '1000+' : results.totalCount;

            var id = DBoard.UI.doGetFilterUiId(results.filterName);
            var filterLabel = DBoard.UI.getFilterLabel(results);

            $('#' + id).text(filterLabel + ' (' + totalCount + ')');
        }

    });
};

DBoard.UI.doSetFilterRefreshPlaceholder = function(filter)
{
    if(filter) {
        var id = DBoard.UI.doGetFilterUiId(filter.filterName);
        var filterLabel = DBoard.UI.getFilterLabel(filter);

        $('#' + id).text(filterLabel + ' (' + "?" + ')');
    }
};

DBoard.UI.getFilterLabel = function( filter )
{
    return filter.filterName.length > 20 ? filter.filterName.substr(0,19).concat("...") : filter.filterName;
}

DBoard.UI.doGetFilterUiId = function(filterName)
{
    if (angular.isDefined(filterName)) {
        var id = filterName.replace(/(\s+|,|')/g, '');

        id =  DBoard.UI.doReplaceSpecialCharacters( id );
        return id;
    } else {
        return null;
    }
};

DBoard.UI.doReplaceSpecialCharacters = function(filterName)
{

    DBoard.UI.doInitializeSpecialCharacterReplacementMap();

    $.each(SPECIAL_CHARACTER_REPLACEMENT_MAP, function (characterToReplace, replacementValue)
    {

        filterName =  filterName.replace( new RegExp('[' + characterToReplace + ']','g'), replacementValue );

        var tempBreakpoint = filterName;
    });

    return filterName;
};

DBoard.UI.doInitializeSpecialCharacterReplacementMap = function()
{
    if( SPECIAL_CHARACTER_REPLACEMENT_MAP ==null )
    {
        SPECIAL_CHARACTER_REPLACEMENT_MAP = new Object();
        SPECIAL_CHARACTER_REPLACEMENT_MAP['!'] = RA.MD5.md5('1');
        SPECIAL_CHARACTER_REPLACEMENT_MAP['@'] = RA.MD5.md5('2');
        SPECIAL_CHARACTER_REPLACEMENT_MAP['#'] = RA.MD5.md5('3');
        SPECIAL_CHARACTER_REPLACEMENT_MAP['$'] = RA.MD5.md5('4');
        SPECIAL_CHARACTER_REPLACEMENT_MAP['%'] = RA.MD5.md5('5');
        SPECIAL_CHARACTER_REPLACEMENT_MAP['\\^'] = RA.MD5.md5('6');
        SPECIAL_CHARACTER_REPLACEMENT_MAP['&'] = RA.MD5.md5('7');
        SPECIAL_CHARACTER_REPLACEMENT_MAP['*'] = RA.MD5.md5('8');
        SPECIAL_CHARACTER_REPLACEMENT_MAP['('] = RA.MD5.md5('9');
        SPECIAL_CHARACTER_REPLACEMENT_MAP[')'] = RA.MD5.md5('10');
        SPECIAL_CHARACTER_REPLACEMENT_MAP['-'] = RA.MD5.md5('11');
        SPECIAL_CHARACTER_REPLACEMENT_MAP['_'] = RA.MD5.md5('12');
        SPECIAL_CHARACTER_REPLACEMENT_MAP['='] = RA.MD5.md5('13');
        SPECIAL_CHARACTER_REPLACEMENT_MAP['+' ] = RA.MD5.md5('14');
        SPECIAL_CHARACTER_REPLACEMENT_MAP[';'] = RA.MD5.md5('15');
        SPECIAL_CHARACTER_REPLACEMENT_MAP['.'] = RA.MD5.md5('16');
        SPECIAL_CHARACTER_REPLACEMENT_MAP['"'] = RA.MD5.md5('18');
        SPECIAL_CHARACTER_REPLACEMENT_MAP['\''] = RA.MD5.md5('19');
        SPECIAL_CHARACTER_REPLACEMENT_MAP['\\\\'] = RA.MD5.md5('20');  //needed to double escape this since this value is used in a string argument for a RegExp object
        SPECIAL_CHARACTER_REPLACEMENT_MAP['/'] = RA.MD5.md5('21');
        SPECIAL_CHARACTER_REPLACEMENT_MAP['?'] = RA.MD5.md5('22');
        SPECIAL_CHARACTER_REPLACEMENT_MAP['<'] = RA.MD5.md5('23');
        SPECIAL_CHARACTER_REPLACEMENT_MAP['>'] = RA.MD5.md5('24');
        SPECIAL_CHARACTER_REPLACEMENT_MAP['~'] = RA.MD5.md5('25');
        SPECIAL_CHARACTER_REPLACEMENT_MAP['['] = RA.MD5.md5('26');
        SPECIAL_CHARACTER_REPLACEMENT_MAP[']'] = RA.MD5.md5('27');
        SPECIAL_CHARACTER_REPLACEMENT_MAP['{'] = RA.MD5.md5('28');
        SPECIAL_CHARACTER_REPLACEMENT_MAP['}'] = RA.MD5.md5('29');
        SPECIAL_CHARACTER_REPLACEMENT_MAP['`'] = RA.MD5.md5('30');
    }

}
DBoard.UI.constructMyInboxFilterHtml = function( filterName, filterRanIndicatorMap  )
{
    var checked = DBoard.UI.returnCheckboxCheckProperty( filterRanIndicatorMap );
    var filterHtml = '<div id="' + DBoard.UI.doGetFilterUiId(filterName) + '-div" class="filterListItem filterListSelectItem" >' +
        '<input type="checkbox" onclick="doValidateFilterCount()" class="dashboardFilterCheck" name="' + filterName + '" value="' + filterName + '" ' + checked + ' >' +
        ' <span id="' + DBoard.UI.doGetFilterUiId(filterName) +'" style="font-weight:bold;" >' + filterName + '</span>' +
        '</div>';

    return filterHtml;

}
DBoard.UI.returnCheckboxCheckProperty = function( checkboxChecked )
{
    var checked = '';
    if( checkboxChecked == true )
    {
        checked = 'checked';
    }

    return checked;
}
DBoard.UI.constructFilterHtml = function( filterName, id , filterRanIndicatorMap  )
{
    var filterLabel = filterName.length > 15 ? filterName.substr(0,14).concat("...") : filterName;

    var checked = DBoard.UI.returnCheckboxCheckProperty( filterRanIndicatorMap );

    var filterHtml = '<div id="' + id + '-div" class="filterListItem filterListSelectItem">' +
        '<input type="checkbox" onclick="doValidateFilterCount()" class="dashboardFilterCheck" name="' + filterName + '" value="' + filterName + '" ' + checked + '  >' +
        ' <span id="' + id + '" title="'+filterName+'">' + filterLabel + ' (?)</span>' +
        '<div id="' + id + '-icon" style="float: right; display: none;">' +
        '<i id="' + id + '-remove" class="icon icon-remove"></i>&nbsp;&nbsp;</div>' +
        '<div id="' + id + '-iconRefresh" style="float: right; display: none;">' +
        '<i id="' + id + '-refresh" class="icon icon-refresh"></i>&nbsp;&nbsp;</div>' +
        '</div>';

    return filterHtml;
}
DBoard.UI.setupHoverAndClickFunctions = function( filterName, id )
{
    $('#' + id + '-div').hover(function(){$('#' + id + '-iconRefresh').show();}, function(){$('#' + id + '-iconRefresh').hide();});
    $('#' + id + '-refresh').click(function(){ doRefreshFilter(filterName); });
    $('#' + id + '-div').hover(function(){$('#' + id + '-icon').show();}, function(){$('#' + id + '-icon').hide();});
    $('#' + id + '-remove').click(function(){ doDeleteFilter(filterName); });
}
DBoard.UI.doesFiltersExist = function(filterList )
{
    return DBoard.UI.doesObjectExist( filterList );
}
DBoard.UI.doesAssignToFiltersExist = function( assignToFilterMap )
{
    return DBoard.UI.doesObjectExist( assignToFilterMap );
}

DBoard.UI.doesObjectExist = function( value )
{
    if (value != null)
    {
        return true;
    }
    return false;

}

DBoard.UI.renderFilters = function(filterList, myInboxFilter )
{
    var myFilters, myFiltersCollapsible, myScrollingArea;

    myFilters = $('#myFilters');
    myFiltersCollapsible = $('#myFiltersCollapsible');
    myScrollingArea = myFilters.find('#myScrollingArea');

    // if scrolling area does not exist, create it; otherwise, empty it
    if (myScrollingArea.length === 0) {
        myScrollingArea = $('<div id="myScrollingArea" class="scrollingFilter"></div>');
        myFiltersCollapsible.prepend(myScrollingArea);
    } else {
        myScrollingArea.empty();
    }

    //construct My Inbox Filter Html
    if(myInboxFilter)
        myScrollingArea.append(DBoard.UI.constructMyInboxFilterHtml(myInboxFilter.filterName, myInboxFilter.filterRanIndicatorMap[myInboxFilter.filterName]));


    //construct all NON My Inbox Filters Html
    $.each(filterList, function(index, filter)
    {
        var filterName = filter.filterName;

        if (filterName == MY_INBOX_FILTER_NM)
        {
            return true;
        }

        var id = DBoard.UI.doGetFilterUiId(filterName);

        myScrollingArea.append(DBoard.UI.constructFilterHtml( filterName, id, filter.filterRanIndicatorMap[filterName]  ));

        DBoard.UI.setupHoverAndClickFunctions( filterName, id );
    });
}

DBoard.UI.constructAssignToLoginUserFilterHtml = function( assignedToFilter )
{
    var html;
    $.each(assignedToFilter.assignedToMap, function(hid, name)
    {
        if(hid.indexOf('@') === -1 && name == LOGIN_USER)
        {
            var id = DBoard.UI.doGetFilterUiId(name);
            var checked = assignedToFilter.filterRanIndicatorMap[ hid ];

            var style = ' style="font-weight:bold;" ';

            var checkedAttribute = DBoard.UI.returnCheckboxCheckProperty( checked );

            html = '<div id="' + hid + '-div" class="filterListItem filterListSelectItem" >' +
                '<input type="checkbox" class="dashboardFilterCheck" name="' + name + '" value="' + hid + '" onclick="doValidateAssignToCount(); doDetermineActivityButton(); doEnableDisablePendingButtons()"' + checkedAttribute + '>' +
                ' <span id="' + id + '"' + style +'>&nbsp;' + name + '</span></div>';
            return false;//breaks out of the loop
        }
    });

    return html;
}

DBoard.UI.doRenderAssignToNonLoginUserFilters = function( myScrollingArea, assignedToFilter )
{
    $.each(assignedToFilter.assignedToMap, function(hid, name)
    {
        if(hid.indexOf('@') === -1 && name != LOGIN_USER)
        {
            var checked = assignedToFilter.filterRanIndicatorMap[ hid ];

            var id = DBoard.UI.doGetFilterUiId(name);
            var style = EMPTY_STRING ;
            var checkedAttribute = DBoard.UI.returnCheckboxCheckProperty( checked );

            var html = '<div id="' + id + '-div" class="filterListItem filterListSelectItem" >' +
                '<input type="checkbox" class="dashboardFilterCheck" name="' + name + '" value="' + hid + '" onclick="doValidateAssignToCount(); doDetermineActivityButton(); doEnableDisablePendingButtons()"' + checkedAttribute + '>' +
                ' <span id="' + id + '"' + style +'>&nbsp;' + name + '</span>';
            html += DBoard.UI.doIconsForFilterControl(id);
            html += '</div>';

            myScrollingArea.append( html );

            $('#' + id + '-div').hover(function(){$('#' + id + '-iconRefresh').toggle();});
            $('#' + id + '-refresh').click(function(){ doRefreshFilter(MY_ASSIGNED_TO_FILTER_NM, hid, name); });
            $('#' + id + '-div').hover(function(){$('#' + id + '-icon').toggle();});
            $('#' + id + '-remove').click(function(){ doDeleteFilter(MY_ASSIGNED_TO_FILTER_NM, hid, name); });
        }
    });
}


DBoard.UI.doEnableDisablePendingButtons = function doEnableDisablePendingButtons( assignedToFilterNames )
{
    var disableButtons = true;
    if( assignedToFilterNames )
    {
        angular.forEach(assignedToFilterNames, function( filterName )
        {
            if($('[name="' + filterName + '"]').prop("checked") )
            {
                disableButtons = false;
            }
        });

        DBoard.UI.endableDisablePendingButtons ( disableButtons );
    }
    else
    {
        DBoard.UI.endableDisablePendingButtons ( DISABLED );
    }
}

DBoard.UI.endableDisablePendingButtons = function endableDisablePendingButtons ( disabled )
{
    $("#excludeButton").attr("disabled", disabled );
    $("#includeButton").attr("disabled", disabled );
    $("#onlyButton").attr("disabled", disabled );
};

DBoard.UI.doRenderAssignToFilters = function( assignedToFilter   )
{
    var myAssignedTo, myAssignedToCollapsible, myScrollingArea, filterListBox;

    myAssignedTo = $('#myAssignedTo');
    myAssignedToCollapsible = $('#myAssignedToCollapsible');
    myScrollingArea = $('#myAssignedScrollingArea');
    filterListBox = $('#filterListBox');

    // if scrolling area does not exist, create it; otherwise, empty it
    if (myScrollingArea.length === 0) {
        myScrollingArea = $('<div id="myAssignedScrollingArea" class="scrollingFilter2"></div>');
        filterListBox.after(myScrollingArea);
    }

    myScrollingArea.append(DBoard.UI.constructAssignToLoginUserFilterHtml(assignedToFilter));
    DBoard.UI.doRenderAssignToNonLoginUserFilters(myScrollingArea, assignedToFilter);

}
DBoard.UI.shouldFullInitializeAndRestOfFilterControlsBePerformed = function ( filterList, assignToFilterList)
{
    return filterList != null && assignToFilterList != null;
}

DBoard.UI.doFullInitializeAndResetOfFilterControls = function (showAssignToFilters)
{
    DBoard.UI.showFilterLoading();

    if (showAssignToFilters) {
        DBoard.UI.showAssignedToFilters();
    } else {
        DBoard.UI.showMyFilters();
    }

    $('#myFiltersHeader').click(function(e) {
        DBoard.UI.showMyFilters();
    });

    $('#myAssignedToHeader').click(function(e) {
        DBoard.UI.showAssignedToFilters();
    });

    $('.filterListAnchor').click(function(e) {
        DBoard.UI.doToggleFiltersPeople($(this));
    });

    DBoard.UI.hideFilterLoading();

}

DBoard.UI.showMyFilters = function() {
    var myFiltersHeader, myFiltersControls, myFiltersCollapsible,
        myAssignedToHeader, myAssignedToControls, myAssignedToCollapsible;

    myFiltersHeader = $('#myFiltersHeader');
    myFiltersControls = $('#myFiltersControls');
    myFiltersCollapsible = $('#myFiltersCollapsible');

    myAssignedToHeader = $('#myAssignedToHeader');
    myAssignedToControls = $('#myAssignedToControls');
    myAssignedToCollapsible = $('#myAssignedToCollapsible');

    myFiltersHeader.removeClass('twisty-closed').addClass('twisty-open');
    myFiltersControls.show();
    myFiltersCollapsible.show();

    myAssignedToHeader.removeClass('twisty-open').addClass('twisty-closed');
    myAssignedToControls.hide();
    myAssignedToCollapsible.hide();
}

DBoard.UI.showAssignedToFilters = function() {
    var myFiltersHeader, myFiltersControls, myFiltersCollapsible,
        myAssignedToHeader, myAssignedToControls, myAssignedToCollapsible;

    myFiltersHeader = $('#myFiltersHeader');
    myFiltersControls = $('#myFiltersControls');
    myFiltersCollapsible = $('#myFiltersCollapsible');

    myAssignedToHeader = $('#myAssignedToHeader');
    myAssignedToControls = $('#myAssignedToControls');
    myAssignedToCollapsible = $('#myAssignedToCollapsible');

    myFiltersHeader.removeClass('twisty-open').addClass('twisty-closed');
    myFiltersControls.hide();
    myFiltersCollapsible.hide();

    myAssignedToHeader.removeClass('twisty-closed').addClass('twisty-open');
    myAssignedToControls.show();
    myAssignedToCollapsible.show();
}

DBoard.UI.showFilterLoading = function() {
    var filterArea, filterLoading;

    filterArea = $('.filterArea').eq(0);
    filterLoading = $('#filterLoading');

    filterLoading.css({
        "width": filterArea.width(),
        "height": filterArea.height()
    });

    filterLoading.show();
}

DBoard.UI.hideFilterLoading = function() {
    var filterLoading = $('#filterLoading');

    filterLoading.hide();
}


DBoard.UI.doRenderFilterList = function(filterList, myInboxFilter, assignToFilter, showAssignToFilters)
{

    if (DBoard.UI.doesFiltersExist( filterList ) )
    {
        DBoard.UI.renderFilters(filterList, myInboxFilter );
    }

    if ( DBoard.UI.doesAssignToFiltersExist( assignToFilter ) )
    {
        DBoard.UI.doRenderAssignToFilters( assignToFilter );
    }

    //if both list are passed in, do full init/reset of filter controls
    if ( DBoard.UI.shouldFullInitializeAndRestOfFilterControlsBePerformed( filterList, assignToFilter) )
    {

        DBoard.UI.doFullInitializeAndResetOfFilterControls(showAssignToFilters);
    }
};



DBoard.UI.doToggleFiltersPeople = function(clickedElement)
{
    var myFilters, myAssigned;

    if (clickedElement.hasClass('twisty-closed')) {
        if (clickedElement.attr('id') == 'myFiltersHeader') { // "Filters"
            DBoard.UI.doOpenMyFiltersTwisty(clickedElement, $('#myAssignedToHeader'));
        } else { // "People"
            DBoard.UI.doOpenAssignedToFiltersTwisty($('myFiltersHeader'), clickedElement);
        }
    }
};


DBoard.UI.doOpenSpecificFilterType = function(latestRanFilterType)
{

    if (RUN_MY_FILTERS == latestRanFilterType) {
        if (!DBoard.UI.doIsMyInboxFilterOpen()) {
            DBoard.UI.showMyFilters();
        }
    } else {
        if (DBoard.UI.doIsMyInboxFilterOpen()) {
            DBoard.UI.showAssignedToFilters();
        }
    }
};

DBoard.UI.doIsMyInboxFilterOpen = function()
{
    var myFilters = $('#myFiltersHeader');

    if (!myFilters.hasClass('twisty-open') && !myFilters.parent().hasClass('twisty-open'))
    {
        return false;
    }
    return true;
}


DBoard.UI.doOpenMyFiltersTwisty = function(myFilters,myAssigned )
{
    myFilters.removeClass('twisty-closed').addClass('twisty-open');
    myAssigned.removeClass('twisty-open').addClass('twisty-closed');
    $('#myFilterButtons').show();
    $('#myAssignedToButtons').hide();
    $('#myFiltersRefreshAll').show();
    $('#myAssignedToRefreshAll').hide();
    $('#filterListBox').hide(); //show/hide people select box

}
DBoard.UI.doOpenAssignedToFiltersTwisty = function(myFilters,myAssigned )
{
    myFilters.removeClass('twisty-open').addClass('twisty-closed');
    myAssigned.removeClass('twisty-closed').addClass('twisty-open');
    $('#myFilterButtons').hide();
    $('#myAssignedToButtons').show();
    $('#myFiltersRefreshAll').hide();
    $('#myAssignedToRefreshAll').show();
    $('#filterListBox').show(); //show/hide people select box
}

DBoard.UI.doGetSelectedFilters = function()
{
    var selectedFilters = $('#myFilters input:checked');

    var filterNames = [];


    $.each(selectedFilters, function()
    {
        filterNames.push($(this).attr('name'));
    });

    return filterNames;
};

DBoard.UI.doGetSelectedAssignToList = function(){

    var selectedAssigned = $('#myAssignedScrollingArea input:checked');

    var assignedToNames = [];
    $.each(selectedAssigned, function()
    {
        assignedToNames.push($(this).attr('name'));
    });
    return assignedToNames;
};

DBoard.UI.doGetAssignToList = function()
{
    var selectedAssigned = $('#myAssignedScrollingArea input');

    var assignedToList = [];
    var count = 0;

    $.each(selectedAssigned, function()
    {
        var name = $(this).attr('name');
        var hid = $(this).attr('value');
        var checked = $(this).is(':checked');
        var assignedTo = {};
        assignedTo.hid = hid;
        assignedTo.name = name;
        assignedTo.doRun = checked;
        assignedToList.push(assignedTo);

        if (checked)
            count++;
    });

    assignedToList.runCount = count;
    return assignedToList;
};

DBoard.UI.doGetRunFiltersKey = function()
{

    if( $('#myFiltersHeader').hasClass('twisty-open'))
    {
        return RUN_MY_FILTERS;
    }

    return RUN_MY_ASSIGNED;
};

DBoard.UI.doAddAssignedFromSelection = function(person)
{
    var name, hid, id, fullId, newItem, newCheckbox, newNameSpan, newRowControls,
        fullId, scrollingArea;

    name = DBoard.UI.formatPersonName(person);
    hid = person.hid;
    id = DBoard.UI.doGetFilterUiId(name);
    fullId = id + '-input';
    scrollingArea = $('#myAssignedScrollingArea');

    newItem = $('<div id="' + id + '-div" class="filterListItem filterListSelectItem"></div>');
    newCheckbox = $('<input id="' + id + '-input" type="checkbox" class="dashboardFilterCheck" name="' + name + '" value="' + hid + '" onclick="doValidateAssignToCount(); doDetermineActivityButton();">');
    newNameSpan = $('<span id="' + id + '">&nbsp;' + name + '</span>');
    newRowControls = $(DBoard.UI.doIconsForFilterControl(id));

    newItem.append(newCheckbox).append(newNameSpan).append(newRowControls);
    scrollingArea.append(newItem);

    doCheckSelectedAssignedTo(fullId);

    $('#' + id + '-div').hover(function(){$('#' + id + '-iconRefresh').show();},function(){$('#' + id + '-iconRefresh').hide();});
    $('#' + id + '-refresh').click(function(){ doRefreshFilter(MY_ASSIGNED_TO_FILTER_NM, hid, name); });
    $('#' + id + '-div').hover(function(){$('#' + id + '-icon').show();}, function(){$('#' + id + '-icon').hide();});
    $('#' + id + '-remove').click(function(){ doDeleteFilter(MY_ASSIGNED_TO_FILTER_NM, hid, name); });

    doDetermineActivityButton();

};

DBoard.UI.doResultsActivityCount = function(filterResults)
{
    var countData = {};

    if( filterResults != null && filterResults != 'undefined' && filterResults.length > 0)
    {
        $.each(filterResults, function(i, filter)
            {
                $.each(ACTIVITY_TYPE_LIST, function(typeKey, typeValue)
                    {

                        var totalCount = 0;

                        if( filter.activityStatusCount[typeKey] != undefined)
                        {
                            totalCount =  filter.activityStatusCount[typeKey].Total;
                        }

                        if (countData[typeKey] == undefined)
                            countData[typeKey] = {'Total':0};

                        countData[typeKey].Total += totalCount;

                        if (totalCount > 0)
                        {
                            $.each(STATUS_LIST, function(statusKey, statusValue)
                                {
                                    if (countData[typeKey][statusKey] == undefined)
                                        countData[typeKey][statusKey] = 0;

                                    countData[typeKey][statusKey] += filter.activityStatusCount[typeKey] == undefined ? 0 :
                                        (filter.activityStatusCount[typeKey][statusKey] == undefined ? 0 : filter.activityStatusCount[typeKey][statusKey]);
                                }
                            );
                        }
                    }
                );
            }
        );
    }
    else
    {
        $.each(ACTIVITY_TYPE_LIST, function(typeKey, typeValue)
            {

                var totalCount = 0;

                if (countData[typeKey] == undefined)
                {
                    countData[typeKey] = {'Total':0};
                }

                countData[typeKey].Total += totalCount;
            }
        );

    }
    return countData;
};

DBoard.UI.doResultActivityStatusCount = function(filterResults, activityCountData)
{
    var openCount = 0;
    var ratedCount = 0;
    var quotedCount = 0;
    var boundCount = 0;

    var activityTypes = ['NBS', 'REN', 'ENDT', 'CANC', 'REIN', 'NRI', 'OTHER'];

    $.each(filterResults, function(i, filter)
        {
            $.each(activityTypes, function(i, type)
                {
                    openCount += filter.activityStatusCount[type] == undefined ? 0 :
                        (filter.activityStatusCount[type].OPEN == undefined ? 0 : filter.activityStatusCount[type].OPEN);

                    ratedCount += filter.activityStatusCount[type] == undefined ? 0 :
                        (filter.activityStatusCount[type].RATED == undefined ? 0 : filter.activityStatusCount[type].RATED);

                    quotedCount += filter.activityStatusCount[type] == undefined ? 0 :
                        (filter.activityStatusCount[type].BND == undefined ? 0 : filter.activityStatusCount[type].BND);

                    boundCount += filter.activityStatusCount[type] == undefined ? 0 :
                        (filter.activityStatusCount[type].QUOTED == undefined ? 0 : filter.activityStatusCount[type].QUOTED);
                }
            );
        }
    );

    $.each(activityCountData, function(key, countObject)
        {
            countObject['OPEN'] = openCount;

            countObject['RATED'] = ratedCount;

            countObject['BND'] = quotedCount;

            countObject['QUOTED'] = boundCount;

            activityCountData[key] = countObject;
        }
    );

    return activityCountData;
};

DBoard.UI.doCurrentResultsTotalCount = function(filterResults)
{
    var count = 0;

    $.each(filterResults, function(i, filter)
        {
            if (filter) {
                count += filter.totalCount;
            }
        }
    );

    return count;
};

DBoard.UI.doFormatDate = function(date, type)
{
    if (date == undefined || date == null || date == '')
        return '';

    if(type === 'Reminder')
        return '';

    return RA.UI.doMakeDateMMDDYYYY(date);
};

DBoard.UI.doAddProducerOptions = function(producers, manageFilterMode)
{
    producers.sort(producersSortCompare);
    $('#' + manageFilterMode + '-availableProducerOptions').find('option').remove();
    $.each(producers, function(i,producer)
        {
            var html = '<option value="' + producer.code + '" title="' + producer.name+ ' : '+ producer.code + '" >' + producer.name + '</option>';
            $('#' + manageFilterMode + '-availableProducerOptions').append(html);
        }
    );
};

function producersSortCompare(a, b) {
    if (a.name.trim() < b.name.trim()) {
        return -1;
    }
    if (a.name.trim() > b.name.trim()) {
        return 1;
    }
    else{
        return 0;
    }
}

DBoard.UI.doLinkManageActivities = function(sessionVars, $scope)
{
    RA.Session.addSubmissionId(sessionVars.submissionId);
    RA.Session.addSelectedPolicy(sessionVars);
    RA.Session.addSessionMode (SESSION_SUBMISSION_MODE);
    $scope.applyLayout('manageActivities');
};

DBoard.UI.doMoveProducersRight = function(selectedOnly, manageFilterMode)
{
    if (selectedOnly === true)
        $('#' + manageFilterMode + '-availableProducerOptions option:selected').remove().appendTo('#' + manageFilterMode + '-selectedProducerOptions');
    else
        $('#' + manageFilterMode + '-availableProducerOptions option').remove().appendTo('#' + manageFilterMode + '-selectedProducerOptions');
};

DBoard.UI.doMoveProducersLeft = function(selectedOnly, manageFilterMode)
{
    if (selectedOnly === true)
        $('#' + manageFilterMode + '-selectedProducerOptions option:selected').remove().appendTo('#' + manageFilterMode + '-availableProducerOptions');
    else
        $('#' + manageFilterMode + '-selectedProducerOptions option').remove().appendTo('#' + manageFilterMode + '-availableProducerOptions');
};

DBoard.UI.doClearFilterModal = function(manageFilterMode)
{
    $('#' + manageFilterMode + '-availableProducerOptions option').remove();
    $('#' + manageFilterMode + '-selectedProducerOptions option').remove();
};

DBoard.UI.doGetInsuredName = function(item){

    if(RA.UI.isNullorEmpty(item.lastName)){
        if (item.dba) {
            return item.insuredName + " / " + item.dba;
        } else {
            return item.insuredName;
        }
    }
    else{
        var name = EMPTY_STRING;
        name = name + item.lastName;

        name = name + ', ' + item.firstName;

        if(!RA.UI.isNullorEmpty(item.middleName)){
            name = name + ', ' + item.middleName;
        }
        if(item.dba) {
            name = name + " / " + item.dba
        }

        return name;
    }
};


DBoard.UI.doGetSelectedProducerOptions = function(manageFilterMode)
{
    var selectedProducers = {};

    $('#' + manageFilterMode + '-selectedProducerOptions option').each(function()
        {
            selectedProducers[$(this).val()] = $(this).text();
        }
    );

    return selectedProducers;
};

DBoard.UI.doSetFilterSelectedProducerCodeOptions = function(producerCodes, producerCodeMap, manageFilterMode)
{
    var producerSelect = $('#' + manageFilterMode + '-selectedProducerOptions');
    producerSelect.empty();

    if (producerCodes == undefined || producerCodes == null)
        return;

    $.each(producerCodes, function(index, code)
        {
            var html = '<option value="' + code + '" title="' + producerCodeMap[code]+ '" >' + producerCodeMap[code] + '</option>';

            producerSelect.append(html);
        }
    );
};

DBoard.UI.doLastFilterRanCheckBox = function(filtersRan, latestRanFilterType)
{
    var whichFiltersRan = doGetRunFiltersKey();

    if(!RA.UI.isNullorEmpty(latestRanFilterType)){
        whichFiltersRan = latestRanFilterType;
    }

    switch (whichFiltersRan)
    {
        case RUN_MY_FILTERS:
            $.each(filtersRan, function(index, filter)
            {
                var id =  DBoard.UI.doGetFilterUiId(filter.filterName);
                $('#' + id + '-div input').prop('checked', true);
            });
            break;
        case RUN_MY_ASSIGNED:
            $.each(filtersRan[0].assignedToMap, function(hid, name)
            {
                var id =  DBoard.UI.doGetFilterUiId(name);
                $('#' + id + '-div input').prop('checked', true);
            });
            break;
    }
};


DBoard.UI.doIconsForFilterControl = function(id)
{
    return '<div id="' + id + '-icon" style="float:right;display:none;">' +
        '<i id="' + id + '-remove" class="icon icon-remove"></i>&nbsp;&nbsp;</div>' +
        '<div id="' + id + '-iconRefresh" style="float:right;display:none;">' +
        '<i id="' + id + '-refresh" class="icon icon-refresh"></i>&nbsp;&nbsp;</div>';
};


DBoard.UI.formatPersonName  = function( person )
{
    return  person.lastName + ', ' + person.firstName;
}

DBoard.UI.reorderFilterList = function( sortedFilterNameList, myInboxFilterName )
{
    var filterDivList = DBoard.UI.findDivTagsFoFiltersAndRemoveFromScrollingArea( sortedFilterNameList, myInboxFilterName );

    $.each( filterDivList, function( index, filterDiv )
    {
        $('#myScrollingArea').append( filterDiv );
    } );
}

DBoard.UI.reorderAssignedFilterList = function( sortedFilterNameList, assignedToFilterName )
{
    var assignedFilterDivList = DBoard.UI.findDivTagsFoFiltersAndRemoveFromScrollingArea( sortedFilterNameList,assignedToFilterName  );

    $.each( assignedFilterDivList, function( index, filterDiv )
    {
        $('#myAssignedScrollingArea').append( filterDiv );
    } );
}

DBoard.UI.findDivTagsFoFiltersAndRemoveFromScrollingArea = function( sortedFilterNameList,firstFilterName )
{
    var filterDivList = [];

    if( firstFilterName!= null )
    {
        var filterDiv = $( '#' + DBoard.UI.doGetFilterUiId( firstFilterName ) + '-div' );
        filterDivList.push( filterDiv ) ;
        filterDiv.detach();
    }

    $.each( sortedFilterNameList, function(index, filterName)
    {
        var filterDiv = $( '#' + DBoard.UI.doGetFilterUiId( filterName ) + '-div' );
        filterDivList.push( filterDiv  ) ;
        filterDiv.detach();
    });

    return filterDivList;
}


DBoard.UI.setFilterCheckboxes = function( filterList, checkedValue )
{
    $.each(filterList, function(index, filter)
    {
        var id =  DBoard.UI.doGetFilterUiId(filter.filterName);
        $('#' + id + '-div input').prop('checked', checkedValue);
    });
}
DBoard.UI.initializeFilterCheckboxes = function( filterList )
{
    $.each(filterList, function(index, filter)
    {
        if( ASSIGN_TO_FILTER_NAME == filter.filterName )
        {
            $.each(filter.assignedToMap, function(key, filterName)
            {
                var id =  DBoard.UI.doGetFilterUiId(filterName);
                $('#' + id + '-div input').prop('checked', filter.filterRanIndicatorMap[key]);
            } );
        }
        else
        {
            var id =  DBoard.UI.doGetFilterUiId(filter.filterName);
            $('#' + id + '-div input').prop('checked', filter.filterRanIndicatorMap[ filter.filtername]);
        }
    });
}

DBoard.UI.clearGlobalFilterOnTable = function clearGlobalFilterOnTable()
{
    var dboardTable = $('#dashboardItemsTable').dataTable();
    dboardTable.fnFilter('');

}

DBoard.UI.setColumnToSortAndAscendingDescending = function setColumnToSortAndAscendingDescending( columnName, ascendingDescending)
{
    var dboardTable = $('#dashboardItemsTable').dataTable();
    var sortColumn = SORTABLE_COLUMN_NAME_INDEX_MAP[DEFAULT_SORT_COLUMN_NAME];
    var sortOrder = DEFAULT_SORT_ORDER

    if(columnName )
    {
        sortColumn = SORTABLE_COLUMN_NAME_INDEX_MAP[columnName];
    }
    if( ascendingDescending )
    {
        sortOrder = ascendingDescending;
    }

    //guarantees that dashboard will come up if an invalid value is stored for the filter
    if( sortOrder !== SORT_ORDER_ASCENDING && sortOrder !== SORT_ORDER_DESCENDING )
    {
        sortOrder = SORT_ORDER_ASCENDING;
    }

    dboardTable.fnSort( [ [sortColumn, sortOrder] ] );
}
//# sourceURL=dyn/js/dashboard