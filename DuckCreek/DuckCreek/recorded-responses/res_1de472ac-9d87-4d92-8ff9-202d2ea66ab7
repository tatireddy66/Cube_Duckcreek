'use strict';
//# sourceURL=dyn/js/manageActivities

var VIEW_SUBMISSION = "VIEW_SUBMISSION";
var WORK_SUBMISSION = "WORK_SUBMISSION";
var CHANGE_DETAIL = "CHANGE_DETAIL";
var SET_TRANSACTION_STATUS = "SET_TRANSACTION_STATUS";
var UNLOCK = "UNLOCK";
var VIEW_SUPPORTING_DOCUMENTS = "VIEW_SUPPORTING_DOCUMENTS";
var VIEW_POLICY_DOCUMENTS = "VIEW_POLICY_DOCUMENTS";
var VIEW_ACCOUNT_DOCUMENTS = "VIEW_ACCOUNT_DOCUMENTS";
var VIEW_HISTORY = "VIEW_HISTORY";
var REOPEN_ACTIVITY = "REOPEN_ACTIVITY";
var DELETE = "DELETE";
var OOS_STATUS = "OOS_STATUS";
var VIEW_ACTIVITIES = "VIEW_ACTIVITIES";
var CREATE_ACTIVITY = "CREATE_ACTIVITY";
var COPY_SUBMISSION = "COPY_SUBMISSION";
var VIEW_HIDE_ALL_MODS_CONTEXT = "VIEW_HIDE_ALL_MODS_CONTEXT";
var OOS_SUSPENDED = 'SUSPENDED';
var OOS_SUCCESS = 'SUCCESS';
var MANAGE_ACTIVITIES_PAGE_TITLE = 'Manage Activities';
var OOS_PAGE_TITLE = 'OOS and Roll Forward Transaction Status';
var ACTIVITY_SEARCH = 'activityDetailsTableFilter1'

var ACTIVITY_SNAPSHOT_KEY = 'activity';
var ACTIVITY_DETAILS_SNAPSHOT_KEY = 'activityDetails';
var DISPOSITION_SNAPSHOT_KEY = 'disposition';
var SEARCH_FOR_CARRIER_SNAPSHOT_KEY = 'searchForCarrier';

var SHOW_MODS = "SHOW";
var HIDE_MODS = "HIDE";

var SYS_TRANS_TYPE_REVERSAL = "REV";
var REVISED_PREMIUM_AUDIT_TYPE = 'Premium Audit / Revised';
var ENDORSEMENT_TYPE_EXTENSION = "EXT";

var RPM_SESSION_INSURED_NAME_FIELD = "fullName";

var editAccess = false;
var deleteAccess = false;
var reopenAccess = false;
var handleMenuAction;
var showAnnualizedPremium;
var filterTable;
var openViewHistory;
var unlockActivities;
var navigateMyFile;
var viewAllMods;
var anyModsShowing = false;
var modsPerPolicy = {};

var policyCheck;
var activityCheck;

var mySessionVars;
var activityMap;
var syncedSessionVars = false;

var showSelectedPolicyEntriesOnly;
var isPolicyCheckedMap = {};
var checkedPolicyRows;
var allPolicyRows;
var unRevisedDispositionStatusList;
var allPolicyTermRows;
var isInitialPageLoad = true;

//HIDE BU SPECIFIC FIELDS
// Only Set to true when there are less than two BU Specific Fields
// Currently Only One BU Specific Field Used on Manage Activities Screen
var HIDE_BU1_SPECIFIC_COLUMN = false;
var HIDE_BU2_SPECIFIC_COLUMN = true;

var DROPDOWN_MENU_COLUMN_INDEX = 0;
var LOCKED_TO_HID_COLUMN_INDEX = 8;

var VALUE_FOR_NULL_VALUE = '-';

function ManageActivitiesController($scope, $rootScope, $filter, Navigation, Activity, Submission, Presentation, Account, Notes, Search, OOS,  $compile, $timeout)
{
    RA.Session.removeViewOnlyMode();
    var snapshots = {};
    var policyTableReader = new RA.UI.TableReader('policyTermTable', 'policyCheck', ['', 'checkbox', 'policyInfo', 'policyTerm', 'status', 'submissionId', 'agencyName', 'underwriter', 'writtenPremium', 'annualizedPremium', 'copyEligibleFlag']);
    var activityTableReader = new RA.UI.TableReader('activityDetailsTable', 'activityCheck', ['', 'checkbox', 'policyId', 'policyInfo', 'endorsementNumber', 'activity', 'type', 'description', 'status', 'transactionEffectiveDate', 'trnPremium', 'annualizedTrnPremium', 'assignedTo', 'submissionId', 'isWorked', 'isNonUD', 'polTrnEffDt', 'polTrnExpDt']);
    var carrierTableReader = new RA.UI.TableReader('carrierLookupTable', '', []);
    var lastSelected = [];
    var policyDetails = {};
    var idToSymbol = {};

    var createTRNStatusEntryFromActivity = function (activity) {
        return {
            "policy": activity.policy,
            "type": activity.activity,
            "activityId": activity.activityId,
            "reason": activity.activityReasonComments,
            "date": activity.trnEffectiveDate,
            "status": activity.status,
            "subId": activity.submissionId,
            "index": activity.index,
            "lockHid": activity.unlockedDate?null:activity.lockedByHid,
            "lockName": activity.lockedByName
        };
    };

    //Set Last Screen Accessed Variable to Manage Activities Screen
    RA.Session.addLastScreenAccessed(SESSION_MANAGED_ACTIVITIES_SCREEN);

    $rootScope.showMainContent = true;

    $scope.activityHeaderNames = ["Policy Id", 'Policy', "Endt #", "Activity", "Type / Sub-Type", "Explanation / Description", "Status", "TRN Effective Date", "TRN Premium", "Annualized TRN Premium", "Assigned To", "Sub ID", "HIDDEN IsWorked", "HIDDEN IsNonUD", "HIDDEN PolTrnEffDt",  "HIDDEN PolTrnExpDt"];
    $scope.dateLabel = DATE_LABEL;
    $scope.reasonLabel = REASON_LABEL;
    $scope.commentsLabel = COMMENTS_LABEL;
    $scope.showCommentsLabel = 'Show All Comments';
    $scope.viewModsText = 'View All Mods/Versions';
    $scope.enableMenu = true;
    $scope.selectedPolicies = [];
    $scope.isSinglePolicy = false;
    $scope.isATrnDateForReinstatement = false;
    $scope.activityDetailsTitle = EMPTY_STRING;
    $scope.submissionId = RA.Session.getSubmissionId();

    $scope.accountAnchor = '<a onclick="navigateMyFile(\'VIEW_ACCOUNT_DOCUMENTS\')">View Account Documents</a>';
    $scope.policyAnchor = '<a onclick="navigateMyFile(\'VIEW_POLICY_DOCUMENTS\')">View Policy Documents</a>';
    $scope.supportingAnchor = '<a onclick="navigateMyFile(\'VIEW_SUPPORTING_DOCUMENTS\')">View Supporting Documents</a>';
    $scope.workSubmissionAnchor = '<a onclick="handleMenuAction(this, \' + WORK_SUBMISSION + \')">Work Submission...</a>';
    $scope.viewSubmissionAnchor = '<a href="/UwdRefApp/dyn/html/submission" onclick="handleMenuAction(this, \' + VIEW_SUBMISSION + \')">View Submission...</a>';
    $scope.changeDetailAnchor = '<a onclick="handleMenuAction(this, \' + CHANGE_DETAIL + \')">Change Details...</a>';
    $scope.setTransactionAnchor = '<a onclick="handleMenuAction(this, \' + SET_TRANSACTION_STATUS + \')">Set Transaction Status...</a>';
    $scope.unlockAnchor = '<a onclick="handleMenuAction(this, \' + UNLOCK + \')">Unlock</a>';
    $scope.viewSupportingAnchor = '<a onclick="handleMenuAction(this, \' + VIEW_SUPPORTING_DOCUMENTS + \')">View Supporting Documents...</a>';
    $scope.viewPolicyAnchor = '<a onclick="handleMenuAction(this, \' + VIEW_POLICY_DOCUMENTS + \')">View Policy Documents...</a>';
    $scope.viewAccountAnchor = '<a onclick="handleMenuAction(this, \' + VIEW_ACCOUNT_DOCUMENTS + \')">View Account Documents...</a>';
    $scope.viewHistoryAnchor = '<a onclick="handleMenuAction(this, \' + VIEW_HISTORY + \')">View History...</a>';
    $scope.reopenAnchor = '<a onclick="handleMenuAction(this, \' + REOPEN_ACTIVITY + \')">Reopen Activity</a>';
    $scope.deleteAnchor = '<a onclick="handleMenuAction(this, \' + DELETE + \')">Delete...</a>';
    $scope.oosStatusAnchor = '<a onclick="handleMenuAction(this, \' + OOS_STATUS + \')">Review/Issue OOS...</a>';

    $scope.navHelper = {"filterCharms": null};
    $scope.charmsList = [];
    $scope.clearedFieldsList = [];
    $scope.clearFields = [];
    $scope.isSingleInActivityDetails;

    $scope.currentDateTrnStatus = RA.UI.doMakeCurrentDateMMDDYYYY(new Date());

    $scope.activitySearchSubmissionId = null;

    sessionStorage.removeItem('instSubmission');

    Activities.UI.disable(Activities.UI.TRN_STATUS, true);
    Activities.UI.disable(Activities.UI.CHANGE_DETAILS, true);
    Activities.UI.disable(Activities.UI.VIEW_ACTIVITIES, true);
    Activities.UI.disable(Activities.UI.CHANGE_DETAILS, true);
    Activities.UI.disable(Activities.UI.UNLOCK_BUTTON, true);

    // Carrier lookup
    $scope.carrierLookupTypeList = [
        {value: "ALL", label: "Individual Carrier and Group Names"},
        {value: "GROUP", label: "Group"}
    ];
    var carrierLookupJsonObject = {
        'carrierLookupType': "ALL",
        'carrierLookupString': "",
        'otherCarrierName': "",
        'otherCarrierIndicator': false
    };
    $scope.carrierLookup = carrierLookupJsonObject;
    $scope.isSearchForCarrierOpen = false;
    $scope.carrierLookupRows = [];

    //****************************************************
    // COLUMN INFORMATION FOR THE SEARCH FOR CARRIER TABLE
    // ****************************************************
    $scope.carrierLookupColumnHeadings =
        [
            {"sTitle": "Individual Carrier", "sWidth": "40%"},
            {"sTitle": "Group", "sWidth": "40%"},
            {"sTitle": "A.M. Best Rating", "sWidth": "20%", "sType": "rating"}
        ];
    $scope.carrierLookupColumnHeadingsDef = [
        {'aTargets': [3], 'bVisible': false},
        {'aTargets': [4], 'bVisible': false},
        {'aTargets': [5], 'bVisible': false},
        {'aTargets': [6], 'bVisible': false}
    ];

    $scope.doCreateNewActivityCancel = function ()
    {
        $scope.cancelFunction(ACTIVITY_SNAPSHOT_KEY, $scope.activity, $scope.preCallback(), $scope.toggleCreateActivityModal);
    };
    $scope.createButtons =
        [
            {
                "id": 'createButton',
                "label": "Create",
                "function": function ()
                {
                    $scope.createActivity();
                },
                "class": "btn btn-primary"
            },
            {
                "id": 'cancelButton',
                "label": "Cancel",
                "function": function ()
                {
                    $scope.doCreateNewActivityCancel();
                },
                "class": "btn"
            }
        ];
    $scope.doChangeActivitiesCancel = function ()
    {
        $scope.cancelFunction(ACTIVITY_DETAILS_SNAPSHOT_KEY, $scope.activityDetails, null, $scope.toggleActivityDetailsModal);
    };
    $scope.detailsButtons = [
        {
            "buttonId":"detailUnlock",
            "label": "Save and Unlock",
            "css": "btn",
            "onClick": function() {
                $scope.saveActivitiesAndUnlock();
            },
            "closeOnClick": false,
            "dynatrace":"changeDetailsUnlockMA"
        },
        {
            "buttonId":"detailCloseRemind",
            "label":"Save and Close Reminder",
            "css": "btn",
            "onClick": function(){
                $scope.saveActivitiesAndClose();
            },
            "closeOnClick": false,
            "dynatrace":"changeDetailsCloseReminderMA"
        },
        {
            "buttonId": "saveDetailsAndChangeTRNStatus",
            "label": "Save and Set Transaction Status",
            "css": "btn",
            "onClick": function () {
                $scope.saveDetailsAndChangeStatus();
            },
            "closeOnClick": false,
            "isDisabled": false,
            "dynatrace": "saveDetailsAndChangeStatus"
        }
    ];



    $scope.doSetStatusCancel = function ()
    {
        $scope.cancelFunction(DISPOSITION_SNAPSHOT_KEY, $scope.disposition, null, $scope.doToggleTRNStatusModal);
    };


    $scope.confirmButtons =
        [
            {
                "label": "Yes",
                "function": function ()
                {
                    $scope.setConfirmValue(true);
                },
                "class": "btn btn-primary",
                "id": "confirmButtonYes"
            },
            {
                "label": "No",
                "function": function ()
                {
                    $scope.setConfirmValue(false);
                },
                "class": "btn",
                "id": "confirmButtonNo"
            }
        ];
    $scope.confirmButtonsWork =
        [
            {
                "label": CONTINUE,
                "function": function ()
                {
                    $scope.setConfirmWorkValue(true);
                },
                "class": "btn btn-primary",
                "id": "confirmButtonContinue"
            },
            {
                "label": CANCEL,
                "function": function ()
                {
                    $scope.setConfirmWorkValue(false);
                },
                "class": "btn",
                "id": "confirmButtonCancel"
            }
        ];

    $scope.confirmEndorsementButtons =
        [
            {
                "label": "Yes",
                "function": function ()
                {
                    $scope.setConfirmEndorsementValue("YES");
                },
                "class": "btn btn-primary",
                "id": "confirmEndorsementButtonYes"
            },
            {
                "label": "No",
                "function": function ()
                {
                    $scope.setConfirmEndorsementValue("NO");
                },
                "class": "btn",
                "id": "confirmEndorsementButtonNo"
            },
            {
                "label": "Cancel",
                "function": function ()
                {
                    $scope.setConfirmEndorsementValue("CANCEL");
                },
                "class": "btn",
                "id": "confirmEndorsementButtonCancel"
            }
        ];

    $scope.confirmApply;

    $scope.policyTermTable = 'policyTermTable';
    $scope.activityDetailsTable = 'activityDetailsTable';

    $scope.customerNumber = RA.Session.getCustomerNumber();
    $scope.customerName = '';
    $scope.submissionId = RA.Session.getSubmissionId();
    $scope.selectedTypeHolder = {"selectedType": ""};
    $scope.activity = {};
    $scope.activityDetails = {};
    $scope.disposition = {"recaptureIndicator": FALSE};
    $scope.dispositionTypeCode = '';
    $scope.transactionFilter;
    $scope.policyFilter;
    $scope.assignToList;
    $scope.assignmentReasonList;
    $scope.endorsementTypeList;
    $scope.endorsementSubTypeList;
    $scope.cancellationTypeList;
    $scope.cancellationTypeListMidTerm;
    $scope.cancellationReasonList;
    $scope.nonRenewalReasonList;
    $scope.reinstatementReasonList;
    $scope.rewriteReasonList;
    $scope.renewalProcessingTypeList;
    $scope.premiumTierList;
    $scope.priorityList;
    $scope.declineList;
    $scope.lostList;
    $scope.withdrawnList;
    $scope.displayList;
    $scope.referralStatusList;
    $scope.auditTypeList;
    $scope.accountURL;
    $scope.policyURL;
    $scope.supportingURL;
    $scope.priorityOptionsList = [
        {"value": "STND", "label": "Standard"},
        {"value": "RSH", "label": "Rush"}
    ];
    $scope.transactionFilterList = [
        {"value": "allOpen", "label": "Open", "id": "allOpenButton"},
        {"value": "lastFifty", "label": "Last 50", "id": "lastFiftyButton"},
        {"value": "allDetails", "label": "All", "id": "detailsButton"},
        {"value": "allSystem", "label": "Show System OOS", "id": "allSystemButton"}
    ];
    $scope.policyFilterList = [
        {"value": "selectedEntries", "label": "Selected", "id": "selectedPoliciesButton"},
        {"value": "allEntries", "label": "All", "id": "allPoliciesButton"}
    ];
    $scope.isSingle = false;
    $scope.commentCount;

    $scope.validationMessageHolder = [];
    $scope.validationMessages = [];

    $scope.disableRecapture = true;
    $scope.disableUnpend = false;
    $scope.showActivityTable = false;
    $scope.showComments = false;
    $scope.showReferral = false;
    $scope.allPolicies = false;
    $scope.allActivities = false;
    $scope.isActivityDetailsOpen = false;
    $scope.isActivityDetailsMultiOpen = false;
    $scope.isTRNStatusOpen = false;
    $scope.isCreateActivityOpen = false;
    $scope.isCreateSelectOpen = false;
    $scope.isAnnualizedPremiumOpen = false;
    $scope.annualizedPremiumSubId = '';
    $scope.isViewHistoryOpen = false;
    $scope.isConfirmOpen = false;
    $scope.isConfirmWork = false;
    $scope.isConfirmEndorsementOpen = false;
    $scope.isConfirmOutOfSequenceOpen = false;
    $scope.isConfirmCommissionOutOfSequenceOpen = false;
    $scope.issuedRenewalsData = [];
    $scope.endorsementActivities;
    $scope.disableCustomerExperience = false;
    $scope.disableAccountSummary = false;
    $scope.disableNotes = false;

    $scope.workActivity = function(submissionId) {

        $rootScope.showPageLoading();
        Activity.doWorkActivity(submissionId, function (result) {
            if (result.data['ActivityController.doWorkActivity'].status !== false) {
                RA.Session.removeViewOnlyMode();
                RA.Session.addCurrentUserHid($scope.currentUser.createHid);
                RA.Session.addSubmissionIdSearch(submissionId);
                RA.Session.addSessionMode(SESSION_SUBMISSION_MODE);
                $scope.applyLayout('submission');
            }
            else {
                RA.UI.doClearMessages($scope);
                RA.Service.handleServiceResult(result, $scope);
                $rootScope.hidePageLoading();
                $scope.scrollToTop();
            }
            $scope.$apply();
        });

    };

    $scope.scrollToTop = function () {
        scroll(0, 0);
    };

    $scope.reflowTheads = function() {
        //refresh both table headers now that things have shifted on the page
        var polTable = $('#' + Activities.UI.POLICY_TABLE);
        if (polTable) polTable.trigger('reflow');
        var actTable = $('#' + Activities.UI.ACTIVITY_TABLE);
        if (actTable) actTable.trigger('reflow');
    };

    $scope.$on('bannerChanged', function() {
        $scope.reflowTheads();
    });

    $scope.$watchGroup(['displayInfoMessages','displayErrorMessages','displaySuccessMessages','displayValidationMessages'], function () {
        $scope.reflowTheads();
    });

    $scope.refreshAfterPolicyTermRows = function(callback)
    {
        var callService = false;
        var symbols = [];
        for (var p in $scope.policyTermRows)
        {
            var row = $scope.policyTermRows[p];
            symbols.push(row.symbol);
            callService = callService || !$scope.activityTypesMaster ? true : !$scope.activityTypesMaster[row.symbol];
            idToSymbol[row.policyId] = row.symbol;
            if(row.details)
            {
                policyDetails[row.policyId] = row;
                $scope.buildFullyQualilfiedPolicyNameForDetails(row.details);
            }

            if(row.allSystem) {
                $scope.buildFullyQualilfiedPolicyNameForDetails(row.allSystem);
            }
        }

        //the callback is only included when this is initialized the first time
        if (callService || callback) {
            Presentation.findCreateTransactionList({symbols: symbols}, function (result) {
                var data = RA.Service.handleServiceResult(result, $scope);
                $scope.activityTypesMaster = {};
                for (var type in data) {
                    if (type.indexOf('@') > -1) continue;

                    var list = data[type];
                    var labelValue = [];
                    for (var value in list) {
                        if (value.indexOf('@') === -1) // this will skip over list item containing @
                        {
                            labelValue.push({"value": value, "label": list[value]});
                        }
                    }
                    $scope.activityTypesMaster[type] = (labelValue);
                }
                if (callback) {
                    callback(null, null);
                }
            });
        }
    };

    Activities.UI.removeLink(Activities.UI.CUSTOMER_NAV); // TODO - remove this...we should be able to go to customer experience from here

    $scope.cancelFunction = function (key, value, preCallback, postCallback)
    {
        var current = RA.UI.takeSnapshot(value, preCallback);
        if (snapshots[key] == current || confirm(UNSAVED_CHANGES_NAV_CONFIRM))
        {
            postCallback();
        }
    };

    $scope.preCallback = function preCallback()
    {
        if ($scope.activity)
        {
            if ($scope.activity.assignToHid === '')
                delete $scope.activity.assignToHid;

            if ($scope.activity.reasonTypeCode === '')
                delete $scope.activity.reasonTypeCode;

            if ($scope.activity.reasonRefCode === '')
                delete $scope.activity.reasonRefCode;

            if ($scope.activity.assignmentReasonCode === '')
                delete $scope.activity.assignmentReasonCode;

            if ($scope.activity.endorsementTypeRefCode === '')
                delete $scope.activity.endorsementTypeRefCode;

            if ($scope.activity.endorsementSubTypeRefCode === '')
                delete $scope.activity.endorsementSubTypeRefCode;
        }
    };

    $scope.convertCarrierData = function (carrierLookupRows)
    {
        var carrierRowDataArray = [];
        if (carrierLookupRows != null)
        {
            angular.forEach(carrierLookupRows, function (carrier)
            {
                var carrierName = '<a>' + carrier.carrierName + '</a>';
                var groupName = EMPTY_STRING;

                if ($scope.carrierLookup.carrierLookupType == CARRIER_LOOKUP_TYPE_ALL)
                {
                    groupName = carrier.groupName;
                }
                else
                {
                    groupName = '<a>' + carrier.groupName + '</a>';
                }

                var carrierRow = [carrierName, groupName,
                    carrier.rating, carrier.externalId,
                    carrier.groupId, carrier.carrierName,
                    carrier.groupName];
                carrierRowDataArray.push(carrierRow);
            });
        }
        return carrierRowDataArray;
    };

    $scope.clearLostCarrier = function ()
    {
        $scope.disposition.lostToCarrierName = EMPTY_STRING;
        $scope.disposition.lostToCarrierExternalPartyIdCd = EMPTY_STRING;
        $scope.disposition.businessCategoryRefCode = EMPTY_STRING;
    };

    $scope.onSelectCarrierName = function ()
    {
        $scope.disposition.lostToCarrierName = $scope.carrierLookup.otherCarrierName;
        $scope.disposition.lostToCarrierExternalPartyIdCd = EMPTY_STRING;
        $scope.disposition.businessCategoryRefCode = CARRIER_TYPE_INDIVIDUAL;

        $scope.isSearchForCarrierOpen = false;
        Activities.UI.scrollTransactionStatus();
    };

    $scope.onCarrierLookupCancel = function ()
    {
        $scope.isSearchForCarrierOpen = false;
    };
    $scope.onCarrierLookupCancelButton = function onCarrierLookupCancelButton()
    {
        $scope.cancelFunction(SEARCH_FOR_CARRIER_SNAPSHOT_KEY, $scope.carrierLookup, null, $scope.onCarrierLookupCancel)
    };

    $scope.saveSearchForCarrierSnapshot = function saveSearchForCarrierSnapShot()
    {
        snapshots[SEARCH_FOR_CARRIER_SNAPSHOT_KEY] = $scope.findSearchForCarrierSnapshot();
    };
    $scope.findSearchForCarrierSnapshot = function findSearchForCarrierSnapshot()
    {
        return RA.UI.takeSnapshot($scope.carrierLookup);
    };

    $scope.resetCarrierLookupValues = function ()
    {
        $scope.carrierLookup.carrierLookupString = EMPTY_STRING;
        $scope.carrierLookup.carrierLookupType = CARRIER_LOOKUP_TYPE_ALL;
        $scope.carrierLookup.otherCarrierName = EMPTY_STRING;
        $scope.carrierLookup.otherCarrierIndicator = false;
        var dataTable = carrierTableReader.toDataTable();
        dataTable.fnSettings().oLanguage.sEmptyTable = "No data available in the table";
        dataTable.fnClearTable();
        dataTable.fnSetColumnVis(0, true);
        dataTable.fnSetColumnVis(2, true);
    };

    $scope.setSelectedCarrierDetails = function (carrierName, externalId)
    {

        $scope.disposition.lostToCarrierName = carrierName;
        $scope.disposition.lostToCarrierExternalPartyIdCd = externalId;
        $scope.disposition.businessCategoryRefCode = CARRIER_TYPE_INDIVIDUAL;

        $scope.isSearchForCarrierOpen = false;
        if (!$scope.$$phase)
        {
            $scope.$apply();
        }
    };

    $scope.setSelectedGroupDetails = function (groupName, externalId)
    {

        $scope.disposition.lostToCarrierName = groupName;
        $scope.disposition.lostToCarrierExternalPartyIdCd = externalId;
        $scope.disposition.businessCategoryRefCode = CARRIER_TYPE_GROUP;

        $scope.isSearchForCarrierOpen = false;
        if (!$scope.$$phase)
        {
            $scope.$apply();
        }
    };

    $scope.toggleOtherCarrierCheckbox = function ()
    {
        if ($scope.carrierLookup.otherCarrierIndicator == true)
        {
            $scope.carrierLookup.otherCarrierName = "Other";
        }
        else
        {
            $scope.carrierLookup.otherCarrierName = EMPTY_STRING;
        }
    };

    $scope.findAccountPolicyInfo = function (opts)
    {
        if (!opts)
            opts = {};

        Account.findAccountPolicies($scope.customerNumber, function (result)
        {
            var data = RA.Service.handleServiceResult(result, $scope);

            $scope.accountRelation = data;

            if ($scope.accountRelation && $scope.accountRelation.length > 0)
            {
                $scope.accountSourceId = $scope.accountRelation[0].accountId;
                $scope.foundAccountRelation = true;
            }

            if (opts.callback)
                opts.callback(null);
        }, opts);
    };

    $scope.doDetermineNotesExist = function (callback)
    {
        $scope.determineNotePolicyArray = [];
        var accountRelation1ArraySize = $scope.accountRelation ? $scope.accountRelation.length : 0;
        var ii = 0;

        for (var i = 0; i < accountRelation1ArraySize; i++)
        {
            $scope.accountSourceId = $scope.accountRelation[i].accountId;
            if ($scope.accountRelation[i].relationshipSourceCode == "policy")
            {
                if ($scope.accountRelation[i].sourceId != null)
                {
                    $scope.determineNotePolicyArray[ii] = {};
                    $scope.determineNotePolicyArray[ii] = $scope.accountRelation[i].sourceId;
                    ii++;
                }
            }
            else
            {
                if ($scope.accountRelation[i].relationshipSourceCode == "submission")
                {
                    $scope.determineNotePolicyArray[ii] = {};
                    $scope.determineNotePolicyArray[ii] = $scope.accountRelation[i].sourceId;
                    ii++;
                }
            }
        }

        async.series(
            {
                notesExist: function (callback)
                {
                    Notes.doDetermineNotesExist($scope.accountSourceId, $scope.determineNotePolicyArray, function (result)
                    {
                        var data = RA.Service.handleServiceResult(result, $scope);
                        callback(null, data);
                    });
                }
            },
            function (err, result)
            {

                $scope.noteExist = result.notesExist ? result.notesExist.value : false;


                if (callback)
                    callback(null);
            });
    };

    // Define Child Window Handle Var
    $scope.childWindowHandle = EMPTY_STRING;

    // doOpenNotesWindow - Initiated from Left-Hand Nav
    $scope.doOpenNotesWindow = function (event)
    {
        if (angular.isDefined(event))
        {
            event.preventDefault();
        }

        if ($scope.disableNotes == true)
        {
            return;
        }
        // Invoke Common Method containing Open Notes Window Logic
        RA.UI.doOpenNotesWindow($scope);
    };

    $scope.doOpenMyFile = function (event)
    {
        if (angular.isDefined(event))
        {
            event.preventDefault();
        }
        //Myfile Matrix - REFONE 975
        var policyInfo = {};
        var polNumbers = [];
        var activityPolNumbers = [];
        var isForPolicy = false;
        var isForSubmission = false;
        var submissionIds = [];

        var policyRows = policyTableReader.getCheckedRows();
        for (var v = 0; v < policyRows.length; v++)
        {
            var row = policyRows[v];
            isForPolicy = true;
            var polSplit = row.policyInfo().split(' ');
            polNumbers.push(polSplit[1]);
            policyInfo[polSplit[1]] = {policySymbol: polSplit[0], policyMod: polSplit[2]};
        }

        var activityRows = activityTableReader.getCheckedRows();
        for (var r = 0; r < activityRows.length; r++)
        {
            var row = activityRows[r];
            submissionIds.push(row.submissionId());
            isForSubmission = true;
            var polSplit = row.policyInfo().split(' ');
            activityPolNumbers.push(polSplit[1]);
            policyInfo[polSplit[1]] = {policySymbol: polSplit[0], policyMod: polSplit[2]};
        }

        if (isForPolicy && !isForSubmission)
        {
            if (policyRows.length == 1)
            {
                if (polNumbers[0].length > 1)
                {
                    var polNo = polNumbers[0];
                    var info = policyInfo[polNo];
                    RA.Controller.viewDocumentsMyfile($scope.myFileLink, 'PolicyNumber=' + polNo + '&Symbol=' + info.policySymbol + '&MOD=' + info.policyMod);
                }
                if (polNumbers[0].length == 1)
                {
                    //Policy table does not have submissionId. Query DB to get submissionId.
                    Activity.findSubmissionIdByPolicyId(policyRows[0].val, function (result)
                    {
                        var data = RA.Service.handleServiceResult(result, $scope);
                        RA.Controller.viewDocumentsMyfile($scope.myFileLink, 'SubmissionID=' + data);
                    });
                }
            }
            if (policyRows.length > 1)
                navigateMyFile(VIEW_ACCOUNT_DOCUMENTS);
        }

        if (isForSubmission && !isForPolicy)
        {
            if (activityRows.length == 1)
            {
                RA.Controller.viewDocumentsMyfile($scope.myFileLink, 'SubmissionID=' + submissionIds[0]);
            }

            if (activityRows.length > 1)
            {
                if ($scope.areElementsinArraySame(activityPolNumbers))
                {
                    var polNo = activityPolNumbers[0];
                    var info = policyInfo[polNo];
                    RA.Controller.viewDocumentsMyfile($scope.myFileLink, 'PolicyNumber=' + polNo + '&Symbol=' + info.policySymbol + '&MOD=' + info.policyMod);
                }
                if (!$scope.areElementsinArraySame(activityPolNumbers))
                {
                    navigateMyFile(VIEW_ACCOUNT_DOCUMENTS);
                }
            }
        }

        if (isForSubmission && isForPolicy)
        {
            if (polNumbers.length == 1 && polNumbers[0] !== '-')
            {
                if ($scope.areElementsinArraySame(activityPolNumbers) && polNumbers[0] === activityPolNumbers[0])
                {
                    var polNo = polNumbers[0];
                    var info = policyInfo[polNo];
                    RA.Controller.viewDocumentsMyfile($scope.myFileLink, 'PolicyNumber=' + polNo + '&Symbol=' + info.policySymbol + '&MOD=' + info.policyMod);
                }
                if (polNumbers[0] !== activityPolNumbers[0] || !$scope.areElementsinArraySame(activityPolNumbers))
                    navigateMyFile(VIEW_ACCOUNT_DOCUMENTS);
            }
            else
            {
                navigateMyFile(VIEW_ACCOUNT_DOCUMENTS);
            }
        }
    };

    $scope.areElementsinArraySame = function same(a)
    {
        if (!a.length) return true;
        return !a.filter(function (e)
        {
            return e !== a[0];
        }).length;
    };

    $scope.findActivitiesForPolicy = function (callback)
    {
        lastSelected = [];
        $scope.activityRows = [];
        var count = 0;
        var rows = policyTableReader.getCheckedRows();
        var policies = [];
        for (var v = 0, rowsLength = rows?rows.length:0; v < rowsLength; v++)
        {
            var tableRow = rows[v];
            var policyId = tableRow.val;
            lastSelected.push(policyId);
            if(policyDetails.hasOwnProperty(policyId))
            {
                var activities = policyDetails[policyId];
                count += activities.details.length;
            }
            else
            {
                var policyInfo = tableRow.policyInfo();
                var polSplit = policyInfo.split(' ');
                var map = {};
                if(polSplit[1] && polSplit[1] !== '-') // if you have a policy number
                {
                    map.policySymbol = polSplit[0];
                    map.policyNumber = polSplit[1];
                    map.policyMod = polSplit[2];
                    map.policyVersion = polSplit[3];
                }
                else
                {
                    for (var i = 0; i < $scope.policyTermRows.length; i++)
                    {
                        var row = $scope.policyTermRows[i];
                        if (row.policyId == policyId)
                        {
                            map.submissionId = row.submissionId;
                            break;
                        }
                    }
                }
                policies.push(map);
            }
        }

        if(policies.length > 0)
        {
            $rootScope.showPageLoading();
            Activity.findActivitiesForPolicy(policies, function (result)
            {
                var data = RA.Service.handleServiceResult(result, $scope);
                for(var i = 0, dataLength = data.length; i < dataLength; i++)
                {
                    var dataRow = data[i];
                    var details = dataRow.details;
                    var allSystem = dataRow.allSystem;
                    if(details)
                    {
                        $scope.buildFullyQualilfiedPolicyNameForDetails(details);
                        policyDetails[dataRow.policyId] = dataRow;
                        if ($scope.table && $scope.table.length > 0) {
                            for (var j = 0, tableLength = $scope.table.length; j < tableLength; j++ )
                            {
                                for(var k = 0, detailsLength = details.length; k < detailsLength; k++)
                                {
                                    if ($scope.table[j].activityId == details[k].activityId) {
                                        $scope.table[j] = createTRNStatusEntryFromActivity(details[k]);
                                        break;
                                    }
                                }
                            }
                            $scope.$apply();
                        }
                    }

                    if(allSystem) {
                        $scope.buildFullyQualilfiedPolicyNameForDetails(allSystem);
                    }
                }
                count += data.length;
                build();
                $rootScope.hidePageLoading();
                if (callback)
                    callback(policyDetails);
            });
        }
        else
        {
            build();
        }

        function build()
        {
            var rows;
            $scope.oosCount = 0;
            for(var i=0; i <Activities.length; i++){
                var act = Activities[i];
                act.doCheckForOutOfSequence(submissionId, function(result){
                    var isOutOfSequence = RA.Service.handleServiceResult(result, $scope);
                    if(null === isOutOfSequence) {
                        $scope.workActivity(submissionId);
                    } else if(true === isOutOfSequence) {
                        $scope.oosCount = $scope.oosCount +1;
                    } else {
                        //TODO - This whole file needs Service Timeout handling
                    }
                });
            }
            Activities.UI.disable('lastFiftyButton', rows && (rows.length > 1));
            $scope.showActivitiesTable = true;
            if($scope.oosCount>0)
            {
                $scope.transactionFilter = 'allSystem'
            }
            else if(count > 50)
            {
                $scope.transactionFilter = 'allOpen'
            }
            else
            {
               $scope.transactionFilter ='allDetails'
            }
            $scope.doFilterActivities();

            rows = policyTableReader.getCheckedRows();
            Activities.UI.disable(Activities.UI.VIEW_ACTIVITIES, rows && (rows.length == 0));
            Activities.UI.disable(Activities.UI.CHANGE_DETAILS, true);
            Activities.UI.disable(Activities.UI.TRN_STATUS, true);
            Activities.UI.disable(Activities.UI.UNLOCK_BUTTON, true);
            Activities.UI.check(Activities.UI.ACTIVITY_ALL, false);
            $timeout(angular.noop);
        }
    };

    $scope.buildFullyQualilfiedPolicyNameForDetails = function(details) {
        var i = 0;
        var activityDetail = null;

        for(i; i < details.length; i++) {
            activityDetail = details[i];
            activityDetail.policy = RA.UI.nvl(activityDetail.policySymbol, VALUE_FOR_NULL_VALUE) + ' ' + RA.UI.nvl(activityDetail.policyNumber, VALUE_FOR_NULL_VALUE) + ' ' + RA.UI.nvl(activityDetail.policyMod, VALUE_FOR_NULL_VALUE) + ' ' + RA.UI.nvl(activityDetail.policyVersion, '');
        }

    };

    $scope.doFilterPolicies = function doFilterPolicies() {
        var policyId, isHit, policyTermRowsLength, allPolicyTermRowsLength;
        var tempRows = [];
        showSelectedPolicyEntriesOnly = false;
        checkedPolicyRows = policyTableReader.getCheckedRows();
        allPolicyRows = policyTableReader.getRows();

        for (var key in allPolicyRows) {
            policyId = allPolicyRows[key].val;
            isPolicyCheckedMap[policyId] = allPolicyRows[key].checked;
        }

        switch ($scope.policyFilter) {
            case 'selectedEntries':
                Activities.UI.text('selectedPoliciesButton', 'Selected (' + checkedPolicyRows.length + ')');
                Activities.UI.text('allPoliciesButton', 'All');

               if (checkedPolicyRows.length === allPolicyRows.length) {
                    // this is just for efficiency - skip rebuilding the table if you have all selected anyway.
                    return;
                }

               for (key in checkedPolicyRows) {
                   policyId = checkedPolicyRows[key].val;
                   policyTermRowsLength = $scope.policyTermRows.length;
                   for(var i = 0; i < policyTermRowsLength; i++) {
                       var row = $scope.policyTermRows[i];
                       if(+policyId === row.policyId) {
                          tempRows.push(row);
                       }
                   }
               }

               $scope.policyTermRows = tempRows;
               showSelectedPolicyEntriesOnly = true;
               break;

            case 'allEntries':
                Activities.UI.text('allPoliciesButton', 'All (' + allPolicyRows.length + ')');
                Activities.UI.text('selectedPoliciesButton', 'Selected');

                if(allPolicyTermRows){
                    allPolicyTermRowsLength =  allPolicyTermRows.length;
                    for (var k = 0; k < allPolicyTermRowsLength; k++)
                    {
                        var row1 = allPolicyTermRows[k];
                        isHit = false;
                        policyTermRowsLength = $scope.policyTermRows.length;
                        for(var j = 0; j < policyTermRowsLength; j++) {
                            var row2 = $scope.policyTermRows[j];

                            if(row1.policyNumber == null && row2.policyNumber == null){
                                if(row1.policyId === row2.policyId){
                                    tempRows.push(row1);
                                    isHit = true;
                                }
                            }
                            else if( row1.policyNumber === row2.policyNumber && row2.policySymbol === row2.policySymbol) {
                                    if(isHit){
                                        tempRows.push(row2);
                                        continue;
                                    }
                                    tempRows.push(row1);
                                    isHit = true;
                                }
                            }
                        if(!isHit){
                            tempRows.push(row1);
                        }
                    }
                    $scope.policyTermRows = tempRows
                }
                showSelectedPolicyEntriesOnly = false;
                break;
        }
        Activities.UI.buildPolicyTable($scope, $compile);
    };

    $scope.doFilterActivities = function doFilterActivities()
    {
        if(!$scope.policyTermRows) return;

        var display = [];
        var count = 0;
        for(var i = 0; i < lastSelected.length; i++)
        {
            var policyId = lastSelected[i];
            var data = policyDetails[policyId];
            if(typeof data != 'undefined') {
                var filter = data[$scope.transactionFilter];
                if (filter) {
                    display.push(filter);
                    count += filter.length;
                }
            }
        }

        $scope.activityRows = display;
        Activities.UI.buildActivityTable($scope, $rootScope.currentUser ? $rootScope.currentUser.createHid : EMPTY_STRING, $compile, $filter);

        switch($scope.transactionFilter)
        {
            case 'allOpen':
                Activities.UI.text('allOpenButton', 'Open(' + count + ')');
                Activities.UI.text('detailsButton', 'All');
                break;
            case 'allDetails':
                Activities.UI.text('allOpenButton', 'Open');
                Activities.UI.text('detailsButton', 'All(' + count + ')');
                break;
            case 'lastFifty':
                Activities.UI.text('allOpenButton', 'Open');
                Activities.UI.text('detailsButton', 'All');
                break;
            case 'allSystem':
                Activities.UI.text('allOpenButton', 'Open');
                Activities.UI.text('detailsButton', 'All');
                break;
        }
    };

    $scope.buildDeleteActivityWarningMessage = function (hasRelatedCancellationActivity)
    {
        if (hasRelatedCancellationActivity)
        {
            if ($scope.historyType === ACTIVITY_TYPE_CANCELLATION)
            {
                return DELETE_CANCELLATION;
            }
            else
            {
                return DELETE_SUBMISSION_RELATED_CANCELLATION;
            }
        }
        else
        {
            if ($scope.activityRows && $scope.activityRows.length === 1)
            {
                return DELETE_SUBMISSION_RELATED_ACTIVITES;
            }
            else
            {
                return DELETE_SUBMISSION_NUMBERED_ACTIVITIES1 + $scope.activityRows.length + DELETE_SUBMISSION_NUMBERED_ACTIVITIES2;
            }
        }
    };

    $scope.selectAll = function (checkAllId, checkboxId)
    {
        var reader = checkboxId == Activities.UI.POLICY_ALL ? policyTableReader : activityTableReader;
        Activities.UI.disable(Activities.UI.VIEW_MODS_BUTTON, false);
        reader.selectAll(checkAllId);
        var rows = reader.getRows();
        for (var r = 0; r < rows.length; r++)
        {
            var row = rows[r];
            if (checkboxId == Activities.UI.POLICY_ALL)
            {
                Activities.UI.disable(Activities.UI.VIEW_ACTIVITIES, !row.checked);
                Activities.UI.disable(Activities.UI.CREATE_ACTIVITY, !row.checked);
                Activities.UI.disable(Activities.UI.CREATE_ACTIVITY, !row.checked);
            }
            else
            {
                Activities.UI.disable(Activities.UI.CHANGE_DETAILS, !row.checked);
                Activities.UI.disable(Activities.UI.UNLOCK_BUTTON, !row.checked);
            }
        }
        if (checkboxId != Activities.UI.POLICY_ALL) {
            setTrnStatusDisabled();
        }
        if (!editAccess)
        {
            Activities.UI.disable(Activities.UI.TRN_STATUS, true);
            Activities.UI.disable(Activities.UI.UNLOCK_BUTTON, true);
            Activities.UI.disable(Activities.UI.CREATE_ACTIVITY, true);
        }
    };

    $scope.saveDetailsAndChangeStatus = function() {
        $scope.saveActivityDetails(function(activities){
            if (activities.length > 0) {
                $scope.doToggleTRNStatusModal(activities);
            }
        });
    };

    $scope.saveActivitiesAndClose = function ()
    {
        var activities = [];
        if ($scope.isSingle)
        {
            $scope.activityDetails.activityComments = null;
            activities.push($scope.activityDetails);
        }
        else
        {
            var rows = activityTableReader.getCheckedRows();
            for (var r = 0; r < rows.length; r++)
            {
                var row = rows[r];
                var actLocal = jQuery.extend(true, {}, $scope.activityDetails);
                actLocal.activityComments = null;
                actLocal.activityId = row.val;
                activities.push(actLocal);
            }
        }
        $rootScope.showPageLoading();

        Activity.saveAndCloseReminders(activities, function (result)
        {
            $scope.doRefreshPage(result, false, $scope.toggleActivityDetailsModal);
        });
        return activities;
    };

    $scope.saveActivitiesAndUnlock = function ()
    {
        var activities = [];
        var changeDetailsAdditionalFields = null;
        var underwriterHid = $scope.activityDetails.underwriterHid;

        if(underwriterHid){
            changeDetailsAdditionalFields = {'underwriterHid':underwriterHid};
        }

        if ($scope.isSingle)
        {
            $scope.activityDetails.activityComments = null;
            activities.push($scope.activityDetails);
        }
        else
        {
            for(var i=0; i < $scope.table.length; i++) {
                var value = $scope.table[i];
                var row = $filter('filter')(activityTableReader.getRows(), function (element) {return value.subId == element.submissionId()})[0];
                if (row) {
                    var actLocal = jQuery.extend(true, {}, $scope.activityDetails);
                    actLocal.activityComments = null;
                    actLocal.activityId = row.val;
                    actLocal.sourceId = row.submissionId();
                    activities.push(actLocal);
                }
            }
        }
        $rootScope.showPageLoading();

        $scope.validateClearableFields();
        Activity.saveAndUnlockActivityDetails(activities, $scope.clearedFieldsList, changeDetailsAdditionalFields, function (result)
        {
            RA.UI.doClearMessages($scope);
            var resultSaveActivityDetails = {
                status: result.data['ActivityController.saveAndUnlockActivityDetails'].status,
                data: RA.Service.handleServiceResult(result, $scope),
                messages: result.data['ActivityController.saveAndUnlockActivityDetails'].messages
            };
            $scope.doRefreshPage(resultSaveActivityDetails, false, $scope.toggleActivityDetailsModal, 'changeActivityModal', true);
            RA.Session.removeQuoteId();
            RA.Session.removeSelectedQuoteId();
            $rootScope.$broadcast('submissionLoaded');
        });
        return activities;
    };

    $scope.saveActivityDetails = function (callback)
    {
        var activities = [];
        var changeDetailsAdditionalFields = null;
        var underwriterHid = $scope.activityDetails.underwriterHid;

        if(underwriterHid){
            changeDetailsAdditionalFields = {'underwriterHid':underwriterHid};
        }

        if ($scope.isSingle)
        {
            $scope.activityDetails.activityComments = null;
            var row = $filter('filter')(activityTableReader.getRows(), function(element, index, array) { return parseInt($scope.activityDetails.activityId) === parseInt(element.val) })[0];
            if (row) {
                $scope.activityDetails.submissionId = row.submissionId();
                $scope.activityDetails.policyId = row.policyId();
            }
            activities.push($scope.activityDetails);
        }
        else if (!$scope.isSingle && $scope.hasReminders) {
            var rows = activityTableReader.getCheckedRows();
            for (var r = 0; r < rows.length; r++) {
                var row = rows[r];
                var actLocal = jQuery.extend(true, {}, $scope.activityDetails);
                actLocal.activityComments = null;
                actLocal.activityId = row.val;
                activities.push(actLocal);
            }
        }
        else {
            angular.forEach($scope.table, function(value, key){
                var row = $filter('filter')(activityTableReader.getRows(), function(element, index, array) { return value.subId == element.submissionId() })[0];
                if (row) {
                    var subId = row.submissionId();
                    var policyId = row.policyId();
                    var actId = row.val;
                    var actLocal = jQuery.extend(true, {}, $scope.activityDetails);
                    for (var e in $scope.table)
                    {
                        var tableRow = $scope.table[e];
                        if (tableRow.policyId == actId && tableRow.isValid)
                        {
                            actLocal.policyId = policyId;
                            actLocal.activityId = actId;
                            actLocal.submissionId = subId;
                            actLocal.activityComments = null;
                            actLocal.sourceId = subId;
                            activities.push(actLocal);
                        }
                    }
                }
            });
        }
        $rootScope.showPageLoading();

        $scope.validateClearableFields();
        Activity.saveActivityDetails(activities, $scope.clearedFieldsList, changeDetailsAdditionalFields, function (result)
        {
            RA.UI.doClearMessages($scope);
            var resultSaveActivityDetails = {
                status: result.data['ActivityController.saveActivityDetails'].status,
                data: RA.Service.handleServiceResult(result, $scope),
                messages: result.data['ActivityController.saveActivityDetails'].messages
            };
            result.status = resultSaveActivityDetails.status;
            result.messages = resultSaveActivityDetails.messages;
            $scope.doRefreshPage(resultSaveActivityDetails, false, $scope.toggleActivityDetailsModal, 'changeActivityModal', true);
            if (result.status === true && callback) {
               callback(activities);
            }
        });
        // This returns false to make sure gaig-modal does not change the ng-model to false, allowing our toggleActivityDetailsModal to do it.
        return false;
    };

    $scope.createActivity = function ()
    {
        var activities = [];
        RA.UI.doClearMessages($scope);
        $scope.issuedRenewalsData = [];
        $scope.endorsementActivities = undefined;
        var rows = policyTableReader.getCheckedRows();
        for (var r = 0; r < rows.length; r++)
        {
            var row = rows[r];
            var isValid = true;
            var policy = row.policyInfo();
            for (var e in $scope.errorTable)
            {
                var errorRow = $scope.errorTable[e];
                if (errorRow.policy == policy)
                {
                    isValid = errorRow.isValid;
                    break;
                }
            }
            if (!isValid)
            {
                continue;
            }

            var actLocal = jQuery.extend(true, {}, $scope.activity);
            actLocal.policyId = row.val;
            actLocal.transactionTypeRefCode = $scope.selectedTypeHolder.selectedType;
            actLocal.isContinuous = $scope.policyTermRows[row.index].continuousInd === 1;
            activities.push(actLocal);
            // save the policies that were checked in the policy term table.
            $scope.selectedPolicies.push({policyId:row.val});
        }

        $rootScope.showPageLoading();
        if ('REMINDER' == $scope.selectedTypeHolder.selectedType)
        {
            Activity.doCreateReminder(activities, function (result)
            {
                var resultCreateReminders = {
                    status: result.data['ActivityController.doCreateReminders'].status,
                    data: RA.Service.handleServiceResult(result, $scope),
                    messages: result.data['ActivityController.doCreateReminders'].messages
                };
                RA.Session.removeQuoteId();
                RA.Session.removeSelectedQuoteId();
                $scope.doRefreshPage(resultCreateReminders, false, $scope.toggleCreateActivityModal);
                $rootScope.$broadcast('submissionLoaded');
            });
        }
        else
        {
            if ('CNRW' == $scope.selectedTypeHolder.selectedType)
            {
                var reason = $scope.activity.reasonRefCode;
                if ((reason == 'OTH' || reason == 'OTHER' || reason == 'UR-OTH') && !$scope.activity.activityReasonComments)
                {
                    RA.UI.doDisplayUIMessages([{
                        'context': '',
                        'type': MESSAGE_VALIDATION,
                        'text': 'Explanation is required.'
                    }], $scope);
                    if (!$scope.activity.transactionEffectiveDate)
                    {
                        RA.UI.doDisplayUIMessages([{
                            'context': '',
                            'type': MESSAGE_VALIDATION,
                            'text': 'Transaction Effective Date is required to create a Cancel-Rewrite'
                        }], $scope);
                    }
                    $rootScope.hidePageLoading();
                    Activities.UI.scrollModalTop('changeActivityModal');
                    return;
                }

                Activity.doCheckForMidTerm(activities[0], function (result)
                {
                    var isMidTerm = RA.Service.handleServiceResult(result, $scope);
                    // Determine whether to display Review Cancellation Modal for Mid-Term Cancel
                    var reviewCancellationModal = true;
                    for (var p in $scope.policyTermRows)
                    {
                        var policyRow = $scope.policyTermRows[p];
                        if (policyRow.policyId == activities[0].policyId)
                        {
                            reviewCancellationModal = policyRow.reviewCancellation;
                            break;
                        }
                    }

                    if (isMidTerm && reviewCancellationModal)
                    {
                        var temp = jQuery.extend(true, {}, $scope.activity);
                        $scope.toggleCreateActivityModal();
                        $scope.isConfirmOpen = true;
                        $scope.confirmApply = $scope.cancelRewrite;
                        $scope.activity = temp;
                        $rootScope.hidePageLoading();
                        $scope.$apply();
                    }
                    else
                    {
                        $scope.createActivities(activities);
                    }
                });
            }
            else if ('ENDT' == $scope.selectedTypeHolder.selectedType || 'CANC' == $scope.selectedTypeHolder.selectedType)
            {
                var policyDtos = [];
                var rows = policyTableReader.getCheckedRows();
                for (var v = 0; v < rows.length; v++)
                {
                    var row = rows[v];
                    var policy = row.policyInfo();
                    var policyArray = policy.split(' ');
                    var policyNumber = policyArray[1];
                    policyDtos.push({'policyId': row.val, 'policyNumber': policyNumber});
                }

                Activity.findIssuedRenewals(policyDtos, function (result)
                {
                    var data = RA.Service.handleServiceResult(result, $scope);
                    var hasIssuedRenewals = data && data.length > 0;

                    if (hasIssuedRenewals)
                    {
                        $scope.issuedRenewalsData = data;
                        $scope.endorsementActivities = activities;
                        $scope.toggleCreateActivityModal();
                        $scope.isConfirmEndorsementOpen = true;
                        $rootScope.hidePageLoading();
                    }
                    else
                    {
                        $scope.createActivities(activities);
                    }
                    if (!$scope.$$phase)
                    {
                        $scope.$apply();
                    }
                });
            }
            else
            {
                $scope.createActivities(activities);
            }
        }
    };

    $scope.validateClearableFields = function(){
        if (true === $scope.clearFields.assignmentReason) {
            $scope.clearedFieldsList.push('assignmentReasonCode');
        }
        if (true === $scope.clearFields.premiumTier) {
            $scope.clearedFieldsList.push('premiumTierRefCode');
        }
        if (true === $scope.clearFields.priority) {
            $scope.clearedFieldsList.push('priorityRefCode');
        }
        if (true === $scope.clearFields.needByDate) {
            $scope.clearedFieldsList.push('needByDate');
        }
    };

    $scope.cancelRewrite = function ()
    {
        var activities = [];
        var rows = policyTableReader.getCheckedRows();
        for (var r = 0; r < rows.length; r++)
        {
            var actLocal = jQuery.extend(true, {}, $scope.activity);
            actLocal.policyId = rows[r].val;
            actLocal.transactionTypeRefCode = 'CNRW';
            activities.push(actLocal);
        }

        var workCancel = $scope.confirm;
        for (var i in activities)
        {
            activities[i].isWorkingCancel = workCancel;
        }

        $rootScope.showPageLoading();
        $scope.createActivities(activities, true);
    }

    $scope.createActivities = function (activities, suppressModal)
    {
        Activity.doCreateActivities(activities, function (result)
        {
            var data = RA.Service.handleServiceResult(result,$scope);
            var isValid = RA.Service.isValidResult(result);
            if (isValid && data) {
                // Refactored when Activity Controller Migrated to Groovy
                var resultCreateActivities = {
                    status: result.data['ActivityController.doCreateActivities'].status,
                    data: data,
                    messages: result.data['ActivityController.doCreateActivities'].messages
                };
                RA.Session.removeQuoteId();
                RA.Session.removeSelectedQuoteId();
                $scope.doRefreshPage(resultCreateActivities, false, (suppressModal ? null : $scope.toggleCreateActivityModal), 'createActivityModal', true);
                $rootScope.$broadcast('submissionLoaded');
            }
            else {
                if ($scope.isTimeoutOpen) { // handle timeout
                    RA.UI.doDisplayUIMessages([{context:"", type:MESSAGE_INFO, text:"A timeout has occurred, please open a new browser and login."}], $scope);
                    $scope.isTimeoutOpen = false; // have to close timeout modal TODO: button function seems to be broken
                }
                else if ($scope.errorMessages.length < 1) {
                    RA.UI.doDisplayUIMessages([{context:"Create New Activity", type:MESSAGE_ERROR, text:GENERIC_ERROR_MESSAGE}], $scope);
                }
                $rootScope.hidePageLoading();
            }
        });
    };

    $scope.unpend = function ()
    {
        $scope.activityDetails.pendingDate = RA.UI.doMakeCurrentDateMMDDYYYY(new Date());
    };

    $scope.toggleCreateActivityModal = function ()
    {
        $scope.activity = {};
        $scope.activity.receivedDate = $scope.systemDate;
        $scope.activity.assignToHid = $scope.currentUser.createHid;
        $scope.isCreateActivityOpen = !$scope.isCreateActivityOpen;

        if (!$scope.isCreateActivityOpen)
        {
            $scope.selectedTypeHolder.selectedType = "";
            $scope.activity = {};
            RA.UI.doClearMessages($scope);
        }
        else
        {
            $scope.isAllInvalid = false;
            $scope.activityText = '';
            var allEqual = true;
            var lastDate;
            $scope.table = [];
            var iter = 0;
            var count = 0;
            var rows = policyTableReader.getCheckedRows();
            for (var r = 0; r < rows.length; r++)
            {
                count++;
                var row = rows[r];
                var policy = row.policyInfo();
                var type = row.status();
                var term = row.policyTerm();
                var rowIndex = row.index;

                var isValid = true;
                var obj = {"policy": policy, "type": type, "index": rowIndex, "term": term};
                for (var e in $scope.errorTable)
                {
                    var errorRow = $scope.errorTable[e];
                    if (errorRow.policy == policy)
                    {
                        isValid = errorRow.isValid;
                        if (!isValid)
                        {
                            iter++;
                        }
                        break;
                    }
                }


                if (iter == count && 'REMINDER' != $scope.selectedTypeHolder.selectedType)
                {
                    $scope.isAllInvalid = true;
                    $scope.activityText = 'One or more of the policies selected did not meet the appropriate criteria to create activity. The related policy must be bound or issued to create this activity. If you continue the system will create the activities for those that do meet the criteria. If you cancel the system will not create any activites';
                    Activities.UI.hide(Activities.UI.CREATE_BUTTON);
                }
                else
                {
                    Activities.UI.show(Activities.UI.CREATE_BUTTON);
                }

                obj.valid = (isValid ? 'dyn/images/greencheck.gif' : 'dyn/images/redx.gif');
                obj.isValid = isValid;
                if (!isValid && !$scope.isAllInvalid)
                {
                    $scope.activityText = 'One or more of the policies selected did not meet the appropriate criteria to create activity. The related policy must be bound or issued to create this activity. If you continue the system will create the activities for those that do meet the criteria. If you cancel the system will not create any activites';
                }
                $scope.table.push(obj);

                var dateArray = row.policyTerm().split('-')[0].split('/');
                var effDate = new Date(dateArray[2], dateArray[0] - 1, dateArray[1]);
                if (allEqual && lastDate && lastDate.getFullYear() != effDate.getFullYear() && lastDate.getDate() != effDate.getDate() && lastDate.getMonth() != effDate.getMonth())
                {
                    allEqual = false;
                }
                lastDate = effDate;
            }

            $scope.allEqual = allEqual;
            $scope.cancellationEffectiveDate = allEqual ? lastDate : null;
            setTimeout(function ()
            {
                snapshots[ACTIVITY_SNAPSHOT_KEY] = RA.UI.takeSnapshot($scope.activity);
            }, 30);
        }
    };

    $scope.resetClearableFields = function(){
        $scope.clearFields.assignmentReason = false;
        $scope.clearFields.premiumTier = false;
        $scope.clearFields.needByDate = false;
        $scope.clearFields.priority = false;
        $scope.clearedFields = [];
    };

    $scope.disableFields = function(){
        var data;

        var changeDetailsAdditionalFields = {'underwriter':'underwriter'};
        Activity.findDisabledFields(changeDetailsAdditionalFields, function (result) {
            data = RA.Service.handleServiceResult(result, $scope);
            $scope.disabledFields = data;
        });
    };

    $scope.toggleActivityDetailsModal = function (modalTable)
    {
        $scope.showComments = false;
        $scope.resetClearableFields();
        $scope.disableFields();

        $scope.isActivityDetailsOpen = !$scope.isActivityDetailsOpen;
        $scope.disableCancel = $scope.activityDetails.reasonTypeCode == 'F';
        $scope.cancellationTypeListMain = $scope.disableCancel ? $scope.cancellationTypeList : $scope.cancellationTypeListMidTerm;

        if (!$scope.isActivityDetailsOpen)
        {
            $scope.isSingleInActivityDetails = false;
            $scope.isSingle = false;
            $scope.changeDetails = false;
            $scope.changeDetailsTable = null;
            RA.UI.doClearMessages($scope);
        }
        else if (!$scope.isSingle)
        {
            $scope.activityDetailsTitle = "Change Activity Details";
            Activities.UI.hide(Activities.UI.DETAIL_CLOSE);
            RA.UI.doClearMessages($scope);
            $scope.disableUpdate = false;
            $scope.isRewrite = false;
            $scope.showCommentsLink = false;
            $scope.showCommentsLabel = 'Show All Comments';
            $scope.activityDetails = {"sourceId": $scope.activityDetails.sourceId};
            $scope.table = [];
            if (modalTable) {
                var dataTable = activityTableReader.getRows();
                angular.forEach(modalTable, function(value, key) {
                    var row = $filter('filter')(dataTable, function(element, index, array) { return value.subId == element.submissionId() })[0];
                    if (row) {
                        var policyId = row.val;
                        var policy = row.policyInfo();
                        var activity = row.activity();
                        var type = row.type();
                        var reason = row.description();
                        var status = row.status();
                        var date = row.transactionEffectiveDate();
                        var premium = row.trnPremium();
                        var subId = row.submissionId();
                        var isWorked = row.isWorked();
                        var isNonUD = row.isNonUD();
                        var polTrnEffDt = row.polTrnEffDt()
                        var polTrnExpDt = row.polTrnExpDt();
                        $scope.isRewrite = activityMap[row.index].isRewrite == YES;

                        $scope.disableTrnUpdate = type == 'New Business' || type == 'Renewal' || type == 'Reinstatement';
                        $scope.table.push({
                            'policy': policy,
                            'type': activity,
                            'reason': reason,
                            'date': date,
                            'premium': premium,
                            'status': status,
                            'policyId': policyId,
                            'subId': subId,
                            'subType': type,
                            'index': row.index,
                            'isWorked': isWorked,
                            'isNonUD': isNonUD,
                            'polTrnEffDt': polTrnEffDt,
                            'polTrnExpDt' : polTrnExpDt
                        });
                    }
                });
            } else {
                var rows = activityTableReader.getCheckedRows();
                for (var r = 0; r < rows.length; r++)
                {
                    var row = rows[r];
                    var policyId = row.val;
                    var policy = row.policyInfo();
                    var activity = row.activity();
                    var type = row.type();
                    var reason = row.description();
                    var status = row.status();
                    var date = row.transactionEffectiveDate();
                    var premium = row.trnPremium();
                    var subId = row.submissionId();
                    var isWorked = row.isWorked();
                    var isNonUD = row.isNonUD();
                    var polTrnEffDt = row.polTrnEffDt()
                    var polTrnExpDt = row.polTrnExpDt();
                    $scope.isRewrite = activityMap[row.index].isRewrite == YES;

                    $scope.disableTrnUpdate = type == 'New Business' || type == 'Renewal' || type == 'Reinstatement';
                    $scope.table.push({
                        'policy': policy,
                        'type': activity,
                        'reason': reason,
                        'date': date,
                        'premium': premium,
                        'status': status,
                        'policyId': policyId,
                        'subId': subId,
                        'subType': type,
                        'index': row.index,
                        'isWorked': isWorked,
                        'polTrnEffDt': polTrnEffDt,
                        'polTrnExpDt' : polTrnExpDt
                    });
                }
            }

            $scope.checkActivityTypes();

            var iter = 0;
            var count = 0;
            var isAnyActivityLocked = false;
            var rows = [];
            if (modalTable) {
                var dataTable = activityTableReader.getRows();
                angular.forEach(modalTable, function (value, key) {
                    var row = $filter('filter')(dataTable, function (element, index, array) {
                        return value.subId == element.submissionId()
                    })[0];
                    if(row) {
                        rows.push(row);
                    }
                });
            } else {
                var rows = activityTableReader.getCheckedRows();
            }
            for (var r = 0; r < rows.length; r++)
            {
                count++;
                var row = rows[r];
                var policyId = row.val;
                var lockedHid = Activities.UI.findLockedBy(row.handle);
                var policy = row.policyInfo();
                var type = row.activity();
                var reason = row.description();
                var status = row.status();
                var date = row.transactionEffectiveDate();
                var premium = row.trnPremium();
                var subId = row.submissionId();
                var lockedToOther = lockedHid != null && lockedHid != $scope.currentUser.createHid;

                var invalid = (status == 'Issued' || status == 'Declined' || status == 'Withdrawn' || status == 'Lost' || lockedToOther || status == "Closed");
                if (invalid && $scope.table.length == 1 && editAccess)
                {
                    alert('The activity you picked is invalid for this action');
                    $scope.isActivityDetailsOpen = !$scope.isActivityDetailsOpen;
                    return;
                }
                else if (invalid)
                {
                    iter++;
                }

                for (var j in $scope.table)
                {
                    var tableRow = $scope.table[r];
                    if (tableRow.subId == subId)
                    {
                        tableRow.valid = (invalid ? 'dyn/images/redx.gif' : 'dyn/images/greencheck.gif');
                        tableRow.isValid = !invalid;
                        if (invalid)
                        {
                            isAnyActivityLocked = true;
                        }
                        break;
                    }
                }
            }

            if (!editAccess)
            {
                $scope.disableUpdate = true;
                $scope.activityDetailsTitle = "View Activity Details";
                Activities.UI.hide(Activities.UI.DETAIL_SAVE);
                Activities.UI.hide(Activities.UI.DETAIL_REMIND);
                Activities.UI.hide(Activities.UI.DETAIL_UNLOCK);
                Activities.UI.hide(Activities.UI.DETAIL_SAVE_AND_SET_STATUS);
                Activities.UI.hide(Activities.UI.DETAIL_CANCEL);
                Activities.UI.show(Activities.UI.DETAIL_CLOSE);
            }

            if (isAnyActivityLocked && editAccess)
            {
                if (iter == count)
                {
                    alert('All activities you picked are invalid for this action');
                    $scope.disableUpdate = true;
                    $scope.isActivityDetailsOpen = false;
                    return;
                }
                else
                {
                    var choose = confirm(ACTIVITIES_LOCKED_CONFIRM);
                    if (choose)
                    {
                        return;
                    }
                    else
                    {
                        $scope.isActivityDetailsOpen = !$scope.isActivityDetailsOpen;
                    }
                }
            }

            $scope.errorTable = $scope.table;

            snapshots[ACTIVITY_DETAILS_SNAPSHOT_KEY] = RA.UI.takeSnapshot($scope.activityDetails);
            if ($scope.table.length == 1)
            {
                $scope.showCommentsLink = true;
                $scope.isSingleInActivityDetails = true;

                var row;
                if (modalTable) {
                    var dataTable = activityTableReader.getRows();
                    var row = $filter('filter')(dataTable, function(element, index, array) { return modalTable[0].subId == element.submissionId() })[0];
                } else {
                    var row = activityTableReader.getCheckedRows()[0];
                }
                var activityId = row.val;
                var submissionId = row.submissionId();
                Activity.findActivityDetails({"activityId": activityId, "sourceId": submissionId}, function (result)
                {
                    $scope.activityDetails = RA.Service.handleServiceResult(result, $scope);
                    $scope.disableCancel = $scope.activityDetails.reasonTypeCode == 'F';
                    $scope.cancellationTypeListMain = $scope.disableCancel ? $scope.cancellationTypeList : $scope.cancellationTypeListMidTerm;
                    if ($scope.activityDetails)
                    {
                        if ($scope.hasReminders) {
                            $scope.activityDetails.userComments = null;
                            $scope.activityComments = $scope.activityDetails.activityComments;
                            $scope.commentCount = 0;
                            for (var c = 0; c < $scope.activityComments.length; c++) {
                                if ($scope.activityComments[c].commentCategoryRefCode === 'USERCOMMNT') {
                                    $scope.commentCount++;
                                }
                            }
                            $scope.$apply();
                        }
                        else {
                            Activity.findOriginalUserCommentsBySourceId($scope.activityDetails.sourceId, function (result) {
                                $scope.activityDetails.activityComments = RA.Service.handleServiceResult(result, $scope);
                                if ($scope.activityDetails) {
                                    $scope.activityDetails.userComments = null;
                                    $scope.activityComments = $scope.activityDetails.activityComments;
                                    $scope.commentCount = 0;
                                    for (var c = 0; c < $scope.activityComments.length; c++) {
                                        $scope.commentCount++;
                                    }
                                    $scope.$apply();
                                }
                            });
                        }

                        if(submissionId) {
                            Activity.findUnderwriterHidBySourceId(submissionId, function (result) {
                                var underwriter = RA.Service.handleServiceResult(result, $scope);
                                $scope.activityDetails.underwriterHid = underwriter ? underwriter : null;
                                $scope.$apply();
                            });
                        }
                        snapshots[ACTIVITY_DETAILS_SNAPSHOT_KEY] = RA.UI.takeSnapshot($scope.activityDetails);
                        $scope.$apply();
                    }
                    else // this is unreachable code
                    {
                        $scope.activityDetails = {};
                    }
                });
            }
        }
        else
        {
            $scope.isSingleInActivityDetails = true;
            $scope.showCommentsLabel = 'Show All Comments';
            $scope.showCommentsLink = true;
            $scope.checkActivityTypes();
            // change this line back to findUserCommentsBySourceId
            if (!$scope.hasReminders) {
                Activity.findOriginalUserCommentsBySourceId($scope.activityDetails.sourceId, function (result) {
                    $scope.activityDetails.activityComments = RA.Service.handleServiceResult(result, $scope);
                    if ($scope.activityDetails) {
                        $scope.activityDetails.userComments = null;
                        $scope.activityComments = $scope.activityDetails.activityComments;
                        $scope.commentCount = 0;
                        for (var c = 0; c < $scope.activityComments.length; c++) {
                            $scope.commentCount++;
                        }
                        $scope.$apply();
                    }
                });
            }
        }

        Activities.UI.scrollModalTop('changeActivityModal');
    };

    $scope.checkActivityTypes = function ()
    {
        $scope.disableTrnEffDateFieldOnly = false;
        var foundENDT = false;
        var foundCANC = false;
        var foundRMND = false;
        var foundREIN = false;
        var foundCNRW = false;
        var foundNONR = false;
        var foundNRRC = false;
        var foundCRCH = false;
        var foundRENW = false;
        var foundOTHR = false;
        var subTypes = [];
        var typeCount = 0;
        for (var i = 0; i < $scope.table.length; i++)
        {
            var obj = $scope.table[i];
            switch (obj.type)
            {
                case ACTIVITY_TYPE_ENDORSEMENT:
                    if (!foundENDT) typeCount++;
                    foundENDT = true;
                    break;
                case ACTIVITY_TYPE_CANCELLATION:
                    if (!foundCANC) typeCount++;
                    foundCANC = true;
                    subTypes.push(obj.subType);
                    break;
                case ACTIVITY_TYPE_REMINDER:
                    if (!foundRMND) typeCount++;
                    foundRMND = true;
                    $scope.disableTrnEffDateFieldOnly = true;
                    break;
                case ACTIVITY_TYPE_REINSTATEMENT:
                    if (!foundREIN) typeCount++;
                    foundREIN = true;
                    $scope.disableTrnEffDateFieldOnly = true;
                    break;
                case ACTIVITY_TYPE_NON_RENEWAL:
                    if (!foundNONR) typeCount++;
                    foundNONR = true;
                    $scope.disableTrnEffDateFieldOnly = true;
                    break;
                case ACTIVITY_TYPE_NON_RENEWAL_REASON_CHANGE:
                    if (!foundNRRC) typeCount++;
                    foundNRRC = true;
                    $scope.disableTrnEffDateFieldOnly = true;
                    break;
                case ACTIVITY_TYPE_CANCEL_REASON_CHANGE:
                    if (!foundCRCH) typeCount++;
                    foundCRCH = true;
                    $scope.disableTrnEffDateFieldOnly = true;
                    break;
                case ACTIVITY_TYPE_NEW_BUSINESS:
                    if (!foundCNRW) typeCount++;
                    foundCNRW = obj.subType == ACTIVITY_TYPE_NBS_REWRITE;
                    $scope.disableTrnEffDateFieldOnly = true;
                    break;
                case ACTIVITY_TYPE_RENEWAL:
                    var isRewrite = obj.subType == ACTIVITY_TYPE_REN_REWRITE;
                    if (!foundCNRW && isRewrite) typeCount++;
                    foundCNRW = isRewrite;

                    if (!foundRENW && !isRewrite) typeCount++;
                    foundRENW = !isRewrite;
                    $scope.disableTrnEffDateFieldOnly = true;
                    break;
                case ACTIVITY_TYPE_TEMPORARY_REINSTATEMENT:
                    $scope.disableTrnEffDateFieldOnly = true;
                    break;
                case ACTIVITY_TYPE_REVERSE_NON_RENEWAL:
                    $scope.disableTrnEffDateFieldOnly = true;
                    break;
                case ACTIVITY_TYPE_PREM_AUDIT:
                    $scope.disableTrnEffDateFieldOnly = true;
                    break;
                default:
                    if (!foundOTHR) typeCount++;
                    foundOTHR = true;
                    break;
            }

            // For UD, if transaction is previously worked then disable the transaction effective date field regardless of transaction type
            if (obj.isWorked === "YES" && obj.isNonUD === "NO")
            {
                $scope.disableTrnEffDateFieldOnly = true;
            }
        }

        var oneType = typeCount == 1;
        $scope.hasReminders = foundRMND;
        $scope.endorsementOnly = foundENDT && oneType;
        $scope.cancellationOnly = foundCANC && oneType;
        $scope.reinstatementOnly = foundREIN && oneType;
        $scope.cancelRewriteOnly = foundCNRW && oneType;
        $scope.reminderOnly = foundRMND && oneType;
        $scope.nonRenewalOnly = foundNONR && oneType;
        $scope.nonRenewalReasonChangeOnly = foundNRRC && oneType;
        $scope.cancelReasonChangeOnly = foundCRCH && oneType;
        $scope.renewalOnly = foundRENW && oneType;

        var count = 0;
        if ($scope.cancellationOnly)
        {
            var last = null;
            for (var i = 0; i < subTypes.length; i++)
            {
                var st = subTypes[i];
                count += !last || last != st ? 1 : 0;
                last = st;
            }
        }
        $scope.hasBothCancelTypes = count > 1;

        if ($scope.reminderOnly)
        {
            Activities.UI.hide(Activities.UI.DETAIL_UNLOCK);
        }
        else
        {
            Activities.UI.show(Activities.UI.DETAIL_UNLOCK);
        }

        if (!foundRMND || ($scope.table.length > 1 && !$scope.reminderOnly))
        {
            Activities.UI.hide(Activities.UI.DETAIL_REMIND);
        }
        else
        {
            Activities.UI.show(Activities.UI.DETAIL_REMIND);
        }
    };

    $scope.setCancellationType = function ()
    {
        var transEffDate = new Date($scope.activity.transactionEffectiveDate);
        var effDate = new Date($scope.cancellationEffectiveDate);
        if (effDate && transEffDate && $scope.allEqual && transEffDate.getFullYear() == effDate.getFullYear() && transEffDate.getDate() == effDate.getDate() && transEffDate.getMonth() == effDate.getMonth())
        {
            if ($scope.selectedTypeHolder.selectedType == 'CANC')
            {
                $scope.cancellationTypeListMain = $scope.cancellationTypeList;
            }
            $scope.changeType = true;
            $scope.activity.reasonTypeCode = 'F';
            $scope.disableCancellationType = true;
        }
        else
        {
            if ($scope.selectedTypeHolder.selectedType == 'CANC')
            {
                $scope.cancellationTypeListMain = $scope.cancellationTypeListMidTerm;
            }

            if ($scope.changeType || $scope.activity.reasonTypeCode == null)
            {
                $scope.activity.reasonTypeCode = 'P';
                $scope.changeType = false;
            }
            $scope.disableCancellationType = false;
        }
    };

    $scope.validateTRNDate = function ()
    {
        var table = $scope.table;
        if (table.length > 1)
        {
            return; // shouldn't get here, but just to be safe
        }

        var row = table[0];
        var userDate = new Date($scope.activityDetails.transactionEffectiveDate);
        var policyRows = policyTableReader.getRows();
        for (var i = 0; i < policyRows.length; i++)
        {
            var policyRow = policyRows[i];
            var policy = policyRow.policyInfo().split(' ');
            var rowPolicy = row.policy.split(' ');
            if (policy[0] == rowPolicy[0] && policy[1] == rowPolicy[1] && policy[2] == rowPolicy[2])
            {
                var policyDate = new Date(policyRow.policyTerm().split('-')[0]);
            }
        }
        var isDateFlat = userDate.getFullYear() == policyDate.getFullYear() && userDate.getDate() == policyDate.getDate() && userDate.getMonth() == policyDate.getMonth();

        if (isDateFlat)
        {
            $scope.cancellationTypeListMain = $scope.cancellationTypeList;
            $scope.activityDetails.reasonTypeCode = 'F';
            Activities.UI.disable(Activities.UI.CANCEL_SUB_TYPE, true);
        }
        else
        {
            $scope.cancellationTypeListMain = $scope.cancellationTypeListMidTerm;
            if (!$scope.activityDetails.reasonTypeCode)
                $scope.activityDetails.reasonTypeCode = 'P';
            if(!$scope.disableUpdate) {
                Activities.UI.disable(Activities.UI.CANCEL_SUB_TYPE, false);
            }
        }
    };

    $scope.OnlyForExtensionActivity = function ()
    {
        Presentation.determinePolicyExtensionActivity({policySymbol: $scope.selectedPolicySymbol, isNonUD: $scope.activityRows[0][0].isNonUD}, function(result){
            $scope.isPolicyExtensionApplicable = result.data['PresentationController.determinePolicyExtensionActivity'].data;
        });

        if($scope.activity.endorsementTypeRefCode === ENDORSEMENT_TYPE_EXTENSION && $scope.isPolicyExtensionApplicable === true) {
            return true;
        }
        return false;
    };

    $scope.fillOutExtensionTrnEffDate = function ()
    {
        Presentation.determinePolicyExtensionActivity({policySymbol: $scope.selectedPolicySymbol, isNonUD: $scope.activityRows[0][0].isNonUD}, function(result){
            console.log(result);
            $scope.isPolicyExtensionApplicable = result.data['PresentationController.determinePolicyExtensionActivity'].data;
        });

        if($scope.activity.endorsementTypeRefCode === ENDORSEMENT_TYPE_EXTENSION  && $scope.isPolicyExtensionApplicable === true) {
            // This is to return a most recent Submission Transaction Effective Date.
            var activityRows = $scope.activityRows;
            for (var i = 0; i < activityRows.length; i++)
            {
                var arrayRow = activityRows[i]; // activityRows are fetching in a submission Trn Eff Date sequence order.
                for (var j = 0; j <= arrayRow.length; j++) {
                    var row = arrayRow[j];
                    if (row && row.status === "Issued") {
                        $scope.activity.transactionEffectiveDate = row.polTermExpDt;
                        break;
                    }
                }
            }
        }
        if($scope.activity.endorsementTypeRefCode !== ENDORSEMENT_TYPE_EXTENSION && $scope.previouslySelectedEndActivityType === "EXT") {
            $scope.activity.transactionEffectiveDate = null;
        }
        if ($scope.activity.endorsementTypeRefCode !== ENDORSEMENT_TYPE_EXTENSION) $scope.activity.policyTermExpirationDate = null;
        $scope.previouslySelectedEndActivityType = $scope.activity.endorsementTypeRefCode;
    };

    $scope.validateExplanationReason = function ()
    {
        var reason = $scope.activity.reasonRefCode;
        if (reason == 'OTH' || reason == 'OTHER')
        {
            Activities.UI.addClass(Activities.UI.EXPLANATION_LABEL, 'required');
        }
        else
        {
            Activities.UI.removeClass(Activities.UI.EXPLANATION_LABEL, 'required');
        }
    };

    $scope.validatePendingDate = function ()
    {
        $scope.disablePendingDate = $scope.activityDetails.pendingDate && new Date(RA.UI.doMakeDateMMDDYYYY($scope.activityDetails.pendingDate)) <= new Date();
    };

    $scope.copySubmission = function (policyId) {
        RA.Session.removeSubmissionId();
        RA.Session.removeQuoteId();
        RA.Session.removeSelectedQuoteId();
        RA.Session.removeSubmissionIdSearch();
        $rootScope.showPageLoading();

        for (var i = 0; i < $scope.policyTermRows.length; i++)
        {
            var row = $scope.policyTermRows[i];
            if (row.policyId == policyId)
            {
                //find the submissionId of latest worked activity on the most recent mod
                Activity.findCopyEligibleSubmissionIdByPolicyId(policyId, function (result)
                {
                    var copyEligibleSubmissionId = RA.Service.handleServiceResult(result, $scope);

                    RA.Session.addSubmissionIdCopy(copyEligibleSubmissionId);
                    $scope.applyLayout('submission');
                });
                break;
            }
        }
    };

    $scope.toggleCreateSelectModal = function ()
    {
        $scope.isCreateSelectOpen = !$scope.isCreateSelectOpen;
        if ($scope.isCreateSelectOpen)
        {
            RA.UI.doClearMessages($scope);
            $scope.table = [];
            var last = 0;
            var list;
            var rows = policyTableReader.getCheckedRows();
            for (var r = 0; r < rows.length; r++)
            {
                var row = rows[r];
                var policy = row.policyInfo();
                var term = row.policyTerm();
                var type = row.status();
                var policyId = row.val;
                var symbolLabel = idToSymbol[policyId];
                // Correct Defect where all checked Policy ID's are not in idToSymbol Array (Cancel Rewrite Defect)
                if(symbolLabel) {
                    if (last === 0 || $scope.activityTypesMaster[symbolLabel].length < last) {
                        list = $scope.activityTypesMaster[symbolLabel];
                        last = list.length;
                    }
                }
                $scope.table.push({"policy": policy, "type": type, "index": row.index, "term": term});
            }
            $scope.selectedTypeHolder.selectedType = "";
            $scope.activityTypes = list;
            $scope.previouslySelectedEndActivityType = null; // This is to reset the indicator upon selecting the Create Activity button
        }
    };
    $scope.returnFromBindDetail = function(result) {
//        var data = RA.Service.handleServiceResult(result, $scope);
//      handleServiceResult cannot parse the result without an out of memory exceptions
        var data = result.data;
        var messages = result.messages;

        for(var key in result.data)
        {
            if(key.search(/Controller\.*/) > -1)
            {
                var resultData = result.data[key];
                messages = resultData.messages;
                data = resultData.data;
                break;
            }
        }
        if (messages) {
            RA.UI.doDisplayUIMessages(messages, $scope);
        }
        $rootScope.showMainContent = true;
        $rootScope.mainDisplay.show.left = true;
        $rootScope.mainDisplay.show.leftOther = false;
        $rootScope.mainDisplay.show.banner = true;
        sessionStorage.removeItem('dynamicIds');
        sessionStorage.removeItem('instSubmission');
        $rootScope.hideRightCharm = false;
        $rootScope.mainDisplay.show.charms = MANAGE_ACTIVITIES_PAGE_TITLE;
        if (data !== "cancel") {
            $scope.doRefreshPage({data: [], status: true}, false, null, true, null, $scope.reflowTheads);
        }
        $timeout($scope.reflowTheads);
    };

    $scope.setTrnStatusReturn = function(status) {
        /// this is the return point for the setTrnStatus modal
        if (status.cancelled)
        {
            $scope.doSetTrnStatusCancel();
            return;
        }
        else if (status.resultStatus)
        {
            delete status.result['@type'];
            $scope.doToggleTRNStatusModal();

            var callback = null;
            if ($scope.changeDetailsTable) {
                callback = function()
                {
                    $scope.toggleActivityDetailsModal($scope.changeDetailsTable);
                }
            }

            $scope.doRefreshPage({data: [], status: true}, false, null, true, null, callback);

            $timeout(function () {
                angular.forEach(status.result, function(result) {
                    RA.UI.doDisplayUIMessages(result, $scope);
                });
                $rootScope.hidePageLoading();
            },1000);
        }
        else
        {
            $scope.doRefreshPage({data:[],status:true}, false, null, true);
            $rootScope.hidePageLoading();
        }
    };

    $scope.doSetTrnStatusCancel = function()
    {
        $scope.cancelFunction(DISPOSITION_SNAPSHOT_KEY, $scope.disposition, null, $scope.doToggleTRNStatusModal);
    };

    var findActivityByPolicyIdAndActivityId = function (policyId,  activityId) {
        var policyIterator, activityIterator, policyLength, activityLength, activityList, activity, firstActivity;
        for (policyIterator = 0, policyLength = $scope.activityRows.length; policyIterator < policyLength; policyIterator++) {
            activityList = $scope.activityRows[policyIterator];
            //the below code only searches the activity list for the given activity id if the policy id of the first item in the list matches
            //this prevents unnecessarily searching through the whole list
            //the rewrite half of a cancel/rewrite will have a different policy id but be in the same list, hence the exception below
            firstActivity = activityList[0];
            if (firstActivity && (firstActivity.policyId == policyId || firstActivity.isRewrite === YES)) {
                for( activityIterator = 0, activityLength = activityList.length; activityIterator < activityLength; activityIterator++) {
                    activity = activityList[activityIterator];
                    if (activity.activityId == activityId) {
                        return activity;
                    }
                }
            }
        }
    };

    $scope.doToggleTRNStatusModal = function (modalTable)
    {
        if (unRevisedDispositionStatusList)
        {
            $scope.dispositionStatusList = unRevisedDispositionStatusList;
        }
        $scope.disposition = {"recaptureIndicator": FALSE, "submissionId": $scope.disposition.submissionId};
        var findSubmissionId = null;

        if ($scope.isTRNStatusOpen)
        {
            $scope.isSingle = false;
            $scope.isTRNStatusOpen = !$scope.isTRNStatusOpen;
        }
        else
        {
            RA.UI.doClearMessages($scope);
            $rootScope.showPageLoading();
            if ($scope.isSingle) {
                findSubmissionId = $scope.disposition.submissionId;
            } else if(modalTable) {
                $scope.table = [];
                angular.forEach(modalTable, function(row) {
                    var activity = findActivityByPolicyIdAndActivityId(row.policyId, row.activityId);
                    findSubmissionId = activity.submissionId;
                    $scope.table.push(createTRNStatusEntryFromActivity(activity));
                });
            } else {

                $scope.table = [];
                var rows = activityTableReader.getCheckedRows();
                angular.forEach(rows, function (jqueryRow) {
                    var activity = findActivityByPolicyIdAndActivityId(jqueryRow.policyId(), jqueryRow.val);

                    findSubmissionId = activity.submissionId;
                    $scope.table.push(createTRNStatusEntryFromActivity(activity));
                });
                $scope.errorTable = $scope.table;
                snapshots[DISPOSITION_SNAPSHOT_KEY] = RA.UI.takeSnapshot($scope.disposition);
            }

            //  Using Submission ID, initiate async findSubmission call to retrieve Policy Term Expiration Date.
            //  Needed to Populate Recapture Review Date.
            async.series(
                [
                    function (callback)
                    {
                        Submission.findSubmission(findSubmissionId, function (result)
                        {
                            var data = RA.Service.handleServiceResult(result, $scope);
                            callback(null, data);
                        });
                    }
                ],
                function (err, result)
                {
                    if (result != null)
                    {
                        $scope.submission = result[0];
                        $scope.customerName = RA.Session.getInsuredName();
                        angular.forEach($scope.table, function(value) {
                           value.insuredName = $scope.customerName;
                        });
                    }
                    $scope.isTRNStatusOpen = !$scope.isTRNStatusOpen;
                    $rootScope.hidePageLoading();
                }
            );

        }
        Activities.UI.scrollModalTop('transactionStatusModal');
    };

    $scope.toggleViewHistoryModal = function ()
    {
        $scope.isViewHistoryOpen = !$scope.isViewHistoryOpen
    };

    $scope.toggleActivityForm = function (select)
    {
        if ($scope.isCreateActivityOpen)
        {
            RA.UI.doClearMessages($scope);
            Activities.UI.show(Activities.UI.CREATE_BUTTON);
        }
        $scope.errorTable = [];
        var policies = [];
        var invalid = [];
        var index = 0;
        var rows = policyTableReader.getCheckedRows();
        for (var r = 0; r < rows.length; r++)
        {
            var row = rows[r];
            var policy = row.policyInfo().split(' ');
            var status = row.status();
            if (policy[1] === 'null' || policy[1] === '' || policy[1] === '-')
            {
                invalid.push({'index': index, 'id': row.val, 'policy': policy});
                continue;
            }
            if ($scope.selectedTypeHolder.selectedType === 'REN' && $scope.policyTermRows[row.index].continuousInd !== 1)
            {
                var buName = RA.Session.getBusinessUnit();
                if ('Aviation' != buName)
                {
                    invalid.push({'index': index, 'id': row.val, 'policy': policy});
                }
                continue;
            }
            policies.push({
                'policyNumber': policy[1],
                'policyMod': policy[2],
                'policySymbol': policy[0],
                'policyVersion': policy[3],
                'policyType': $scope.selectedTypeHolder.selectedType,
                'policySubType': $scope.activity.premiumAuditTypeRefCode
            });
            index++;
        }

        var holderSelectedType = $scope.selectedTypeHolder.selectedType;
        var labelShouldBeProcess = [
                TRANSACTION_TYPE_REVERSE_NON_RENEWAL
            ].indexOf(holderSelectedType) !== -1;

        if(labelShouldBeProcess){
            $scope.createButtons[0].label = "Process";
        }
        else{
            $scope.createButtons[0].label = "Create";
        }

        var isReminder = $scope.selectedTypeHolder.selectedType === 'REMINDER';
        if (isReminder)
        {
            for (var i = 0; i < $scope.table.length; i++)
            {
                var row = $scope.table[i];
                row.isValid = true;
                row.valid = 'dyn/images/greencheck.gif';
            }
            $scope.activityText = '';
            if (!$scope.isCreateActivityOpen)
            {
                $scope.toggleCreateSelectModal();
                $scope.toggleCreateActivityModal();
            }
            Activities.UI.show(Activities.UI.CREATE_BUTTON);
            return;
        }

        Activity.doCheckValidCreate(policies, function (result)
        {
            var data = RA.Service.handleServiceResult(result, $scope);
            var isValid = true;
            for (var d in data)
            {
                if (!data[d])
                {
                    isValid = false;
                }
                else
                {
                    for (var d in $scope.table)
                    {
                        var tableRow = $scope.table[d];
                        tableRow.isValid = true;
                        tableRow.valid = 'dyn/images/greencheck.gif';
                    }
                }
            }

            var nonPolicy = invalid.length > 0;
            if (!isValid || nonPolicy)
            {
                var errors = 0;
                for (var t in $scope.table)
                {
                    var tableRow = $scope.table[t];
                    if (isReminder)
                    {
                        tableRow.isValid = true;
                        tableRow.valid = 'dyn/images/greencheck.gif';
                        continue;
                    }

                    var found = false;
                    for (var d in data)
                    {
                        var policy = d;
                        if (tableRow.policy == policy)
                        {
                            found = true;
                            errors += data[d] ? 0 : 1;
                            tableRow.isValid = data[d];
                            tableRow.valid = data[d] ? 'dyn/images/greencheck.gif' : 'dyn/images/redx.gif';
                        }

                        if (!found)
                        {
                            tableRow.isValid = isReminder;
                            tableRow.valid = (tableRow.isValid ? 'dyn/images/greencheck.gif' : 'dyn/images/redx.gif');
                        }
                    }
                }

                $scope.errorTable = $scope.table;
                if (errors === $scope.table.length || invalid.length === $scope.table.length)
                {
                    for (var i = 0; i < $scope.table.length; i++)
                    {
                        var row = $scope.table[i];
                        row.isValid = false;
                        row.valid = 'dyn/images/redx.gif';
                    }
                    $scope.activityText = 'The new ' + RA.Controller.getActivityText($scope.selectedTypeHolder.selectedType) + ' activities cannot be created for all of the policies selected because they are not in a Bound or Issued status.';
                    Activities.UI.hide(Activities.UI.CREATE_BUTTON);
                }
                else if (errors > 0)
                {
                    $scope.activityText = 'The new ' + RA.Controller.getActivityText($scope.selectedTypeHolder.selectedType) + ' activities cannot be created for the following policies because they are not in a Bound or Issued status. Activities can be created for the policies with this icon:';
                }
                else
                {
                    $scope.activityText = '';
                }
                if (!$scope.isCreateActivityOpen)
                {
                    $scope.toggleCreateSelectModal();
                    $scope.toggleCreateActivityModal();
                }
                $scope.$apply(); // TODO - get rid of this
            }
            else
            {
                if (!$scope.isCreateActivityOpen)
                {
                    $scope.toggleCreateSelectModal();
                    $scope.toggleCreateActivityModal();
                }
                $scope.$apply(); // TODO - get rid of this
            }
        });
    };

    $scope.toggleShowComments = function ()
    {
        $scope.showComments = !$scope.showComments;
        $scope.showCommentsLabel = $scope.showComments ? 'Hide Comments' : 'Show All Comments';
        if ($scope.showComments)
        {
            Activities.UI.scrollComments('#commentSection')
        }
    };

    $scope.removeRow = function (index, toggle, tableId)
    {
        var temp = [];
        var uncheck = $scope.table[index].index;
        for (var i = 0; i < $scope.table.length; i++)
        {
            if (i == index) continue;

            temp.push($scope.table[i]);
        }
        $scope.table = temp;

        if ($scope.table.length == 0)
        {
            toggle.apply();
        }

        var count = 0;
        var reader = policyTableReader.isReader(tableId) ? policyTableReader : activityTableReader;
        var rows = reader.getRows();
        for (var r = 0; r < rows.length; r++)
        {
            if (count++ == uncheck)
            {
                rows[r].handle.click();
                break;
            }
        }
    };

    $scope.toggleConfirmModal = function ()
    {
        $scope.isConfirmOpen = !$scope.isConfirmOpen;
    };
    $scope.toggleConfirmWorkModal = function ()
    {
        $scope.isConfirmWork = !$scope.isConfirmWork;
    };

    $scope.toggleConfirmEndorsementModal = function ()
    {
        $scope.isConfirmEndorsementOpen = !$scope.isConfirmEndorsementOpen;
    };

    $scope.setConfirmValue = function (val)
    {
        $scope.confirm = val;
        $scope.toggleConfirmModal();
        $scope.confirmApply.apply();
    };
    $scope.setConfirmWorkValue = function (val)
    {
        $scope.toggleConfirmWorkModal();
        if(val) {
            $scope.continueWorkActivity();
        }
    };

    $scope.setConfirmEndorsementValue = function (buttonPicked)
    {
        switch (buttonPicked)
        {
            case "YES":
                for (var act in $scope.endorsementActivities)
                {
                    $scope.endorsementActivities[act]['@type'] = 'com.gaic.bue.uwd.ra.common.dto.activities.ActivityDto';
                    $scope.endorsementActivities[act].issuedRenewals = {
                        '@type': 'java.util.ArrayList',
                        '@items': $scope.issuedRenewalsData
                    };
                }
                $scope.toggleConfirmEndorsementModal();
                $scope.createActivities($scope.endorsementActivities, true);
                break;
            case "NO":
                $scope.toggleConfirmEndorsementModal();
                $scope.createActivities($scope.endorsementActivities, true);
                break;
            case "CANCEL":
                $scope.toggleConfirmEndorsementModal();
                break;
        }

    };

    $scope.setSubmissionSessionVars = function ()
    {
        RA.Session.addCurrentUserHid($scope.currentUser.createHid);
    };

    $scope.setSessionVars = function (event, page)
    {
        sessionStorage['mainDisplay'] = page;
    };

    $scope.updateDispositionStatus = function ()
    {
        $scope.disableRecapture = $scope.disposition.recaptureIndicator == FALSE;

        // If disableRecapture, set recaptureReviewDate to null
        $scope.disposition.recaptureReviewDate = null;
        if (!$scope.disableRecapture && $scope.defaultDisposition)
        {
            $scope.disposition.recaptureReviewDate = $scope.defaultDisposition.recaptureReviewDate;
        }
    };

    $scope.viewModsForPolicy = function viewModsForPolicy(policy)
    {
        var row = policyTableReader.getCheckedRows()[0];
        var policyInfo = row.policyInfo();
        var policyNumber = policyInfo.split(' ')[1];

        $scope.showPageLoading();

        Activity.doViewMultipleMods([policyNumber], function (result)
        {
            var policyVariants = RA.Service.handleServiceResult(result, $scope);
            var foundPolicyVariant;

            angular.forEach(policyVariants, function (policyVariant)
            {
                if (!foundPolicyVariant)
                {
                    if (policyVariant.policyMod == policy.policyMod && policyVariant.policyVersion == policy.policyVersion)
                    {
                        foundPolicyVariant = policyVariant;
                        foundPolicyVariant.hideDropDown = true;
                    }
                }
            });

            if (foundPolicyVariant)
            {
                var policyConcat = policy.policySymbol + ' ' + policyNumber;

                for (var i = 0; i < $scope.policyTermRows.length; i++)
                {
                    if ((policy.policySymbol == $scope.policyTermRows[i].policySymbol)
                        && (policy.policyNumber == $scope.policyTermRows[i].policyNumber))
                    {
                        $scope.policyTermRows.splice(i + 1, 0, foundPolicyVariant);
                        Activities.UI.buildPolicyTable($scope, $compile);
                        $("#policyCheckBox" + (i + 2)).prop("checked", true);
                        Activities.UI.disable(Activities.UI.VIEW_ACTIVITIES, false);
                        Activities.UI.disable(Activities.UI.CREATE_ACTIVITY, false);
                        Activities.UI.disable(Activities.UI.VIEW_MODS_BUTTON, false);
                        Activities.UI.check(Activities.UI.POLICY_ALL, false);
                        $scope.findActivitiesForPolicy();
                        idToSymbol[foundPolicyVariant.policyId] = foundPolicyVariant.symbol;
                        break;
                    }
                }
            }
            if (!editAccess)
            {
                Activities.UI.disable(Activities.UI.CREATE_ACTIVITY, true);
            }
            $scope.hidePageLoading();
        });
    };

    $scope.viewModsForMultiplePolicies = function viewModsForMultiplePolicies()
    {
     isPolicyCheckedMap = {};
     var selectedRowsPolicyInfo = [];
     var policyId, v, policyInfo, checkedRowsLength;
     var rows = policyTableReader.getCheckedRows();
     checkedRowsLength = rows.length;
        for (v = 0; v < checkedRowsLength; v++) {
            policyId = rows[v].val;
            isPolicyCheckedMap[policyId] = true;
            policyInfo = rows[v].policyInfo();
            selectedRowsPolicyInfo.push(policyInfo)
        }
        $scope.viewHideModsForPolicies(selectedRowsPolicyInfo)
    };

    viewAllMods = function (anchor, policyId)
    {
        isPolicyCheckedMap = {};
        var selectedRowPolicyInfo = [];
        var policyInfo = policyTableReader.policyInfo(anchor);
        isPolicyCheckedMap[policyId] = true;
        selectedRowPolicyInfo.push(policyInfo);
        $scope.viewHideModsForPolicies(selectedRowPolicyInfo)
    };

    $scope.viewHideModsForPolicies = function viewHideModsForPolicies(policiesToViewHide)
    {
    var isHit,policySymbol,policyNumber,policyInfo,policyId, v, i, row, rows, policiesToViewHideLength, policyTermRowsLength, checkedRowsRemaining;
    var policyNumbers = [];
    var shouldHideMods = false;
    var indexesToRemove = {};
        policiesToViewHideLength = policiesToViewHide.length;
        for (v = 0; v < policiesToViewHideLength; v++)
        {
            policyInfo = policiesToViewHide[v];
            policyNumber = policyInfo.split(' ')[1];
            policySymbol = policyInfo.split(' ')[0];
            isHit = false;
            policyTermRowsLength = $scope.policyTermRows.length;
            for (i = 0; i < policyTermRowsLength; i++)
            {
                row = $scope.policyTermRows[i];
                if (row.policySymbol === policySymbol && row.policyNumber === policyNumber)
                {
                    if (isHit)
                    {
                        indexesToRemove[i] = true;
                        shouldHideMods = true;
                        continue;
                    }
                    isHit = true;
                }
            }
            policyNumbers.push(policyNumber);
        }

        if(shouldHideMods){

            Object.keys(indexesToRemove)
                .sort(highToLow)
                .forEach(function(index){
                    $scope.policyTermRows.splice(index, 1);
                });
            $scope.refreshAfterPolicyTermRows();

            Activities.UI.buildPolicyTable($scope, $compile);
            if (showSelectedPolicyEntriesOnly){
                checkedRowsRemaining = policyTableReader.getCheckedRows();
                Activities.UI.text('selectedPoliciesButton', 'Selected (' + checkedRowsRemaining.length + ')');
            }
            return
        }

        if (policyNumbers.length > 0) // mods selected --- any showing not selected will be hidden
        {
            $scope.viewModsText = 'Hide All Mods/Versions';
            $scope.viewMultipleFunction = $scope.hideMods;
            var dropCounter = 0;
            Activity.doViewMultipleMods(policyNumbers, function (result)
            {
                var data = RA.Service.handleServiceResult(result, $scope);

                if (!data || data.length === 0)
                {
                    alert('No other Mods exist on this Policy');
                    if (showSelectedPolicyEntriesOnly){
                        Activities.UI.text('selectedPoliciesButton', 'Selected (' + policyNumbers.length + ')');
                    }
                    return;
                }
                var polRows = [];
                var skip = {};
                policyTermRowsLength =  $scope.policyTermRows.length;
                for (var r = 0; r < policyTermRowsLength; r++)
                {
                    var found = false;
                    var policyRow = $scope.policyTermRows[r];
                    if (skip[policyRow.policyNumber])
                        continue;

                    for (var d = 0; d < data.length; d++)
                    {
                        dropCounter = 0;
                        if (policyRow.policyId == data[d].policyId)
                        {
                            found = true;
                            for (var d2 = 0; d2 < data.length; d2++)
                            {
                                var line = data[d2];
                                if (line.policyNumber == policyRow.policyNumber)
                                {
                                    polRows.push(data[d2]);
                                    skip[line.policyNumber] = true;
                                    if (dropCounter > 0)
                                    {
                                        line.hideDropDown = true;
                                    }
                                    dropCounter++;
                                }
                                // Add all PolicyIDs to Map
                                idToSymbol[line.policyId] = line.symbol;
                            }
                            break;
                        }
                    }
                    if (!found)
                        polRows.push(policyRow);
                }
                if ($scope.policyTermRows.length === polRows.length)
                {
                    alert('No other Mods exist on this Policy');
                    if (showSelectedPolicyEntriesOnly){
                        Activities.UI.text('selectedPoliciesButton', 'Selected (' + policyNumbers.length + ')');
                    }
                    return;
                }
                $scope.policyTermRows = polRows;
                $scope.refreshAfterPolicyTermRows();
                Activities.UI.buildPolicyTable($scope, $compile);

                rows = policyTableReader.getCheckedRows();
                var polLength = rows.length;
                Activities.UI.disable(Activities.UI.VIEW_ACTIVITIES, polLength === 0);
                Activities.UI.disable(Activities.UI.CREATE_ACTIVITY, polLength === 0);
                Activities.UI.disable(Activities.UI.VIEW_MODS_BUTTON, polLength === 0);
                Activities.UI.check(Activities.UI.POLICY_ALL, false);

                if (!editAccess)
                {
                    Activities.UI.disable(Activities.UI.CREATE_ACTIVITY, true);
                }
            });
            anyModsShowing = true;
        }
    };

    $scope.viewMultipleFunction = $scope.viewModsForMultiplePolicies;

    $scope.hideMods = function hideMods()
    {
        var submissionDto =
        {
            'customerNumber': $scope.customerNumber,
            'policyTermEffectiveDate': $scope.selectedPolicyEffectiveDate,
            'policyTermExpirationDate': $scope.selectedPolicyExpirationDate,
            'submissionId': EMPTY_STRING,
            policyInfo: {}
        };

        Activity.findPolicyTerms([submissionDto], function (result)
        {
            $scope.doRefreshPage(result, true);
        });
        $scope.viewModsText = 'View All Mods/Versions';
        $scope.viewMultipleFunction = $scope.viewModsForMultiplePolicies;
    };

    filterTable = function (tableBodyId, text)
    {
        var dataTable = tableBodyId == $scope.policyTermTable ? policyTableReader.toDataTable() : activityTableReader.toDataTable();
        dataTable.fnFilter(text);
        if (tableBodyId === Activities.UI.POLICY_TABLE) {
            //if the policy table height changed, we need to fix the header for the activities table
            $('#' + Activities.UI.ACTIVITY_TABLE).trigger('reflow');
        }
    };

    $scope.continueWorkActivity = function () {
        $rootScope.confirmTransaction($scope.submissionId, function(submissionId){
            $scope.workActivity(submissionId);
        });
    };

    handleMenuAction = function (anchor, action)
    {
        var mainDisplay;
        var activityId = activityTableReader.checkbox(anchor);
        if ($scope.isSingle && $scope.changeDetails) {
            activityId = $scope.selectedActivityId;
        }
        $scope.policyInfo = activityTableReader.policyInfo(anchor);
        $scope.contextMenuAnchor = anchor;

        var polSplit = $scope.policyInfo.split(' ');
        var policySymbol = polSplit[0];
        var policyNumber = polSplit[1];
        var policyMod = polSplit[2];

        var policyId = activityTableReader.policyId(anchor);
        var submissionId = activityTableReader.submissionId(anchor);
        var activity = activityTableReader.activity(anchor);
        var subType = activityTableReader.type(anchor);
        var reason = activityTableReader.description(anchor);
        var status = activityTableReader.status(anchor);
        var date = activityTableReader.transactionEffectiveDate(anchor);
        var premium = activityTableReader.trnPremium(anchor);
        var isWorked = activityTableReader.isWorked(anchor);
        var isNonUD = activityTableReader.isNonUD(anchor);
        var polTrnEffDt = activityTableReader.polTrnEffDt(anchor);
        var polTrnExpDt = activityTableReader.polTrnExpDt(anchor);
        $scope.historyType = activity;

        var rowIndex = activityTableReader.findIndex(anchor);
        var lockedHid = Activities.UI.findLockedBy(anchor);
        //Remove Selected Quoted Id which was added in Quote List if it exist
        RA.Session.removeSelectedQuoteId();
        var allPrevSubmissionsIssued = true;

        $scope.disableTrnUpdate = activity == 'New Business' || activity == 'Renewal' || activity == 'Reinstatement';
        switch (action)
        {
            case VIEW_SUBMISSION:
                RA.Session.addViewOnlyMode($rootScope.currentUser.createHid == lockedHid ? NO : YES);
                RA.Session.addViewOnlyModeCustNo(YES);
                RA.Session.addSubmissionIdSearch(submissionId);
                RA.Session.addSessionMode(SESSION_SUBMISSION_MODE);
                $scope.applyLayout('submission');
                break;
            case WORK_SUBMISSION:
                $scope.submissionId = submissionId;
                RA.Session.addViewOnlyModeCustNo(NO);
                allPrevSubmissionsIssued = true;
                if(activity===ACTIVITY_TYPE_RENEWAL){
                    var isFirstTime = false;
                    Submission.isFirstTimeWorking(submissionId, function(res){
                        isFirstTime = RA.Service.handleServiceResult(res, $scope);
                        if(isFirstTime) {
                            Submission.hasPrevActiveNotIssuedPolicy(policySymbol, policyNumber, policyMod, function (result) {
                                allPrevSubmissionsIssued = RA.Service.handleServiceResult(result, $scope);
                                if(allPrevSubmissionsIssued){
                                    $scope.continueWorkActivity();
                                }
                                else{
                                    $scope.toggleConfirmWorkModal();
                                    $scope.$apply();
                                }
                            });
                        }
                        else{
                            $scope.continueWorkActivity();
                        }
                    });
                }
                else {
                    $scope.continueWorkActivity();
                }
                break;
            case CHANGE_DETAIL:
                $scope.activityDetailsTitle = "Change Activity Details";
                Activities.UI.show(Activities.UI.DETAIL_SAVE);
                Activities.UI.show(Activities.UI.DETAIL_REMIND);
                Activities.UI.show(Activities.UI.DETAIL_UNLOCK);
                Activities.UI.show(Activities.UI.DETAIL_SAVE_AND_SET_STATUS);
                Activities.UI.show(Activities.UI.DETAIL_CANCEL);
                Activities.UI.hide(Activities.UI.DETAIL_CLOSE);
                RA.UI.doClearMessages($scope);
                $scope.isRewrite = activityMap[rowIndex].isRewrite == YES;
                $scope.pageLoaded = NO;
                $scope.isSingle = true;
                $scope.table = [];
                $scope.table.push({
                    'policy': $scope.policyInfo,
                    'type': activity,
                    'reason': reason,
                    'date': date,
                    'premium': premium,
                    'status': status,
                    'subType': subType,
                    'index': rowIndex,
                    'isWorked': isWorked,
                    'isNonUD': isNonUD,
                    'polTrnEffDt': polTrnEffDt,
                    'polTrnExpDt': polTrnExpDt
                });
                $scope.disableUpdate = Activities.UI.html(anchor) == 'View Details...';

                var row = $scope.table[0];
                var lockedToOther = lockedHid != null && lockedHid != $scope.currentUser.createHid;
                var invalid = (row.status === "Issued" || row.status === "Declined" || row.status === "Withdrawn" || row.status === "Lost" || lockedToOther === true);
                row.valid = (invalid) ? 'dyn/images/redx.gif' : 'dyn/images/greencheck.gif';

                Activity.findActivityDetails({"activityId": activityId, "sourceId": submissionId}, function (result)
                {
                    $scope.activityDetails = RA.Service.handleServiceResult(result, $scope);
                    if ($scope.activityDetails)
                    {
                        $scope.activityDetails.userComments = null;
                        $scope.policyId = policyId;
                        $scope.activityComments = $scope.activityDetails.activityComments;
                        $scope.commentCount = 0;
                        for (var c = 0; c < $scope.activityComments.length; c++)
                        {
                            if ($scope.activityComments[c].commentCategoryRefCode == 'USERCOMMNT')
                            {
                                $scope.commentCount++;
                            }
                        }

                        if (submissionId != EMPTY_STRING)
                        {
                            $scope.activityDetails.sourceId = submissionId;
                        }

                        $scope.isSingle = true;
                        $scope.toggleActivityDetailsModal();
                    }
                    else
                    {
                        $scope.activityDetails = {"activityId": activityId};
                        $scope.toggleActivityDetailsModal();
                    }
                    $scope.pageLoaded = YES;
                    snapshots[ACTIVITY_DETAILS_SNAPSHOT_KEY] = RA.UI.takeSnapshot($scope.activityDetails);
                    if ($scope.disableUpdate)
                    {
                        $scope.activityDetailsTitle = "View Activity Details";
                        Activities.UI.hide(Activities.UI.DETAIL_SAVE);
                        Activities.UI.hide(Activities.UI.DETAIL_REMIND);
                        Activities.UI.hide(Activities.UI.DETAIL_SAVE_AND_SET_STATUS);
                        Activities.UI.hide(Activities.UI.DETAIL_UNLOCK);
                        Activities.UI.hide(Activities.UI.DETAIL_CANCEL);
                        Activities.UI.show(Activities.UI.DETAIL_CLOSE);
                    }

                    if(submissionId) {
                        Activity.findUnderwriterHidBySourceId(submissionId, function (result) {
                            var underwriter = RA.Service.handleServiceResult(result, $scope);
                            $scope.activityDetails.underwriterHid = underwriter ? underwriter : null;
                            $scope.$apply();
                        });
                    }
                    $scope.$apply();
                });
                break;
            case SET_TRANSACTION_STATUS:
                $scope.isSingle = true;
                $scope.table = [];
                var activity = findActivityByPolicyIdAndActivityId(policyId, activityId);
                $scope.table.push({
                    "policy": activity.policy,
                    "type": activity.activity,
                    "reason": activity.activityReasonComments,
                    "date": activity.trnEffectiveDate,
                    "status": activity.status,
                    "subId": activity.submissionId,
                    "index": activity.index,
                    "lockHid": activity.unlockedDate?null:activity.lockedByHid,
                    "lockName": activity.lockedByName,

                });
                $scope.disposition.submissionId = submissionId;
                $scope.doToggleTRNStatusModal();
                break;
            case UNLOCK:
                unlockActivities(rowIndex);
                break;
            case VIEW_SUPPORTING_DOCUMENTS:
                RA.Controller.viewDocumentsMyfile($scope.myFileLink, 'SubmissionID=' + submissionId);
                break;
            case VIEW_POLICY_DOCUMENTS:
                RA.Controller.viewDocumentsMyfile($scope.myFileLink, 'PolicyNumber=' + policyNumber + '&Symbol=' + policySymbol + '&MOD=' + policyMod);
                break;
            case VIEW_ACCOUNT_DOCUMENTS:
                RA.Controller.viewDocumentsMyfile($scope.myFileLink, 'CustomerNumber=' + $scope.customerNumber);
                break;
            case VIEW_HISTORY:
                async.auto
                (
                    {
                        comments: function (callback)
                        {
                            if (activity == 'Reminder')
                            {
                                Activity.findAuditCommentsForReminder(activityId, function (result)
                                {
                                    callback(null, RA.Service.handleServiceResult(result, $scope));
                                });
                            }
                            else
                            {
                                Activity.findAuditComments(submissionId, function (result)
                                {
                                    callback(null, RA.Service.handleServiceResult(result, $scope));
                                });
                            }
                        }
                    }, function (err, results)
                    {
                        $scope.auditComments = results.comments;
                        openViewHistory();
                        $scope.$apply();
                    }
                );
                break;
            case REOPEN_ACTIVITY:
                $rootScope.showPageLoading();
                Submission.doReopenSubmissionById([submissionId], function (result)
                {
                    RA.UI.doClearMessages($scope);
                    var data = RA.Service.handleServiceResult(result, $scope);
                    if (data) {
                        $scope.doRefreshPage(result);
                    } else {
                        $scope.reflowTheads();
                        $rootScope.hidePageLoading();
                    }
                });
                break;
            case VIEW_ACTIVITIES:
                var clickedRowValue = policyTableReader.checkbox(anchor);
                var rows = policyTableReader.getRows();
                for (var i = 0; i < rows.length; i++)
                {
                    var row = rows[i];
                    if (row.val === clickedRowValue)
                    {
                        Activities.UI.check(row.handle[0].id, true);
                    }
                    else if(row.checked)
                    {
                        Activities.UI.check(row.handle[0].id, false);
                    }
                }
                $scope.findActivitiesForPolicy();
                $timeout(angular.noop);
                break;
            case CREATE_ACTIVITY:
                var clickedRowValue = policyTableReader.checkbox(anchor);
                var rows = policyTableReader.getRows();
                for (var i = 0; i < rows.length; i++)
                {
                    var row = rows[i];
                    if (row.val === clickedRowValue)
                    {
                        Activities.UI.check(row.handle[0].id, true);
                    }
                    else if(row.checked)
                    {
                        Activities.UI.check(row.handle[0].id, false);
                    }
                }
                $scope.toggleCreateSelectModal();
                $timeout(angular.noop);
                break;

            case COPY_SUBMISSION:
                var clickedRowValue = policyTableReader.checkbox(anchor);
                var rows = policyTableReader.getRows();

                for (var i = 0; i < rows.length; i++) {
                    var row = rows[i];
                    if (row.val === clickedRowValue) {
                        Activities.UI.check(row.handle[0].id, true);
                    }
                    else if (row.checked) {
                        Activities.UI.check(row.handle[0].id, false);
                    }
                }

                $scope.copySubmission(clickedRowValue);
                $timeout(angular.noop);
                break;

            case VIEW_HIDE_ALL_MODS_CONTEXT:
                var clickedRowValue = policyTableReader.checkbox(anchor);
                viewAllMods(anchor, clickedRowValue);
                break;
            case OOS_STATUS:
                mainDisplay = $rootScope.mainDisplay;
                mainDisplay.productSection = 'OOS';
                mainDisplay.show.left = false;
                mainDisplay.show.leftOther = false;
                mainDisplay.show.banner = false;
                mainDisplay.show.charms = OOS_PAGE_TITLE;
                sessionStorage['instSubmission'] = submissionId;
                sessionStorage['submissionId'] = submissionId;
                $rootScope.showMainContent = false;
                $timeout(angular.noop);
                break;
            case DELETE:
                RA.UI.doClearMessages($scope);

                Activity.doCheckForRelatedCancellationActivity(submissionId, function (result)
                {
                    var hasRelatedCancellationActivity = result.data;

                    if (confirm($scope.buildDeleteActivityWarningMessage(hasRelatedCancellationActivity)))
                    {
                        $rootScope.showPageLoading();
                        Activity.doCheckForReminders(submissionId, function (result)
                        {
                            var isMoved = result.data;
                            if (!isMoved)
                            {
                                alert('The related reminders are being deleted as well.');
                            }

                            Submission.doDeleteSubmission(submissionId, function (result)
                            {
                                var submissionDto =
                                {
                                    'customerNumber': $scope.customerNumber,
                                    'policyTermEffectiveDate': $scope.selectedPolicyEffectiveDate,
                                    'policyTermExpirationDate': $scope.selectedPolicyExpirationDate,
                                    'submissionId': EMPTY_STRING,
                                    policyInfo: {}
                                };

                                RA.Service.handleServiceResult(result, $scope);
                                var messages = result.data['SubmissionController.doDeleteSubmission'].messages || [];
                                if (messages.length > 0 && messages[0].text === UNABLE_TO_DELETE_SUBMISSION_MESSAGE)
                                {
                                    RA.UI.doClearMessages($scope);
                                    $scope.validationMessages.push({context: undefined, text: USER_INVALID_DELETE_AUTHORITY, type: MESSAGE_ERROR});
                                    $scope.doRefreshPage(result, false);
                                }
                                else
                                {
                                    Activity.findPolicyTerms([submissionDto], function (result)
                                    {
                                        var foundIsIssued = false;
                                        angular.forEach(activityMap, function (activity, index)
                                        {
                                            if (index !== rowIndex && !foundIsIssued)
                                            {
                                                if (activity.isIssued === YES)
                                                {
                                                    foundIsIssued = true;
                                                }
                                            }

                                        });

                                        if ((activity === ACTIVITY_TYPE_NEW_BUSINESS || activity === ACTIVITY_TYPE_RENEWAL) && !foundIsIssued)
                                        {
                                            $scope.applyLayout('dashboard');
                                        }
                                        else
                                        {
                                            $scope.doRefreshPage(result, true);
                                        }
                                    });
                                }
                            });
                        });
                    }
                });
        }
    };

    showAnnualizedPremium = function (policyId)
    {
        $scope.table = [];
        $rootScope.showPageLoading();
        $scope.toggleAnnualizedPremiumModal(policyId);
        $timeout(angular.noop);
    };

    $scope.toggleAnnualizedPremiumModal = function (policyId)
    {
        $scope.isAnnualizedPremiumOpen = !$scope.isAnnualizedPremiumOpen;
        $scope.annualizedPremiumSubId = '';
        if ($scope.isAnnualizedPremiumOpen)
        {
            async.series(
                [
                    function (callback)
                    {
                        Submission.getAnnualizedPremium(policyId, function (result)
                        {
                            var data = RA.Service.handleServiceResult(result, $scope);
                            callback(null, data);
                        });
                    }
                ],
                function (err, result)
                {
                    if (result != null)
                    {
                        $scope.table = [];
                        $scope.table.push({"policy": result[0].policy, "premium": result[0].premium, "term": result[0].policyTerm});
                        $scope.annualizedPremiumSubId = result[0].subId;

                        $rootScope.hidePageLoading();
                    }

                }
            );
        }
    };

    openViewHistory = function ()
    {
        $scope.isViewHistoryOpen = !$scope.isViewHistoryOpen;
    };

    unlockActivities = function (row, saved)
    {
        var activityDto = {};
        if (saved)
        {
            activityDto = saved;
        }
        else if (!row && row != 0)
        {
            var activities = [];
            var rows = activityTableReader.getCheckedRows();
            var invalidOption;
            for (var r = 0; r < rows.length; r++)
            {
                var tableRow = rows[r];
                activityDto = jQuery.extend(true, {}, {});
                activityDto.sourceId = tableRow.submissionId();
                activityDto.activityId = tableRow.val;
                var status = tableRow.status();
                if (status === 'Issued' || status === 'Hold' || status === 'Declined' || status === 'Lost' || status === 'Withdrawn')
                {
                    invalidOption = true;
                }
                activities.push(activityDto);
            }

            if (invalidOption)
            {
                if (activities.length == 1)
                {
                    alert('The activity you picked is invalid for this action');
                    return;
                }
            }

            $rootScope.showPageLoading();
            Activity.doUnlockActivities(activities, function (result)
            {
                var count = 0;

                var data = RA.Service.handleServiceResult(result, $scope);
                var unlocked = data;
                if (unlocked)
                {
                    for (var i = 0; i < unlocked.length; i++)
                    {
                        if (unlocked[i])
                        {
                            count++;
                        }
                    }
                }

                if (count > 0)
                {
                    alert(count + (count > 1 ? ' activities were ' : ' activity was ') + 'unlocked.');
                }
                else
                {
                    alert('No activities were unlocked.');
                }
                $scope.doRefreshPage(result, true);
                RA.Session.removeQuoteId();
                RA.Session.removeSelectedQuoteId();
                $rootScope.$broadcast('submissionLoaded');
            });
            return;
        }
        else
        {
            var iter = -1, x = 0, y = 0;
            while (iter < row)
            {
                var temp = $scope.activityRows[x][y];
                if (!temp)
                {
                    x++;
                    y = 0;
                }
                else
                {
                    y++;
                    iter++;
                }

                if (iter == row)
                {
                    activityDto = temp;
                    break;
                }
            }
        }

        $rootScope.showPageLoading();
        Activity.doUnlockActivities([{
            "activityId": activityDto.activityId,
            "unlockedDate": activityDto.unlockedDate,
            "sourceId": activityDto.submissionId
        }], function (result)
        {
            $scope.doRefreshPage(result, true);
            RA.Session.removeQuoteId();
            RA.Session.removeSelectedQuoteId();
            $rootScope.$broadcast('submissionLoaded');
        });
    };
    $scope.unlockActivities = unlockActivities;

    navigateMyFile = function (action)
    {
        var ids = [];
        var policyInfoList = [];
        var submissionIds = [];

        var rows = policyTableReader.getCheckedRows();
        for (var r = 0; r < rows.length; r++)
        {
            var row = rows[r];
            // Convert String to Number -- required with Navigation Controller Migration to Groovy
            ids.push(Number(row.val));
            policyInfoList.push(row.policyInfo());
        }

        rows = activityTableReader.getCheckedRows();
        for (var r = 0; r < rows.length; r++)
        {
            var row = rows[r];
            submissionIds.push(Number(row.submissionId()));
            policyInfoList.push(row.policyInfo());
        }

        switch (action)
        {
            case VIEW_ACCOUNT_DOCUMENTS:
                RA.Controller.viewDocumentsMyfile($scope.myFileLink, 'CustomerNumber=' + $scope.customerNumber);
                break;
            case VIEW_POLICY_DOCUMENTS:
                var policyInfo = policyInfoList[0];
                var polSplit = policyInfo.split(' ');
                RA.Controller.viewDocumentsMyfile($scope.myFileLink, 'PolicyNumber=' + polSplit[1] + '&Symbol=' + polSplit[0] + '&MOD=' + polSplit[2]);
                break;
            case VIEW_SUPPORTING_DOCUMENTS:
                RA.Controller.viewDocumentsMyfile($scope.myFileLink, 'SubmissionID=' + submissionIds[0]);
                break;
        }
    };

    policyCheck = function ()
    {
        var totalRows = policyTableReader.getRows().length;
        var checkedRows = policyTableReader.getCheckedRows().length;
        var isZeroLength = checkedRows === 0;
        Activities.UI.disable(Activities.UI.VIEW_ACTIVITIES, isZeroLength);
        Activities.UI.disable(Activities.UI.CREATE_ACTIVITY, isZeroLength);
        Activities.UI.disable(Activities.UI.VIEW_MODS_BUTTON, isZeroLength);
        Activities.UI.check(Activities.UI.POLICY_ALL, totalRows === checkedRows);

        if (!editAccess)
        {
            $('#createActivityButton').attr('disabled', true);
        }
    };

    activityCheck = function ()
    {
        var totalRows = activityTableReader.getRows().length;
        var actLength = activityTableReader.getCheckedRows().length;
        var activities = $scope.activityRows;
        for (var a = 0; activities.length > a; a++)
        {
            var activity = activities[a];
            for (var j = 0; j < activity.length; j++)
            {
                var row = activity[j];
                var lockedToOther = false;
                if (row.lockedByHid && !row.unlockedDate)
                {
                    var currentHid = $rootScope.currentUser.createHid;
                    if (row.lockedByHid != currentHid)
                    {
                        lockedToOther = true;
                    }
                }
            }
        }

        // Disable change details if nothing is checked
        Activities.UI.disable(Activities.UI.CHANGE_DETAILS, actLength < 1);

        // If there are no activities disable the buttons
        // If user has edit access and it's not locked to someone else, enable the buttons
        // If user has explicit unlockAccess, regardless of whether they have edit access and/or it's locked to someone else, enable the buttons
        if (actLength > 0 && ((editAccess && !lockedToOther) || $scope.unlockAccess))
        {
            setTrnStatusDisabled();
            Activities.UI.disable(Activities.UI.UNLOCK_BUTTON, false);
        } else {
            Activities.UI.disable(Activities.UI.TRN_STATUS, true);
            Activities.UI.disable(Activities.UI.UNLOCK_BUTTON, true);
        }

        Activities.UI.check(Activities.UI.ACTIVITY_ALL, totalRows === actLength);

    };

    var setTrnStatusDisabled = function()
    {
        var actLength = activityTableReader.getCheckedRows().length;
        var isReminderRowChecked = false;

        var lockedHid = EMPTY_STRING;
        $('.activityCheck:checkbox:checked').each(function()
        {
            var dataTable = $('#activityDetailsTable').dataTable({"bRetrieve":true});
            var rowIndex = dataTable.fnGetPosition($(this).closest('tr')[0]);
            var rowData = dataTable.fnGetData(rowIndex);
            var lockedToHid = rowData[8].substr(19, 10);
            lockedHid = lockedToHid;
            var activityCategoryValue = rowData[5];
            if(activityCategoryValue.indexOf('Reminder') > -1)
            {
                isReminderRowChecked = true;
            }
        });

        var lockedToMe = $rootScope.currentUser.createHid === lockedHid;
        var lockedToSomebodyElse = lockedHid !== null && lockedHid !== EMPTY_STRING && !lockedToMe;
        var noneSelected = actLength === 0;
        var oneSelected = actLength === 1;
        var oneSelectedAndLockedToSomebodyElse = oneSelected && lockedToSomebodyElse;
        var shouldDisable = noneSelected || isReminderRowChecked || oneSelectedAndLockedToSomebodyElse;

        Activities.UI.disable(Activities.UI.TRN_STATUS, shouldDisable);
    };

    var sessionVars = RA.Session.getSelectedPolicy();
    if (sessionVars)
    {
        $scope.selectedPolicyEffectiveDate = (sessionVars.policyTermEffectiveDate) ? RA.UI.doMakeDateMMDDYYYY(sessionVars.policyTermEffectiveDate) : EMPTY_STRING;
        $scope.selectedPolicyExpirationDate = (sessionVars.policyTermExpirationDate) ? RA.UI.doMakeDateMMDDYYYY(sessionVars.policyTermExpirationDate) : EMPTY_STRING;
        $scope.selectedSubmission = sessionVars.submissionId;
        $scope.customerNumber = sessionVars.customerNumber;
        $scope.selectedPolicyNumber = RA.UI.nvl(sessionVars.policyNumber, ' ');
        $scope.selectedPolicyMod = sessionVars.policyMod;
        $scope.selectedPolicySymbol = sessionVars.policySymbol;
        $scope.selectedPolicyVersion = sessionVars.policyVersion;
        mySessionVars = sessionVars;
        RA.Session.addCustomerNumber($scope.customerNumber);
        RA.Session.addSubmissionIdSearch(sessionVars.submissionId);
        RA.Session.addPolicyNumber(sessionVars.policyNumber);
        RA.Session.addPolicyMod(sessionVars.policyMod);

        // Create the charms for the page.
        var charmLabel = "Policy #: ";
        $scope.charmsList = [];
        if ($scope.selectedPolicyNumber != null && (($scope.selectedPolicyNumber != EMPTY_STRING) || ($scope.selectedPolicySymbol != null && $scope.selectedPolicySymbol != EMPTY_STRING)))
        {
            var policyNumber = $scope.selectedPolicyNumber === null ? '' : $scope.selectedPolicyNumber;
            charmLabel += $scope.selectedPolicySymbol + " " + policyNumber + " " + $scope.selectedPolicyMod + " " + $scope.selectedPolicyVersion;
        }
        var charmsItem = {"label": charmLabel, "static": TRUE};
        $scope.charmsList.push(charmsItem);
        $scope.navHelper.filterCharms = $scope.charmsList;
    }

    $scope.displaySubmissionIfSearchForSubId = function(){
        if (RA.Session.getAdvancedSearch()) {
            var advancedSearchDto = JSON.parse(RA.Session.getAdvancedSearch());
            var isSubIdSearch = RA.Session.getIsSearchForSubmissionId();
            if (advancedSearchDto.submissionId && isSubIdSearch === 'true') {
                $scope.activitySearchSubmissionId = advancedSearchDto.submissionId;
                Activities.UI.blur(ACTIVITY_SEARCH);
                RA.Session.removeIsSearchForSubmissionId();
            }
        }
    };

    //page loading
//    var start = Date.now();
//    console.log('Start loading: ' + start);
    async.auto
    (
        {
            editAccess: function (callback)
            {
                Presentation.hasPermission({'resource': 'submission', 'action': 'edit'}, function (result)
                {
                    var data = RA.Service.handleServiceResult(result, $scope);
                    callback(null, data);
                })
            },
            deleteAccess: function (callback)
            {
                Presentation.hasPermission({'resource':'submission', 'action':'delete'}, function (result)
                {
                    var data = RA.Service.handleServiceResult(result, $scope);
                    callback(null, data);
                })
            },
            reopenAccess: function (callback)
            {
                Presentation.hasPermission({'resource':'submission', 'action':'reopen'}, function (result)
                {
                    var data = RA.Service.handleServiceResult(result, $scope);
                    callback(null, data);
                })
            },
            systemDate: function (callback) {
                Submission.doGetSystemDate(function (result) {
                    var data = RA.Service.handleServiceResult(result, $scope);
                    callback(NO_ERRORS, data);

                })
            },
            init: function (callback)
            {
                var dispatcher = new RA.Service.Dispatcher('manageActivities_init');

                dispatcher.dispatch(
                    {
                        decline: function (callback)
                        {
                            Presentation.findDispositionDeclinedList(function (result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue': dispatcher});
                        },
                        lost: function (callback)
                        {
                            Presentation.findDispositionLostList(function (result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue': dispatcher});
                        },
                        withdrawn: function (callback)
                        {
                            Presentation.findDispositionWithdrawnList(function (result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue': dispatcher});
                        },
                        assignTo: function (callback)
                        {
                            Presentation.findAssignToList(function (result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue': dispatcher});
                        },
                        assignment: function (callback)
                        {
                            Presentation.findAssignmentReasonList(function (result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue': dispatcher});
                        },
                        underwriterList: function(callback)
                        {
                            Presentation.findUnderwriterList(function(result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue': dispatcher});
                        },
                        endorsementType: function (callback)
                        {
                            Presentation.findEndorsementTypeList(function (result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue': dispatcher});
                        },
                        endorsementSubType: function (callback)
                        {
                            Presentation.findEndorsementSubTypeList(function (result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue': dispatcher});
                        },
                        premiumTier: function (callback)
                        {
                            Presentation.findPremiumTierList(function (result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue': dispatcher});
                        },
                        priority: function (callback)
                        {
                            Presentation.findPriorityList(function (result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue': dispatcher});
                        },
                        cancelType: function (callback)
                        {
                            Presentation.findCancellationTypeList(function (result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue': dispatcher});
                        },
                        cancelReason: function (callback)
                        {
                            Presentation.findCancellationReasonList(function (result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue': dispatcher});
                        },
                        nonRenewalReason: function (callback)
                        {
                            Presentation.findNonRenewalReasonList(function (result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue': dispatcher});
                        },
                        reinstatementReason: function (callback)
                        {
                            Presentation.findReinstatementReasonList(function (result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue': dispatcher});
                        },
                        rewriteReason: function (callback)
                        {
                            Presentation.findRewriteReasonList(function (result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue': dispatcher});
                        },
                        renewalType: function (callback)
                        {
                            Presentation.findRenewalProcessingTypeList(function (result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            });
                        },
                        referralStatus: function (callback)
                        {
                            Presentation.findReferralStatusList(function (result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue': dispatcher});
                        },
                        myFileLink: function (callback)
                        {
                            Navigation.doGetMyFileLink(function (result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue': dispatcher});
                        },
                        policies: function (callback)
                        {
                            var submissionDto =
                            {
                                'customerNumber': $scope.customerNumber,
                                'policyTermEffectiveDate': $scope.selectedPolicyEffectiveDate,
                                'policyTermExpirationDate': $scope.selectedPolicyExpirationDate,
                                'submissionId': $scope.submissionId,
                                policyInfo: {policySymbol: $scope.selectedPolicySymbol, policyNumber: $scope.selectedPolicyNumber, policyMod: $scope.selectedPolicyMod}
                            };
                            Activity.updateFromExternalPAS([$scope.submissionId], function (result)
                            {
                                RA.Service.handleServiceResult(result, $scope);
                            })
                            Activity.findPolicyTerms([submissionDto], function (result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue': dispatcher});
                        },
                        unlockAccess: function (callback)
                        {
                            Presentation.hasPermission({'resource': 'submission', 'action': 'unlock'}, function (result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue': dispatcher});
                        },
                        findAccountPolicyInfo: function (callback)
                        {
                            $scope.findAccountPolicyInfo({'callback': callback, 'queue': dispatcher});
                        },
                        manageActivitiesResultColumns: function (callback)
                        {
                            Presentation.findManagedActivitiesResultColumnList(function (result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue': dispatcher});
                        },
                        hasWorksheet: function (callback)
                        {
                            Presentation.findHasWorksheet(function (result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue': dispatcher});
                        },
                        auditList: function (callback)
                        {
                            Presentation.findAuditSubTypeList(function (result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue': dispatcher});
                        },
                        dispositionStatusList:function(callback)
                        {
                            Presentation.findDispositionStatusList(function(result)
                            {
                                var data = RA.Service.handleServiceResult(result, $scope);
                                callback(null, data);
                            }, {'queue':dispatcher});
                        }
                    },
                    function (err, results)
                    {
                        $scope.declineList = results.decline;
                        $scope.lostList = results.lost;
                        $scope.withdrawnList = results.withdrawn;
                        $scope.assignToList = results.assignTo;
                        $scope.underwriterSelectList = results.underwriterList;
                        $scope.assignmentReasonList = results.assignment;
                        $scope.endorsementTypeList = results.endorsementType;
                        $scope.endorsementSubTypeList = results.endorsementSubType;
                        $scope.premiumTierList = results.premiumTier;
                        $scope.priorityList = results.priority;
                        $scope.cancellationTypeList = results.cancelType;
                        $scope.cancellationReasonList = results.cancelReason;
                        $scope.nonRenewalReasonList = results.nonRenewalReason;
                        $scope.reinstatementReasonList = results.reinstatementReason;
                        $scope.rewriteReasonList = results.rewriteReason;
                        $scope.renewalProcessingTypeList = results.renewalType;
                        $scope.referralStatusList = results.referralStatus;
                        $scope.myFileLink = results.myFileLink;
                        $scope.unlockAccess = results.unlockAccess;
                        $scope.hasWorksheet = results.hasWorksheet;
                        $scope.auditTypeList = results.auditList;
                        $scope.dispositionStatusList = RA.Controller.convertObjectToValueLabelPairs(results.dispositionStatusList);

                        var manageActivitiesResultColumns = results.manageActivitiesResultColumns;
                        var headerList = [];
                        // Populate Sort List and Assign Table Column Values
                        if (manageActivitiesResultColumns != null)
                        {
                            for (var i in manageActivitiesResultColumns)
                            {
                                if (i.indexOf('@') === -1)
                                {
                                    if ((i !== "bu1" || !HIDE_BU1_SPECIFIC_COLUMN) && (i !== "bu2" || !HIDE_BU2_SPECIFIC_COLUMN))
                                    {
                                        // If BU Specific Field should be hidden, do not push into header array
                                        headerList.push(manageActivitiesResultColumns[i]);
                                    }
                                }
                            }
                        }

                        if($scope.dispositionStatusList != undefined)
                        {
                            unRevisedDispositionStatusList = angular.copy($scope.dispositionStatusList)
                        }

                        $scope.policyHeaderNames = headerList;

                        $scope.policyTermRows = results.policies;
                        $scope.refreshAfterPolicyTermRows(callback);

                        $timeout(function ()
                        {
                            $rootScope.$broadcast('submissionLoaded');
                        });
                    }
                );
            },
            determineNotesExist: ['init', function (callback)
            {
                $scope.doDetermineNotesExist(callback);
            }]
        },
        function (err, results)
        {
            editAccess = results.editAccess;
            deleteAccess = results.deleteAccess;
            reopenAccess = results.reopenAccess;

            if (!editAccess)
            {
                $('#changeDetailsButton').html('View Details...');
            }

            $scope.$apply();
            $scope.systemDate = results.systemDate;

            Activities.UI.buildPolicyTable($scope, $compile);

            if ($scope.policyTermRows && $scope.policyTermRows.length == 1)
            {
                policyTableReader.getRows()[0].handle.click();
                Activities.UI.click(Activities.UI.VIEW_ACTIVITIES);
            }
            else if ($scope.policyTermRows && $scope.policyTermRows.length > 1)
            {
                var rows = policyTableReader.getRows();
                for (var r = 0; r < rows.length; r++)
                {
                    var row = rows[r];
                    var policyInfo = row.policyInfo();
                    var submissionId = $scope.policyTermRows[r].submissionId;
                    var split = policyInfo.split(' ');
                    if (split[0] == $scope.selectedPolicySymbol && (split[1] === $scope.selectedPolicyNumber || $scope.selectedSubmission == submissionId))
                    {
                        row.handle.click();
                        break;
                    }
                }

                Activities.UI.disable(Activities.UI.CREATE_ACTIVITY, policyTableReader.getCheckedRows().length == 0);
                Activities.UI.disable(Activities.UI.VIEW_ACTIVITIES, false);
                Activities.UI.disable(Activities.UI.VIEW_MODS_BUTTON, policyTableReader.getCheckedRows().length == 0);
                Activities.UI.disable(Activities.UI.TRN_STATUS, true);
                Activities.UI.disable(Activities.UI.UNLOCK_BUTTON, true);
                Activities.UI.disable(Activities.UI.CHANGE_DETAILS, true);
                Activities.UI.click(Activities.UI.VIEW_ACTIVITIES);
            }

            $scope.cancellationTypeListMidTerm = [];
            for (var c in $scope.cancellationTypeList)
            {
                if ($scope.cancellationTypeList[c].itemCode != 'F')
                {
                    $scope.cancellationTypeListMidTerm.push($scope.cancellationTypeList[c]);
                }
            }
            $scope.cancellationTypeListMain = $scope.cancellationTypeList;

            if (RA.Session.getSessionMode() === SESSION_POLICY_MODE)
            {
                $scope.disableSubmissionLHN = true;
                $scope.disableWorksheetLHN = true;
            }

            if (!editAccess)
            {
                $('#createActivityButton').attr('disabled', true);
            }

            $scope.reflowTheads();

            $rootScope.hidePageLoading();
            $scope.pageLoaded = YES;
        }
    );

    $scope.parsePolicyNumber = function parsePolicyNumber(policyNumber)
    {
        if (policyNumber)
        {
            policyNumber = policyNumber.trim();
            if (policyNumber === VALUE_FOR_NULL_VALUE)
            {
                return "";
            }

            return policyNumber
        }
        return "";
    };

    $rootScope.doRefresh = function doRefresh()
    {
        RA.UI.doRefresh(function ()
        {
            RA.Session.addSelectedPolicy(mySessionVars);
        })
    };

    $scope.doRefreshPage = function doRefreshPage(result, clearMessages, modalFunction, scrollToTop, userInteraction, callback)
    {
        var hasProcessingError = false;
        var message = null;

        if (clearMessages)
        {
            RA.UI.doClearMessages($scope);
        }

        //Check Needed since UD Non-Renewal will Create and Work Activity during same transaction
        if(result.data && result.data.length > 0 && result.data[0].transactionTypeRefCode == TRANSACTION_TYPE_NON_RENEWAL ) {
            hasProcessingError = $scope.validationMessages.length > 0 && $scope.validationMessages[0].text == PROCESS_NON_RERENEWAL_MANUALLY ? true : false;
            if (hasProcessingError){
                message = PROCESS_NON_RERENEWAL_MANUALLY;
            }
        }
        else if(result.data && result.data.length > 0 && result.data[0].transactionTypeRefCode == TRANSACTION_TYPE_REVERSE_NON_RENEWAL ) {
            hasProcessingError = $scope.validationMessages.length > 0 && $scope.validationMessages[0].text == PROCESS_REV_NON_RENEWAL_MANUALLY ? true : false;
            if (hasProcessingError){
                message = PROCESS_REV_NON_RENEWAL_MANUALLY;
            }
        }

        if (result.status === true || hasProcessingError === true)
        {
            // save the policies that were checked in the policy term table.
            var rows = policyTableReader.getCheckedRows();
            $scope.selectedPolicies = [];
            for (var r = 0, rowLength = rows?rows.length:0; r < rowLength; r++)
            {
                var test = rows[r].policyInfo();
                var split = test.split(' ');
                $scope.selectedPolicies.push({policyId: rows[r].val, policySymbol: split[0], policyNum: split[1]});
                delete policyDetails[rows[r].val];
            }

            if (modalFunction)
            {
                modalFunction();
            }

            var submissionDto =
            {
                'customerNumber': $scope.customerNumber,
                'policyTermEffectiveDate': $scope.selectedPolicyEffectiveDate,
                'policyTermExpirationDate': $scope.selectedPolicyExpirationDate,
                'submissionId': EMPTY_STRING,
                policyInfo: {}
            };

            Activity.findPolicyTerms([submissionDto], function (result)
            {
                var data = RA.Service.handleServiceResult(result, $scope);

                if (result.status === true && data != null)
                {
                    $scope.policyTermRows = data;
                    $scope.refreshAfterPolicyTermRows();
                    Activities.UI.buildPolicyTable($scope, $compile);

                    if ($scope.failed != null && $scope.failed.length > 0)
                    {
                        RA.UI.doDisplayUIMessages($scope.failed, $scope);
                    }
                    $scope.failed = [];
                }

                // recheck the policies that were checked
                angular.forEach($scope.selectedPolicies, function (selectedPolicy)
                {
                    var rows = policyTableReader.getRows();
                    for (var r = 0; r < rows.length; r++)
                    {
                        var row = rows[r];
                        var testAgain = row.policyInfo();
                        var splitAgain = testAgain.split(' ');
                        if ( !row.checked && (row.val === selectedPolicy.policyId ||
                            ((splitAgain[0] === selectedPolicy.policySymbol) &&
                             (splitAgain[1] === selectedPolicy.policyNum))))
                        {
                            row.handle.click();
                            return false;
                        }
                    }
                });

                // clear out the selected policies
                $scope.selectedPolicies = [];

                // stimulate hitting the "View activities" button
                $rootScope.hidePageLoading();
                $scope.findActivitiesForPolicy(callback);

                Activities.UI.disable(Activities.UI.CHANGE_DETAILS, true);
                Activities.UI.disable(Activities.UI.TRN_STATUS, true);
                Activities.UI.disable(Activities.UI.UNLOCK_BUTTON, true);
                Activities.UI.disable(Activities.UI.CREATE_ACTIVITY, false);
                Activities.UI.disable(Activities.UI.VIEW_ACTIVITIES, false);
                $scope.$apply(); // TODO - get rid of this
            });
        }
        else
        {
            $rootScope.hidePageLoading();
            if (scrollToTop)
            {
                Activities.UI.scrollModalTop(scrollToTop);
            }

            if (userInteraction) // TODO - verify this is still valid code
            {
                var message = 'One or more of the policies selected did not meet the appropriate criteria to create the activity. The related policy must be bound or issued to create this activity. If you continue the system will create activities for those that do meet the criteria, if you cancel the system will not create any activities.';
                var isUserInteraction = false;
                for (var m in result.messages)
                {
                    if (result.messages[m].text == 'REQUIRE_USER_RESPONSE')
                    {
                        isUserInteraction = true;
                        break;
                    }
                    else if (result.messages[m].text == 'CONGRATULATIONS')
                    {
                        return;
                    }
                }

                if (isUserInteraction && confirm(message))
                {
                    var passed = [];
                    var failed = [];
                    for (var d in data)
                    {
                        if (data[d] != null)
                        {
                            passed.push(data[d]);
                        }
                    }

                    for (var a in activities)
                    {
                        for (var p in passed)
                        {
                            var isValid = false;
                            var act = activities[a];
                            if (act.policyId == passed[p].policyId)
                            {
                                isValid = true;
                                break;
                            }

                            if (!isValid)
                            {
                                var policyId = act.policyId;
                                var rows = policyTableReader.getRows();
                                for (var r = 0; r < rows.length; r++)
                                {
                                    var row = rows[r];
                                    if (row.val == policyId)
                                    {
                                        var policy = row.policyInfo();
                                        var policyNumber = policy.split(' ')[1];
                                        failed.push({
                                            'type': 'info',
                                            'context': '',
                                            'text': 'Activity for policy ' + policyNumber + ' could not be created.'
                                        });
                                    }
                                }
                            }
                        }
                    }
                    $scope.failed = failed;
                    RA.UI.doClearMessages($scope);
                    $scope.createActivities(passed);
                }
            }
        }
        if(hasProcessingError){
            $scope.infoMessages.push({context: "", text: message, type: MESSAGE_INFO});
        }
        //else if(reverseNonRenewalWorkError){
        //    $scope.infoMessages.push({context: "", text: PROCESS_REV_NON_RENEWAL_MANUALLY, type: MESSAGE_INFO});
        //}
    };
    Activities.UI.removeLink(Activities.UI.ACCOUNT_NAV, 500);
   function highToLow(a, b){return +b - +a;}
}

function Activities()
{
}
Activities.UI = function ()
{
};

Activities.UI.POLICY_TABLE = 'policyTermTable';
Activities.UI.ACTIVITY_TABLE = 'activityDetailsTable';
Activities.UI.TRN_STATUS = 'setTRNStatus';
Activities.UI.CHANGE_DETAILS = 'changeDetailsButton';
Activities.UI.VIEW_ACTIVITIES = 'viewActivitiesButton';
Activities.UI.CREATE_ACTIVITY = 'createActivityButton';
Activities.UI.VIEW_MODS_BUTTON = 'viewAllModsButton';
Activities.UI.UNLOCK_BUTTON = 'unlockButton';
Activities.UI.POLICY_ALL = 'policyAll';
Activities.UI.ACTIVITY_ALL = 'activityAll';
Activities.UI.CREATE_BUTTON = 'createButton';
Activities.UI.DETAIL_SAVE = 'detailSave';
Activities.UI.DETAIL_CLOSE = 'detailClose';
Activities.UI.DETAIL_CANCEL = 'detailCancel';
Activities.UI.DETAIL_UNLOCK = 'detailUnlock';
Activities.UI.DETAIL_REMIND = 'detailCloseRemind';
Activities.UI.DETAIL_SAVE_AND_SET_STATUS = 'saveDetailsAndChangeTRNStatus';
Activities.UI.EXPLANATION_LABEL = 'explanationLabel';
Activities.UI.CUSTOMER_NAV = 'customerExperienceNav';
Activities.UI.ACCOUNT_NAV = 'accountSummaryNav';
Activities.UI.CANCEL_SUB_TYPE = 'cancellationSubType';

Activities.UI.buildPolicyTable = function ($scope, $compile)
{
    var actTable, k;
    var checkedRowsCount = 0;
    var policyTermRows = $scope.policyTermRows;

    var showRefreshButtonOnFloating = function(isfloating){
        $scope.isPolicyFloating = isfloating;
        $rootScope.$broadcast('isPolicyFloatingNow');
    };

    if($scope.policyTermRows && isInitialPageLoad)
    {
        allPolicyTermRows = angular.copy($scope.policyTermRows);
        isInitialPageLoad = false;
    }

    if (showSelectedPolicyEntriesOnly){

        for(k in isPolicyCheckedMap){
            if(isPolicyCheckedMap[k] == true){
                checkedRowsCount += 1;
            }
        }
        $scope.policyFilter = 'selectedEntries';
        Activities.UI.text('selectedPoliciesButton', 'Selected (' + checkedRowsCount + ')');
    } else {
        $scope.policyFilter = 'allEntries';
        if(policyTermRows)
        Activities.UI.text('allPoliciesButton', 'All (' + policyTermRows.length + ')');
    }
    if (policyTermRows != null)
    {
        var iter = 0;
        var lastPolicy;
        var lines = [];
        var aaData = [];
        var policyRow = policyTermRows[i];
        var checkedId;
        var matchedRow;
        var sessionVar = RA.Session.getSelectedPolicy();

        for (var i = 0; i < policyTermRows.length; i++)
        {
            var row = policyTermRows[i];
        if (!showSelectedPolicyEntriesOnly || (showSelectedPolicyEntriesOnly && (isPolicyCheckedMap[row.policyId] || isPolicyCheckedMap[row.policyId] == undefined))) {
            var policyInfo = row.policySymbol + ' ' + row.policyNumber;
            if (lastPolicy && lastPolicy != policyInfo) {
                lines.push(iter);
            }
            iter++;

            var lastPolicy = policyInfo;
            var producerCode = row.producerCode;
            if (producerCode == null)
            {
                producerCode = EMPTY_STRING;
            }
            else
            {
                producerCode = " / " + producerCode;
            }

            var dropDown;
            if (row.hideDropDown)
            {
                dropDown = '';
            }
            else
            {
                var text = 'View/Hide All Mods/Versions';
                var action = row.isShowing ? 'HIDE_MODS' : 'SHOW_MODS';
                var doEnableCopy = false;
                var copyEligibleFlag = row.copyEligibleFlag;
                if (copyEligibleFlag != undefined){
                    if (editAccess && (copyEligibleFlag != 'DISABLECOPY'))
                      doEnableCopy = true
                }

                dropDown = '<div class="btn-group">' +
                    '<gaig-context-menu>' +
                    '<button class="btn">' +
                    '<span class="caret"></span>' +
                    '</button>' +
                    '<ul>' +
                    '<li id="viewAllModsLink_' + (iter - 1) + '"><a onclick="handleMenuAction(this, ' + VIEW_HIDE_ALL_MODS_CONTEXT + ')">' + text + '</a></li>' +
                    '<li id="viewActivitiesLink_' + (iter -1) + '"><a onclick ="handleMenuAction(this, ' + VIEW_ACTIVITIES + ')">View Activities</a></li>' +
                    '<li id="createActivityLink_' + (iter -1) + '"'+(editAccess?'':' class="disabled"')+'>'+(editAccess?'<a onclick="handleMenuAction(this, ' + CREATE_ACTIVITY + ')">Create Activity</a>':'Create Activity')+ '</li>' +
                    '<li id="copySubmissionLink_' + (iter -1) + '"'+(doEnableCopy?'':' class="disabled"')+'>'+(doEnableCopy?'<a onclick="handleMenuAction(this, ' + COPY_SUBMISSION + ')">Copy</a>':'Copy')+'</li>' +
                    '</ul>' +
                    '</gaig-context-menu>' +
                    '</div>';
            }

            var checkValue = row.policyId ? row.policyId : row.submissionId;
            var checkBoxId = "policyCheckBox" + (parseInt(i) + 1);
            var premiumButtonId = "annualizedPremium" + (parseInt(i) + 1);

            var statusArray = ['In Force', 'Expired', 'Renewed', 'Non-Renewed', 'Cancelled', 'Canceled'];
            var premButton;

            if(row.sourceSystemRefCode == 'UD' && row.policySymbol == 'WC' && statusArray.indexOf(row.policyStatus) != -1){
                premButton = '<input type="button" style="padding-left: 0px;padding-right: 0px;float: left;width: 75px;white-space: normal;" value = "View Premium" id="' + premiumButtonId +
                    '" input class="btn" onclick="showAnnualizedPremium('+row.policyId+')"/> <label class="default-cursor" style="float: right;padding-top: 19px;" ra-help-tooltip ' +
                    'help-text="The premium determined as if all exposures were on the policy for the 12 month term of the Policy."></label>'
            } else {
                premButton = row.annualizedPremium
            }
            var rowData = [
                dropDown,
               '<input id="' + checkBoxId + '" input class="policyCheck" type="checkbox" ' + (isPolicyCheckedMap[row.policyId] ? 'checked="true"' : "") + 'value="' + checkValue + '" id="policy' + row.policyId + '" onclick="policyCheck()"/>',
                RA.UI.nvl(row.policySymbol, VALUE_FOR_NULL_VALUE) + ' ' + RA.UI.nvl(row.policyNumber, VALUE_FOR_NULL_VALUE) + ' ' + RA.UI.nvl(row.policyMod, VALUE_FOR_NULL_VALUE) + ' ' + RA.UI.nvl(row.policyVersion, ''),
                row.policyTermEffectiveDate + '-' + row.policyTermExpirationDate,
                row.policyStatus,
                row.bu1,
                row.agencyName + producerCode,
                row.underwriter,
                row.writtenPremium,
                premButton
            ];

            if (sessionVar)
            {
                if (sessionVar.policySymbol == row.policySymbol
                    && sessionVar.policyNumber == row.policyNumber)
                {
                    checkedId = checkBoxId;
                    matchedRow = row;
                }
            }
            aaData.push(rowData);
        }
        }

        var dataTable = $('#' + Activities.UI.POLICY_TABLE).dataTable(
            {
                "bLengthChange": false,
                "bAutoWidth": false,
                "bPaginate": false,
                "bRetrieve": true,
                "oLanguage": {
                    "sInfo": "_TOTAL_ Record(s)",
                    "sInfoFiltered": "&nbsp;",
                    "sInfoEmpty": "&nbsp;&nbsp;0 Records"
                },
                "sDom": '<"rowsFoundManageActivities"i>',
                "aaSorting": [],
                "aoColumns": [
                    {"sWidth": "5%", "sClass": "centerColumn"},
                    {"sWidth": "5%", "sClass": "centerColumn"},
                    {"sWidth": "10%"},
                    {"sWidth": "15%"},
                    {"sWidth": "10%"},
                    {"sWidth": "10%"},
                    {"sWidth": "15%"},
                    {"sWidth": "10%"},
                    {"sWidth": "5%"},
                    {"sWidth": "10%"}
                ],
                "aoColumnDefs": [
                    {"bSortable": false, 'aTargets': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]},
                    {"bSearchable": false, "aTargets": [DROPDOWN_MENU_COLUMN_INDEX]}
                ]
            });
        dataTable.fnClearTable();
        dataTable.fnAddData(aaData);

        dataTable.on('floatThead', function(e, isFloated, floatContainer) {
            if (isFloated) {
                showRefreshButtonOnFloating(true);
                floatContainer.css("box-shadow", "rgba(0, 0, 0, 0.5) 0px 4px 18px");
            } else {
                showRefreshButtonOnFloating(false);
                floatContainer.css("box-shadow", "none");
            }
        });

        dataTable.floatThead({zIndex:900});

        for (var v in lines)
        {
            var line = lines[v];
            var dataTable = $('#' + Activities.UI.POLICY_TABLE).dataTable({"bRetrieve": true});
            var nodes = dataTable.fnGetNodes();
            $(nodes[line]).attr('style', 'border-top:medium solid #000000;');
        }
        var dataTableBody = dataTable.find('tbody');
        $compile(dataTableBody)($scope);

        if (!syncedSessionVars) {
            syncedSessionVars = true;
            setTimeout(function() {
                var matchedModAndVersion = false;
                if (checkedId) {
                    if (sessionVar.policyMod == matchedRow.policyMod
                        && sessionVar.policyVersion == matchedRow.policyVersion) {
                        matchedModAndVersion = true;
                    }
                    setTimeout(function(){
                        var checkedEl = $("#" + checkedId);

                        if (checkedEl.length == 1) {
                            checkedEl.prop("checked", true);
                        }
                        if (!matchedModAndVersion) {
                            $scope.viewModsForPolicy(sessionVar);
                        }
                    }, 200);
                }
            },100);
        }
    }
    //if the policy table height changed, we need to fix the header for the activities table
    actTable = $('#' + Activities.UI.ACTIVITY_TABLE);
    if (actTable) actTable.trigger('reflow');
};

Activities.UI.buildActivityTable = function ($scope, currentHid, $compile, $filter)
{
    var activityRows = $scope.activityRows;
    var workAnchor = $scope.workSubmissionAnchor;
    var viewAnchor = $scope.viewSubmissionAnchor;
    var setTransactionAnchor = $scope.setTransactionAnchor;
    var reopenAnchor = $scope.reopenAnchor;
    var deleteAnchor = $scope.deleteAnchor;

    var aaData = [];
    var lastPolicy;
    var lines = [];
    var locks = [];
    var disable = [];
    var iter = 0;
    var x = '';
    var oosBadgeString = "";
    var oosBadgeType = "badge-warning";

    var showRefreshButtonOnFloating = function( isfloating){
        $scope.isActivityFloating = isfloating;
        $rootScope.$broadcast('isActivityFloatingNow');
    };

    activityMap = {};
    for (var i = 0; i < activityRows.length; i++)
    {
        var arrayRow = activityRows[i];
        for (var j = 0; j < arrayRow.length; j++)
        {
            oosBadgeString = "";
            oosBadgeType = "badge-warning";

            var row = arrayRow[j];

            // Convert Transaction Premium to Money Format
            var text = row.trnPremium;
            if (text != null && text != EMPTY_STRING)
            {
                row.trnPremium = text;
            }
            else
            {
                row.trnPremium = EMPTY_STRING;
            }

            var policyColumn;
            if (row.isNonUD === "NO") {
                policyColumn = "<img class=\"sourceSystemCube\">" + row.policy;
            } else {
                policyColumn = row.policy
            }

            if (lastPolicy && lastPolicy != row.policy)
            {
                lines.push(iter);
            }
            iter++;
            lastPolicy = row.policy;
            status = row.status;

            var locked = false;
            var lockedToOther = false;
            if (row.lockedByHid && !row.unlockedDate)
            {
                locks.push({"lockIndex": iter - 1, "lockName": row.lockedByName, "lockHid": row.lockedByHid});
                locked = true;
                if (row.lockedByHid != currentHid)
                {
                    lockedToOther = true;
                }
            }

            // i will refactor after this release
            var temp = {
                'isNonUD': row.isNonUD,
                'isBound': row.isBound,
                'isHold': row.isHold,
                'isDispositioned': row.isDisposition,
                'isIssued': row.isIssued,
                'isRewrite': row.isRewrite,
                'isCancellation': (row.activity == 'Cancellation'),
                'isReminder': (row.activity == 'Reminder'),
                'locked': locked,
                'lockedToOther': lockedToOther,
                'index': iter - 1,
                'policyNumber': row.policyNumber,
                'isPremiumAudit':row.activity === ACTIVITY_TYPE_PREM_AUDIT,
                'isOOSMenuActive':row.oosStatus === OOS_SUSPENDED || row.oosStatus === OOS_SUCCESS
            };
            disable.push(temp);
            activityMap[iter - 1] = angular.copy(temp);

            var endorsementNum = row.endorsementNumber;
            oosBadgeString = "";

            if(endorsementNum === null) {
                endorsementNum = "";
            }

            if((('OOS' === row.sysTransType) || (row.oosRpmSessionId)) && (REVISED_PREMIUM_AUDIT_TYPE !== row.type)){
                oosBadgeString = 'OOS';
            }

            if(OOS_SUSPENDED === row.oosStatus) {
                oosBadgeType = "badge-oos-error";
            }


            var checkHTML = '<input class="activityCheck" type="checkbox" value="' + row.activityId + '" onclick="activityCheck()"/>';
            var detailsText = (
                (row.activity != 'Reminder' && (row.isIssued == YES || row.isHold === YES || row.isDisposition == YES || lockedToOther) ) ||
                (row.activity == 'Reminder' && row.status == 'Closed')
                    ? 'View Details...' : 'Change Details...');
            if (!editAccess)
            {
                detailsText = 'View Details...'
            }

            row.trnEffectiveDate = row.activity === ACTIVITY_TYPE_NON_RENEWAL ? '' : row.activity === ACTIVITY_TYPE_REVERSE_NON_RENEWAL ? '' : row.trnEffectiveDate;

            var dropDown = '<div class="btn-group">' +
                '<gaig-context-menu>' +
                '<button class="btn dropdown-toggle">' +
                '<span class="caret"></span>' +
                '</button>' +
                '<ul>' +
                '<li id="workSubmissionLink_' + (iter - 1) + '"><a onclick="handleMenuAction(this, ' + WORK_SUBMISSION + ')" data-dtName="workSubmissionMA">Work Submission...</a></li>' +
                '<li id="viewSubmissionLink_' + (iter - 1) + '"><a href="/UwdRefApp/dyn/html/submission" onclick="handleMenuAction(this, ' + VIEW_SUBMISSION + ')" data-dtName="viewSubmissionMA">View Submission...</a></li>' +
                '<li id="changeDetailLink_' + (iter - 1) + '"><a onclick="handleMenuAction(this, ' + CHANGE_DETAIL + ')">' + detailsText + '</a></li>' +
                '<li id="setTransactionStatusLink_' + (iter - 1) + '"><a onclick="handleMenuAction(this, ' + SET_TRANSACTION_STATUS + ')">Set Transaction Status...</a></li>' +
                '<li id="unlockLink_' + (iter - 1) + '"><a onclick="handleMenuAction(this, ' + UNLOCK + ')">Unlock</a></li>' +
                '<li id="viewSupportingLink_' + (iter - 1) + '"><a onclick="handleMenuAction(this, ' + VIEW_SUPPORTING_DOCUMENTS + ')">View Supporting Documents</a></li>' +
                '<li id="viewPolicyLink_' + (iter - 1) + '"><a onclick="handleMenuAction(this, ' + VIEW_POLICY_DOCUMENTS + ')">View Policy Documents...</a></li>' +
                '<li id="viewAccountLink_' + (iter - 1) + '"><a onclick="handleMenuAction(this, ' + VIEW_ACCOUNT_DOCUMENTS + ')">View Account Documents...</a></li>' +
                '<li id="viewHistoryLink_' + (iter - 1) + '"><a onclick="handleMenuAction(this, ' + VIEW_HISTORY + ')">View History...</a></li>' +
                '<li id="reopenActivityLink_' + (iter - 1) + '"><a onclick="handleMenuAction(this, ' + REOPEN_ACTIVITY + ')">Reopen Activity</a></li>' +
                '<li id="deleteLink_' + (iter - 1) + '"><a onclick="handleMenuAction(this, ' + DELETE + ')">Delete...</a></li>' +
                '<li id="oosStatusLink_' + (iter - 1) + '"><a onclick="handleMenuAction(this, ' + OOS_STATUS + ')">Review/Issue OOS...</a></li>' +
                '</ul>' +
                '</gaig-context-menu>' +
                '</div>';
            aaData.push
            (
                [
                    ((row.sysTransType == SYS_TRANS_TYPE_REVERSAL && row.isSystem == YES) ? '' : dropDown),
                    ((row.sysTransType == SYS_TRANS_TYPE_REVERSAL && row.isSystem == YES) ? '' : checkHTML),
                    row.policyId,
                    policyColumn,
                    OPEN_SPAN_RIGHT_TAG + endorsementNum + CLOSE_SPAN_TAG + "<br><span class='badge " + oosBadgeType + " pull-right'>" + oosBadgeString + "</span>",
                    row.activity,
                    (row.activity == 'Reminder' ? '' : row.type),
                    OPEN_ELLIPSIS_TABLE_TAG_1 + (row.activityReasonComments ? row.activityReasonComments : '') + OPEN_ELLIPSIS_TABLE_TAG_2 + (row.activityReasonComments ? row.activityReasonComments : '') + CLOSE_DIV_TAG,
                    row.status,
                    row.trnEffectiveDate,
                    OPEN_SPAN_RIGHT_TAG + $filter(CURRENCY)(row.trnPremium)+ CLOSE_SPAN_TAG,
                    OPEN_SPAN_RIGHT_TAG + CLOSE_SPAN_TAG,
                    row.assignToName,
                    (row.activity == 'Reminder' ? '' : row.submissionId),
                    row.isWorked,
                    row.isNonUD,
                    row.polTrnEffDt,
                    row.polTrnExpDt
                ]
            );
        }
    }

    var dataTable = $('#' + Activities.UI.ACTIVITY_TABLE).dataTable(
        {
            "bLengthChange": false,
            "bRetrieve": true,
            "fnHeaderCallback": function (nHead, aData, iStart, iEnd, aiDisplay)
            {
                $(nHead.getElementsByTagName('td')[0]).attr('colspan', 18);
            },
            "fnFooterCallback": function (nFoot, aData, iStart, iEnd, aiDisplay)
            {
                $(nFoot.getElementsByTagName('td')[0]).attr('colspan', 18);
            },
            "aoColumnDefs": [
                {"bSortable": false, 'aTargets': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,16,17]},
                {"bSearchable": false, "aTargets": [DROPDOWN_MENU_COLUMN_INDEX]}
            ],

            "oLanguage": {"sInfo": "_TOTAL_ Record(s)", "sInfoFiltered": "&nbsp;", "sInfoEmpty": "&nbsp;&nbsp;0 Records"},
            "sDom": '<"dashboardFilter"<"rowsFoundManageActivities"i>',
            "bPaginate": false,
            "aaSorting": [],
            "aoColumns": [
                {"sWidth": "5%", "sClass": "centerColumn"},
                {"sWidth": "5%", "sClass": "centerColumn"},
                {"sClass": "activityTablePolicyId"},
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                {"sClass": "activityTableIsWorked"},
                {"sClass": "activityTableIsNonUD"},
                {"sClass": "activityTablePolTrnEffDt"},
                {"sClass": "activityTablePolTrnExpDt"}
            ]
        });
    dataTable.fnClearTable();
    dataTable.fnAddData(aaData);

    dataTable.on('floatThead', function(e, isFloated, floatContainer) {
        if (isFloated) {
            showRefreshButtonOnFloating(true);
            floatContainer.css("box-shadow", "rgba(0, 0, 0, 0.5) 0px 4px 18px");
        } else {
            showRefreshButtonOnFloating(false);
            floatContainer.css("box-shadow", "none");
        }
    });

    dataTable.floatThead({zIndex:900});

    for (var v in lines)
    {
        var line = lines[v];
        var dataTable = $('#' + Activities.UI.ACTIVITY_TABLE).dataTable({"bRetrieve": true});
        var nodes = dataTable.fnGetNodes();
        $(nodes[line]).attr('style', 'border-top:medium solid #000000;');
    }

    for (var v in locks)
    {
        var dataTable = $('#' + Activities.UI.ACTIVITY_TABLE).dataTable({"bRetrieve": true});
        var status = EMPTY_STRING;
        var lockImage = ($scope.unlockAccess || !lockedToOther) ? 'lockGreen.png' : 'lockBlack.png';
        status = dataTable.fnGetData(locks[v].lockIndex, 8) + '<br/><img val="' + locks[v].lockHid + '" title="' + locks[v].lockName + '" src="dyn/images/' + lockImage + '"/>';
        dataTable.fnUpdate(status, locks[v].lockIndex, 8);
    }

    for (var v in disable)
    {
        var dataTable = $('#' + Activities.UI.ACTIVITY_TABLE).dataTable({"bRetrieve": true});
        var tableRow = dataTable.fnGetData(disable[v].index);
        var issued = disable[v].isIssued === YES;
        var nonUDIssued = disable[v].isNonUD === YES && issued;
        var disposition = disable[v].isDispositioned === YES;
        var reminder = disable[v].isReminder;
        var locked = disable[v].locked;
        var lockedToOther = disable[v].lockedToOther;
        var index = disable[v].index;
        var bound = disable[v].isBound === YES;
        var hold = disable[v].isHold === YES;
        var isCancelHalf = disable[v].isRewrite === YES && disable[v].isCancellation;
        // Added isCancelRewriteAndUD variable to chech if the transaction is rewrite part of cancel rewrite in UD
        var isCancelRewriteAndUD = disable[v].isRewrite === YES && disable[v].isNonUD === NO;
        //isPremiumAudit is to check if the transaction type is Premium Audit or not
        var isPremiumAudit = disable[v].isPremiumAudit;
        var policyNumber = disable[v].policyNumber;
        var policyAnchor = $scope.viewPolicyAnchor;
        var enableViewPolicy = false;
        var isOOSMenuActive = disable[v].isOOSMenuActive;
        var isUD = disable[v].isNonUD === NO

        if (policyNumber && policyNumber.length > 0)
        {
            enableViewPolicy = true;
        }

        $($($(tableRow)[0]).children('gaig-context-menu').children('ul')).children('li').each(function ()
        {
            var id = $(this).attr('id');
            switch (id)
            {
                case 'workSubmissionLink' + '_' + index:
                    RA.UI.doAdjustAnchor(id, !issued && !hold && !disposition && !reminder && !lockedToOther && editAccess, workAnchor);
                    break;
                case 'viewSubmissionLink' + '_' + index:
                    RA.UI.doAdjustAnchor(id, !reminder, viewAnchor);
                    break;
                case 'setTransactionStatusLink' + '_' + index:
                    RA.UI.doAdjustAnchor(id, !reminder && !issued && !hold && !disposition && !lockedToOther && editAccess, setTransactionAnchor);
                    break;
                case 'unlockLink' + '_' + index:
                    RA.UI.doAdjustAnchor(id, !reminder && !issued && !hold && !disposition && locked &&
                        ($scope.unlockAccess || !lockedToOther) && editAccess, setTransactionAnchor);
                    break;
                case 'reopenActivityLink' + '_' + index:
                    RA.UI.doAdjustAnchor(id, !isPremiumAudit && !isCancelHalf && !isCancelRewriteAndUD &&
                        (!issued || nonUDIssued) && !hold && (disposition || nonUDIssued) && !reminder && !lockedToOther && !isUD && reopenAccess, reopenAnchor);
                    break;
                case 'deleteLink' + '_' + index:
                    RA.UI.doAdjustAnchor(id, ((!bound && !issued && !hold && !disposition && !reminder && !lockedToOther) && deleteAccess), deleteAnchor);
                    break;
                case 'viewPolicyLink' + '_' + index:
                    RA.UI.doAdjustAnchor(id, enableViewPolicy, policyAnchor);
                    break;
                case 'oosStatusLink' + '_' + index:
                    RA.UI.doAdjustAnchor(id, isOOSMenuActive);
                    break;
            }
        });
    }
    var dataTableBody = dataTable.find('tbody');
    $compile(dataTableBody)($scope);

    // Resize the table when there's no data to fix the dataTable being drawn incorrectly
    if(0 === activityRows.length) {
        dataTable.resize();
    }

    $scope.displaySubmissionIfSearchForSubId();
};

Activities.UI.disable = function (field, disabled)
{
    $('#' + field).attr('disabled', disabled);
};

Activities.UI.check = function (field, checked)
{
    $('#' + field).prop('checked', checked);
};

Activities.UI.click = function (field)
{
    $('#' + field).click();
};

Activities.UI.clickElement = function clickElement(element)
{
    $(element).click();
};

Activities.UI.show = function (field)
{
    $('#' + field).show();
};

Activities.UI.hide = function (field)
{
    $('#' + field).hide();
};

Activities.UI.blur = function (field)
{
    $('#' + field).blur();
};

Activities.UI.addClass = function (field, className)
{
    $('#' + field).addClass(className);
};

Activities.UI.removeClass = function (field, className)
{
    $('#' + field).removeClass(className);
};

Activities.UI.html = function (object)
{
    return $(object).html();
};

Activities.UI.text = function (field, text)
{
    return $('#' + field).text(text);
};

Activities.UI.scrollModalTop = function (modalName)
{
    $('#' + modalName).find('.modal-body-refapp').animate({"scrollTop": 0}, 200);
};

Activities.UI.scrollTransactionStatus = function ()
{
    $('html, body').animate({scrollTop: $("#lostCarrierSection").offset().top}, 200);
};

Activities.UI.scrollComments = function(commentId)
{
    $('#changeActivityModal').find('.modal-body-refapp').animate({scrollTop: $(commentId).offset().top}, 100);
};

Activities.UI.removeLink = function (link, timeout)
{
    $('#' + link).removeAttr('href', timeout ? timeout : 0);
};

Activities.UI.findLockedBy = function (object)
{
    var trObj = object.tagName === 'TR' ? object : $(object).closest('tr');
    return $($(trObj).children()[LOCKED_TO_HID_COLUMN_INDEX]).children('img').attr('val');
};
